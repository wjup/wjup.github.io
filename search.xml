<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mysql的定时任务-事件]]></title>
    <url>%2F2020%2F04%2F14%2Fmysql%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;自MySQL5.1.6起，增加了一个非常有特色的功能-事件调度器（Event Scheduler），可以用做定时执行某些特定任务（例如：删除记录、对数据进行汇总、数据备份等等），来取代原先只能由操作系统的计划任务来执行的工作。更值得一提的是MySQL的事件调度器可以精确到每秒钟执行一个任务，而操作系统的计划任务（如：Linux的cron或Windows下的任务计划）只能精确到每分钟执行一次。对于一些对数据实时性要求比较高的应用（例如：股票、赔率、比分等）就非常适合。 &emsp;事件调度器有时也可以称为临时触发器（temporal triggers），因为事件调度器是基于特定时间周期触发来执行某些任务，而触发器（Triggers）是基于某个表所产生的事件触发的，区别也就在这里。 首先检查是否开启了定时任务 查看event是否开启 : 1SHOW VARIABLES ``LIKE` `'%event_sche%'``; 将事件计划开启 : 1234SET` `GLOBAL` `event_scheduler = 1;-- 或者SET GLOBAL event_scheduler = ON;-- 我们也可以在配置my.cnf文件 中加上 event_scheduler = 1 将事件计划关闭 : 1SET` `GLOBAL` `event_scheduler = 0; 关闭事件任务 : 1ALTER` `EVENT eventName ``ON` `COMPLETION PRESERVE DISABLE; 开启事件任务 : 1ALTER` `EVENT eventName ``ON` `COMPLETION PRESERVE ENABLE; 查看事件任务 : 1SHOW EVENTS ; 创建事件语法123456CREATE EVENT [IFNOT EXISTS] event_name ONSCHEDULE schedule [ONCOMPLETION [NOT] PRESERVE] [ENABLE | DISABLE] [COMMENT 'comment'] DO sql_statement; 12345678schedule: AT TIMESTAMP [+ INTERVAL INTERVAL] | EVERY INTERVAL [STARTS TIMESTAMP] [ENDS TIMESTAMP] INTERVAL: quantity &#123;YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE | WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE | DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND&#125; [ON COMPLETION [NOT] PRESERVE]可以设置这个事件是执行一次还是持久执行，默认为NOT PRESERVE。[ENABLE | DISABLE]可以设置该事件创建后状态是否开启或关闭，默认为ENABLE。[COMMENT &#39;comment&#39;]可以给该事件加上注释。 示例 每秒更新tb_test表的时间 123CREATE EVENT e_test_insertON SCHEDULE EVERY 1 SECONDDO update tb_test set update_time = now() where id = 1 5天后清空test表： 123CREATE EVENT e_testON SCHEDULE AT CURRENT_TIMESTAMP+INTERVAL 5 DAYDO TRUNCATE TABLE test; 2020年1月11日06点整清空test表： 123CREATE EVENT e_test1ON SCHEDULE AT TIMESTAMP'2020-01-01 06:00:00'DO TRUNCATE TABLE test; 每天定时清空test表： 123CREATE EVENT e_test2ON SCHEDULE EVERY 1 DAYDO TRUNCATE test; 5天后开启每天定时清空test表： 1234CREATE EVENT e_test3ON SCHEDULE EVERY 1 DAYSTARTS CURRENT_TIMESTAMP+INTERVAL 5 DAYDO TRUNCATE test; 每天定时清空test表，5天后停止执行： 1234CREATE EVENT e_test4ON SCHEDULE EVERY 1 DAYENDS CURRENT_TIMESTAMP+INTERVAL 5 DAYDO TRUNCATE test; 5天后开启每天定时清空test表，一个月后停止执行： 12345CREATE EVENT e_test5ON SCHEDULE EVERY 1 DAYSTARTS CURRENT_TIMESTAMP+INTERVAL 5 DAYENDS CURRENT_TIMESTAMP+INTERVAL 1 MONTHDO TRUNCATE test; [ON COMPLETION [NOT] PRESERVE]可以设置这个事件是执行一次还是持久执行，默认为NOT PRESERVE。 每天定时清空test表(只执行一次，任务完成后就终止该事件)： 1CREATE EVENT e_test6``ON SCHEDULE EVERY 1 DAY``ON COMPLETION NOT PRESERVE``DO TRUNCATE test; `[ENABLE | DISABLE]`可以设置该事件创建后状态是否开启或关闭，默认为ENABLE。 `[COMMENT &apos;comment&apos;]`可以给该事件加上注释。修改事件语法： 1234567ALTER EVENT event_name [ONSCHEDULE schedule] [RENAME TOnew_event_name] [ON COMPLETION [NOT] PRESERVE] [COMMENT 'comment'] [ENABLE | DISABLE] [DO sql_statement] 临时关闭事件 1ALTER EVENT e_test DISABLE; 开启事件 1ALTER EVENT e_test ENABLE; 将每天清空test表改为5天清空一次： 1ALTER EVENT e_test``ON SCHEDULE EVERY 5 DAY; 删除事件语法： 1DROP EVENT [IF EXISTS] event_name 例如删除前面创建的e_test事件 1DROP EVENT e_test; 当然前提是这个事件存在，否则会产生ERROR 1513 (HY000): Unknown event错误，因此最好加上IF EXISTS 1DROP EVENT IF EXISTS e_test; 注意：如果你将event执行了Alter event event_name disable.那么当你重新启动mysql服务器后，该event将被删除（测试版本：5.1.30） 备注：在event事件中：ON SCHEDULE 计划任务，有两种设定计划任务的方式： （1）AT 时间戳，用来完成单次的计划任务 （2）EVERY 时间（单位）的数量实践单位[STARTS 时间戳] [ENDS时间戳]，用来完成重复的计划任务。 在两种计划任务中，时间戳可以是任意的TIMESTAMP 和DATETIME 数据类型，时间戳需要大于当前时间。在重复的计划任务中，时间（单位）的数量可以是任意非空（Not Null）的整数式，时间单位是关键词：YEAR，MONTH，DAY，HOUR，MINUTE 或者SECOND。提示: 其他的时间单位也是合法的如：QUARTER, WEEK, YEAR_MONTH,DAY_HOUR,DAY_MINUTE,DAY_SECOND,HOUR_MINUTE,HOUR_SECOND, MINUTE_SECOND，不建议使用这些不标准的时间单位。 [ON COMPLETION [NOT] PRESERVE]：ON COMPLETION参数表示”当这个事件不会再发生的时候”，即当单次计划任务执行完毕后或当重复性的计划任务执行到了ENDS阶段。而PRESERVE的作用是使事件在执行完毕后不会被Drop掉，建议使用该参数，以便于查看EVENT具体信息。 应用案例本案例是利用 event scheduler 的特性，每秒钟调用一次存储过程，用于判断 SLAVE 是否正常运行，如果发现 SLAVE 关闭了，忽略 0 次错误，然后重新启动 SLAVE。 首先创建存储过程 12345678910CREATE PROCEDURE Slave_Monitor()BEGINSELECT VARIABLE_VALUE INTO @SLAVE_STATUSFROM information_schema.GLOBAL_STATUSWHERE VARIABLE_NAME='SLAVE_RUNNING';IF('ON'!=@SLAVE_STATUS) THENSET GLOBAL SQL_SLAVE_SKIP_COUNTER=0;SLAVE START;END IF;END; 由于存储过程中无法调用类似 SHOW SLAVE STATUS 这样的语句，因此无法得到确切的复制错误信息和错误代码，不能进一步的处理 SLAVE 停止的各种情况。 接着，创建任务 12345CREATE EVENT IF NOT EXISTS Slave_MonitorON SCHEDULE EVERY 5 SECONDON COMPLETION PRESERVEDOCALL Slave_Monitor(); 创建了一个任务，每 5秒钟执行一次，任务结束后依旧保留该任务，而不是删除。当然了，在本例中的任务不会结束，除非将它手动禁止了。 如果在运行中想要临时关闭一下某个任务，执行 ALTER EVENT 语句即可： 12ALTER EVENT Slave_Monitor ON COMPLETION PRESERVE DISABLE; -- 关闭事件ALTER EVENT Slave_Monitor ON COMPLETION PRESERVE ENABLE; -- 开启事件 参考： https://www.cnblogs.com/javahr/p/9664203.html https://www.jb51.net/article/172423.htm]]></content>
      <categories>
        <category>编程</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器野史 – UserAgent列传]]></title>
    <url>%2F2020%2F04%2F13%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8E%E5%8F%B2%20%E2%80%93%20UserAgent%E5%88%97%E4%BC%A0%2F</url>
    <content type="text"><![CDATA[某天，我做一个小项目，需要判断一下浏览器类型。简单的呀。 控制台敲下： navigator.userAgent 浏览器回应： Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36 天，这串是啥？你怎么连话都说不清楚？ 我对 userAgent 并不陌生，但明明一个单词就可以说清楚的事情，却是这么掏心掏肺的回答。怪可怜的，一定有冤情。 后来我查阅了很多资料，发现历史非常的精彩。 大事年表 1990年: Nexus(WorldWideWeb)诞生 1993年1月23日：Mosaic诞生 1994年12月：Netscape(Mozilla)诞生 1995年4月：Opera诞生 1995年8月16日：Internet Explorer诞生 2002年9月23日：Firefox诞生 2003年1月7日：Safari诞生 2008年9月2日：Chrome诞生 一、盘古开天地很久很久之前，上古大神 Berners-Lee 发明了 WorldWideWeb，即万维网。同时，李大神也发明了第一款浏览器。真是具有跨时代意义的工具呀，好伟大呀，人们在想，叫什么好呢？ 但大神就是大神，大神内心的想法又岂是尔等凡人能够肆意揣摩？ 万万没想到，李大神说，我这浏览器，也叫 WorldWideWeb！不行么？ 行行行。 虽然李大神起名字这么拽，但他后来发觉，还是得赋予一点承上启下的历史意义，就改名成“Nexus”。值得注意的是，这浏览器，居然是可以兼容 Unix 跟 Microsoft DOS 的。它在当时流行的各种电脑上跑得飞起，应用也越来越广，被称为“杀手级应用”。杀手级…你们看互联网一开始就是这么的腥风血雨。 但这个浏览器，还不支持图片的显示，这是出现 UserAgent 的导火索。 二、唐尧虞舜93 年，伊利诺大学的 NCSA 组织认为，浏览器无图无真相，这不好。因而他们发明了第一款可显示图片的浏览器。 真是具有跨时代意义的工具呀，好伟大呀，人们在想，叫什么好呢？ 但大神就是大神，大神就是连起名字都让你惊心动魄。 NCSA 组织说，它能显示图片，偏偏我们就要叫它“马赛克(Mosaic)”！不行么？ 行行行。 但有人就问了，Nexus 不显示图片，Mosaic 能显示，你们让 html 提供者怎么写代码？你们是不是想逼死选择困难症患者？有没有考虑过天秤座的感受？ 因而 UserAgent 就诞生了。Mosaic 将自己标志为 NCSA_Mosaic/2.0 (Windows 3.1) ，大家该怎么写代码就怎么写，但请求会带上这个信息，服务器就知道该不该返回能显示图片的 html。UserAgent 君，出生时跟我们设想的一样简单，仅仅标明了自己是什么浏览器，在什么系统运行，以及各自的版本号。 新旧浏览器们像彬彬有礼的君王，商议和让位是为了更好的繁荣。但风雨欲来。 三、楚汉争霸像刘邦一样，走出来一个搅局的小流氓。当然他还是很有志向的，他的目标，就是战胜霸主 Mosaic。后来，他还真的做到了。 如今，所有现代浏览器的 UserAgent 里都有它的标志，就像汉朝之后，我们都称为“汉”人。一群很有天赋的程序员，一起缔造了它的辉煌。 真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？ 但大神就是大神，大神就是让你永远也猜不到他们想了个什么名字。 大神们说，叫 Mozilla，不行么？ 行。但什么意思呢？ 含义有二。其一，哥斯拉(Godzilla)谐音，诚然是一头野心勃勃的怪兽；其二，”Mosaic Killa”之意，Killa 是俚语中 Killer 的拼法，即“马赛克的终结者”，赤裸裸的挑战。 惊呆了的 Mosaic 小心翼翼的念着 Mozilla 这发音：“Mo…摸咋了？”勃然大怒，“摸你妹！” 鉴于 Mosaic 当时的权势，Mozilla 改名成 Netscape Navigator(网景航海家)。小怪兽突然变成有点文艺小清新的名字，郁闷得很，但内心的血液沸腾着。虽然叫大名叫网景，但它把 UserAgent 偷偷设置成 Mozilla/1.0 (Win3.1) 。还是摸咋了？咬我？ 四、宋元之战很快，NetScape 战胜了 Mosaic，成为了新的霸主，因为其更优的展示。 NetScape 最先支持了 html 框架显示，就是简单的 table 布局，内外边距之类，仅仅这点就将 Mosaic 抛诸身后。区别这两个浏览器，还是用的 UserAgent。如果是 UserAgent 里含有“Mozilla”字样，那就发送支持框架的页面，否则，就发送不含框架的页面。 NetScape 帝国日益庞大，歌舞升平，一切风平浪静，直到微软的铁骑挥军南下。 微软发布了一款跟系统强绑定的浏览器，真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？ 不用想了，就是 IE。这命名也相当简单粗暴，Internet Explorer，直接把这工具的用途拍在你脸上。连说明书都可以免了。 IE 也是支持 html 标准框架的，但由于前面的历史原因，人们只会给 UserAgent 里含有“Mozilla”字样的浏览器发送含框架的页面。但这点小事能难倒我大微软？IE 呵呵一笑，把自己的 UserAgent 改成 Mozilla/1.22 (compatible; MSIE 2.0; Windows 95) 。看，我这里也有“Mozilla”字样，也能收到含框架的页面了！ 当然，这个小流氓行为，跟后来把 IE 和 Windows 捆绑一起销售的大流氓行为比起来，根本不为足道。后面的故事我们也知道了，IE 把 NetScape 干掉了。但它的身体上，却永远的烙上了“Mozilla”的印记。 五、康乾盛世看过奥特曼的都知道，怪兽被打败了会再回来。别忘了 NetScape 曾拥有一批大神们，失败后，他们围绕着浏览器排版引擎 Gecko(壁虎)成立了非正式组织 Mozilla。小怪兽再次出发。大神们发明了另一款优秀的浏览器，它在插件拓展和开发调试领域做出的贡献，绝对可以载入互联网历史。 真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？ 但大神就是大神，大神就是即使你知道了 Mozilla 的命名都是野兽，却还是猜不到是什么。 Mozilla 说，我们浴火重生，叫 Phoenix(凤凰)！不行么？ 真不行。 刚推出就被人告了，原来已经有一家公司叫做“凤凰科技”。 Mozilla 瀑布汗，改名叫 Firebird(火鸟)！还不行么？ 我们得原谅一下他们的取名，虽然现在看来满满的山寨感，可放在那个时代，Firebird 这名字很炫酷。就像你当初的 QQ 昵称叫赤炎天使感觉依然良好一样。 但是，他们发现，业内有个数据库系统，也叫的 Firebird…泪流满面的 Mozilla 感慨重生好难呀。最后才决定叫 Firefox(火狐)。 基于 Gecko 引擎的 Firefox 非常优秀，为了告诉大家，我使用了这个引擎，它标志自己的 UserAgent 为 Mozilla/5.0 (Windows; U; Windows NT 5.1; sv-SE; rv:1.7.5) Gecko/20041108 Firefox/1.0 。 这时候的 UserAgent，虽然长了点，但它并不混乱，准确的标明了系统，排版引擎，浏览器名称等信息。虽然IE这时已经占有了很大的市场份额，但基本停步不前；而 Mozilla 经过一段时间的修生养息，Firefox 在业内广受好评，得到了快速的发展。 时值 2003 年，web2.0 的浪潮前夕，浏览器的发展达到了空前的盛世。 然而所谓否极泰来，盛极则衰。涅槃的 Firefox 迎来盛世，却又恰恰由于盛世，决定了 UserAgent 纠结的命运。 六、师夷长技前面说到，微软靠 Windows 系统捆绑IE销售。而 Windows 自然也有它的对手，Linux。一个技术快速发展的时代，系统的世界里也是战火纷飞。Linux 系统自从有了可视化界面，也需要浏览器呀。桌面系统 KDE 的缔造者们就发明了一个。 真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？ 但大神就是大神，大神就是讲究先从文字上占据压垮你的气势。 先有 Navigator 航海家，再有 Explorer 探索者，咱就叫 Konqueror(Conqueror的变体)征服者吧。 行行行。我已懒得理这帮大神… 可是，问题来了。Konqueror 使用 KHTML 排版引擎，即使它们认为自己跟 Gecko 引擎一样优秀，但用户不买单。你 UserAgent 里没有“Gecko”字样，我就不给你经过优良排版的 html。 结果，Konqueror 思来想去，做了一个艰难但很萌的决定，把 UserAgent 写成 Mozilla/5.0 (compatible; Konqueror/3.2; FreeBSD) (KHTML, like Gecko) … 这就是现代浏览器里 like Gecko 这一萌词的由来。 就这样，伟大的排版引擎 KHTML 为了获得更好的资源，师夷长技。这并没什么不好，却造成了 UserAgent 的越发混乱。 KHTML 与 Gecko 这一对，永远卿卿我我比翼双飞在 UserAgent 里面了。那个满含深意的“like”，有人觉得翻译成“像”，但也有人觉得应该是“喜欢”… 七、世界大战首先是IE冷静下来了，他觉得，你们不带这么玩的？ 就我年少时不懂事，首先改了个 Mozilla 字样，后面追究这历史我岂不是成了罪魁祸首？我改还不行吗？ 在 IE6，它明确自己 UserAgent 为 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0) 。除去已经注定不可抹去的“Mozilla”字样，其余信息简洁，准确，清晰。 但事态已经不可收拾。 Opera 给这狂躁的世界添了一把火。它觉得，易容术非常炫酷呀。Opera 直接在菜单提供了 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.51，Mozilla/5.0 (Windows NT 6.0; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.51，Opera/9.51 (Windows NT 5.1; U; en) 三个选择项。第一个是易容成IE，第二个是易容成火狐，第三个才是自己，选谁就是谁！ 其实这并不是一件坏事。因为 Opera 是站在能够让用户通过选择，去获得更好的浏览体验的基础上的。你提供选择，或是不提供，混乱的 UserAgent 还是在这，不离，不弃。再者，这对网页的开发者有极大的好处，在某些情况，你不必同时打开几个不同的浏览器去调试。到目前，最新的 Chrome 浏览器更加炫酷，能够支持近 40 种不同的 UserAgent，甚至你还可以自定义。当然这是后话。 与此同时，苹果公司依靠内核 WebKit，开发出 Safari，命名 UserAgent 为 Mozilla/5.0 (Macintosh; U; PPC Mac OS X; de-de) AppleWebKit/85.7 (KHTML, like Gecko) Safari/85.5 。 有人就会问了，不是 Webkit 内核吗，怎么还有 KHTML, like Gecko？注意，内核 Webkit 包含了一个排版引擎叫 WebCore，而WebCore 是 KHTML 衍生而来的。也就是说，WebCore 是 KHTML 的儿子，子承父业，基因差不多。为了能够正常排版，safari 只能这么写。 后来，google 也开发了自己的浏览器 Chrome，其内核也是 Webkit，但它设定 UserAgent 为 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13 。Safari 一看，不对劲啊！你怎么也在后面写有 Safari？Chrome 呵呵一笑，你懂的。 因此，请让我一口气说完下面这一段： Chrome 希望能得到为 Safari 编写的网页，于是决定装成 Safari，Safari 使用了 WebKit 渲染引擎，而 WebKit 呢又伪装自己是 KHTML，KHTML 呢又是伪装成 Gecko 的。同时所有的浏览器又都宣称自己是 Mozilla。 这就是整个 UserAgent 世界大战的格局… 八、军阀混战将目光聚焦到国内，更是狼烟四起，混乱不堪。大家都知道，浏览器是互联网的入口，这块肥肉谁也不想丢。因而一个接一个的“国产”浏览器进入斗兽场。 360，百度，QQ，UC，搜狗，猎豹，遨游，世界之窗…你能说出一大堆。连淘宝，酷狗，hao123 都有浏览器，不信你搜。 注意我前面“国产”两个字必须加上双引号，因为这个 made in china 并不纯。国人并没能像远古大神一样，硬生生发明一个内核出来，我们更擅长“微创新”。 利用 Trident（IE的内核），包装一下皮肤，美化一下，就可以说：完美兼容 利用 Webkit，包装一下皮肤，美化一下，就可以说：极速浏览 把两个内核都包起来，就可以说：智能双核 是微创新！读书人的事，能叫偷吗？ 在这插播一下，浏览器的“双核”，并不是你听说手机双核电脑双核那回事。再多个核，速度也不会更快，当然这么说，会显得很厉害的样子。德艺双馨，智勇双全，名利双收，才貌双绝，夫妻双双把家还，你看带“双”字的词都很牛的。 但我上面的叙述，的确有夸张的成分。浏览器的诞生，肯定不仅仅是包一下皮肤那么简单，国内的工程师们，也苦心研究做了许多工作。如果要说优化策略，我可以再写一篇超级长的文章。优化无止境，路漫漫其修远，向同行们致敬。只是我非常讨厌那些不把事实说清楚，纯粹靠文案去忽悠人的产品… 话说回来，这么多国产浏览器，总得靠不同 UserAgent 标志自己呀。 大家自动分为两个阵营：使用 Trident 内核的，在 IE 已有 UserAgent 后添加自己的名称；使用 Webkit 内核的，就在 Chrome 的 UserAgent 后面添加。 前者像QQ浏览器： Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.7.26717.400) 。 后者像猎豹： Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.137 Safari/537.36 LBBROWSER 。 当然双核浏览器诚然就是墙头草，切换内核时 UserAgent 也需要跟着变化。 如此的混战格局，这厢的 IE 和 Chome 想必也是醉了。 九、国共内战适者生存是不变的生存法则，国产浏览器们经过一段时间的用户筛选，自然优胜劣汰。时值 2010 年，真正还在运营和更新的浏览器数量慢慢下降，用户集中在几家表现更优异的厂商手中。就在这时，好看的故事来了——3Q大战爆发。 有人说，腾讯电脑管家的推出是导火索。其实这场仗，大家都忍了好久，推不推出，都一定会在某个事件后爆发。360 浏览器是奇虎的重量级产品，用户量众多，2009 年它推出一个功能：过滤其它网站的广告。诚然民众们都很喜欢。可是其他互联网公司肯定就不乐意了，用户看不到更点击不到广告，这钱还怎么赚？ 因而在 3Q大战爆发后，腾讯的一个手段就是：如果你使用360浏览器，就不能访问 QQ 的网站（单单QQ空间就有巨大的用户量），也直接反攻 360 的最大收入来源。一个艰难的决定背后，往往是需要无数种的技术战略支撑的。企鹅判断用户是否使用 360 浏览器，依靠的就是 UserAgent 里是否有“360SE”的字样。 战报传来：号外，360 浏览器上不了 QQ 空间！已经买了黄钻的杀马特贵族急了呀！只能换浏览器了呀！感覺侢乜卟哙噯嘞呀！ 2011年11月3日，腾讯网站封杀 360 浏览器 2011年11月4日，360 浏览器访问量仅为昨日一半 2011年11月5日，360 浏览器访问量几乎为0 有人说，腾讯就这么快赢了？恰恰相反，360 浏览器通过一次强制的自动升级，又可以访问 QQ 的网站了。360 的工程师们在 5 日使用了伪装术——把“360SE”字样从 UserAgent 中去掉！ 意思就是，360 浏览器的 UserAgent 跟 IE 完全一样，你根本判断不出来（因而访问量为 0）。就怕流氓有文化！企鹅傻眼了，总不能把大微软的 IE 也一并给禁了吧… 这场土匪遇恶霸的耍流氓大战，最终通过法律而化解。企鹅在技术侧拿 360 没办法，而 360 则得到了一个跟 IE 一样的身份证。在这场内战中，受伤的除了广大网民们，其实还有令人心疼 UserAgent 君，以往让它越长越长就算了，这次长了还得阉割掉，真心dan疼呀。 十、明日边缘看到这里，大家会明白一个道理：如果未来不出现一款霸主级别的浏览器（或内核），UserAgent 应该不会有大变化了。 不过，这道理并不全对。别忘了，移动侧也是有浏览器的。 在早期能上网的手机里，内置了各手机厂商自研的浏览器。这些浏览器并不需要像 PC 一样的复杂设计，可以访问 wap 网页就足够了。因而它们的 UserAgent 命名，怎么简单怎么来，就直接叫 诺基亚 3100 Nokia3100/06.01 (UCWEB 3.3B) ， PHILIPS755 ObigoInternetBrowser/2.0 这样，有甚者连浏览器叫什么都不带 TCL-3199 ， 三星 E618 SEC-SGHE618 。 这样任由发展下去，一种要历史重演，往日重现的即视感压迫而来。 web 世界的联合国——W3C组织，站在明日边缘，面对着历史和未来，终于发话，它制定 UserAgent 标准，以后都得按这规范去起名字。详细请阅 User Agent Accessibility Guidelines。至此，命运坎坷的 UserAgent 终于逐步走向规范。W3C 大法好，有人说你怎么不早点来拯救世界呀！其实 W3C 一直在努力，但规范的制定，到推广至大家认可并执行，是一条漫长的道路，需要时间，也需要实践。 W3C 组织，在制定 web 标准这件工作之外，再我看来，还有两个身份：1、和事佬；2、背黑锅。和事不成，就得背黑锅。是的就是这样。 彩蛋那么，我们的故事接近尾声。还有一些有趣的小彩蛋。 Chome 28 开始，与苹果正式分道扬镳，采用 Blink 内核，但它的 UserAgent 并不改变。 淘宝封杀微信打开淘宝页面，靠的就是微信内置浏览器 UserAgent 里的 MicroMessenger 字样。其实微信也可以像当初 360 一样把 UserAgent 去掉，但微信并不这样做。 360 出招之时留有后招。也许，它一开始就想到了腾讯会告他们对于 UserAgent 的欺瞒，因而它其实提供了设置项。默认设置是“保持跟IE一样的 UserAgent”，但用户也可以不勾选。只是这选项比较隐蔽，而且你重启浏览器后…又会变回默认设置。如果没有这个小小的设置，结果大家可以自行想象。 微软又玩新花样了，在 IE 11 中，去掉了以往的 MSIE 字样。初步猜测此举是为了使现有的 CSS hack 失效，避免过去网页设计师对 IE 差别对待的情况再度发生。但又会引发其他问题啊亲。 本文作者为Litten，转载请注明。]]></content>
      <categories>
        <category>编程</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>userAgent</tag>
        <tag>冷知识</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多进程多线程爬取多层结构的妹子写真网站]]></title>
    <url>%2F2020%2F04%2F12%2F%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E5%8F%964%E5%B1%82%E7%BB%93%E6%9E%84%E7%9A%84%E5%A6%B9%E5%AD%90%E5%86%99%E7%9C%9F%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;经常网上瞎逛，总是会遇到各种各样的网站。“偶然间”看到了一个无广告且有着大量妹子写真图片的网站，浏览了一会忍不住拿起卫生纸…擦了擦电脑屏幕。 &emsp;&emsp;作为开发且热爱爬数据的码农来说，这个网站简直不要太赞。粗略看了下整个网站，发现类型众多，类型下的套图更是甚多，图片约有数几十万张。还等什么，爬他！倾尽硬盘的爬他！！！ &emsp;&emsp;经过审查多个页面，了解了整个网站的架构。画了下面的脑图。 &emsp;&emsp;爬取思路就是获取类型页（所有类型）–&gt;某单个类型–某单类型下的多套图（分页）–多套图下多张图（分页），对于这种很多层且很多页数的网站唯有一层一层的扒下去，分页的循环的读取。 &emsp;&emsp;有了思路写起代码还是很快的，下面看看第一版没用到多线程的代码，没用到多线程，图片得一张一张的下载，一张下载完了才能接着下载另一张，网站响应的也慢（网站流量做了限制？），导致下载一张图片也很慢。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102from saveDB import conndbimport requestsimport urllib.requestfrom bs4 import BeautifulSoupimport osimport reimport uuidimport urllib# 网址已打码，免得律师函警告root_url = 'https://www.******.net'img_path = 'F:\\reptile\\meizi'def parse_(url): # 解析网址 req = requests.get(url) # 设置编码，浏览器查看网站编码：F12，控制开输入document.characterSet回车即可查看 req.encoding = 'GBK' # 获取网页所有内容 soup = BeautifulSoup(req.text, 'html.parser') return soup# windows文件夹命名不允许的符号替换成下划线def validateTitle(title): pattern = r'[\\/:*?"&lt;&gt;|\r\n]+' new_title = re.sub(pattern, "_", title) return new_title# 爬取结构# 类型页（所有类型）--&gt;单个类型--单类型下多套图（分页）--多套图下多张图（分页）if __name__ == '__main__': conn, cur = conndb.conn_db() # 类型页 url = '&#123;&#125;/html/3/'.format(root_url) soup = parse_(url) find_all = soup.find_all(name='div', attrs=&#123;"class": "jigou"&#125;)[0]('li') for i in find_all: group_url = i(['a'])[0].get('href') b = parse_(group_url) b_find_all = b.find_all(name='div', attrs=&#123;"class", "hezi"&#125;)[0]('li') for x in b_find_all: img_group_url = x(['a'])[0].get('href') img_index = x(['a'])[0]('img')[0].get('src') img_title1 = x(['a'])[1].text.strip() beautiful_soup = parse_(img_group_url) strip2 = beautiful_soup.find_all(name='div', attrs=&#123;"id": "pages"&#125;)[0]('a') member = [] for pp in strip2: member.append(pp) member2 = member[2:len(member) - 1] member2.append(1) uuid1 = uuid.uuid4() staA = conndb.exe_update(cur, "insert into meizitu_list_1 (uuid,title,img_id, thumb_src_min) values('%s', '%s', '%s','%s')" % ( uuid1, img_title1, '999999', img_index )) print('11：&#123;&#125;保存完成'.format(img_title1)) i = 0 for p in member2: if p == 1: img_detail_url = img_group_url else: img_detail_url = '&#123;&#125;&#123;&#125;'.format(group_url, p.get('href')) parse_1 = parse_(img_detail_url) content_ = parse_1.find_all(name='div', attrs=&#123;"class": "content"&#125;)[0]('img') title = validateTitle(img_title1) img_path2 = img_path + '\\' + title if not os.path.exists(img_path2): os.makedirs(img_path2) for img in content_: i += 1 img_url = img.get('src') img_title = img.get('alt') try: uuid2 = uuid.uuid4() satB = conndb.exe_update(cur, "insert into meizitu_datail_1 (uuid,img_id,img_url,img_title) values ('%s', '%s','%s', '%s') " % ( uuid2, uuid1, img, img_title )) print('22：&#123;&#125;&#123;&#125;保存完成'.format(img_detail_url, img_title)) res = requests.get(img_url) with open("&#123;&#125;\\&#123;&#125;&#123;&#125;".format(img_path2, i, '.jpg'), 'wb')as f: f.write(res.content) except: print('------------------------------------------------------&gt;') conndb.conn_close(conn, cur) &emsp;&emsp;下面是初步学习了多线程知识改造的。献丑献丑，改造后，图片都是一整页的同时下载，速度瞬间提升8倍，为什么是8倍呢？因为网站一页就展示8张图片。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140import requestsimport urllib.requestfrom bs4 import BeautifulSoupimport osimport reimport uuidimport urllibimport threadingimport multiprocessing# 网址已打码，免得律师函警告root_url = 'https://www.******.net'img_path = 'F:\\reptile\\meizi'def parse_(url): # 解析网址 req = requests.get(url) # 设置编码，浏览器查看网站编码：F12，控制开输入document.characterSet回车即可查看 req.encoding = 'GBK' # 获取网页所有内容 soup = BeautifulSoup(req.text, 'html.parser') return soup# windows文件夹命名不允许的符号替换成下划线def validateTitle(title): pattern = r'[\\/:*?"&lt;&gt;|\r\n]+' new_title = re.sub(pattern, "_", title) return new_title# 该类型分为很多页def page_url(p, img_group_url, group_url, img_title1, img_path): if p == 1: img_detail_url = img_group_url else: img_detail_url = '&#123;&#125;&#123;&#125;'.format(group_url, p.get('href')) parse_1 = parse_(img_detail_url) content_ = parse_1.find_all(name='div', attrs=&#123;"class": "content"&#125;)[0]('img') title = validateTitle(img_title1) img_path2 = img_path + '\\' + title if not os.path.exists(img_path2): os.makedirs(img_path2) # 把本页的所有图片加入线程中进行多线程下载 threads = [] for img in content_: img_url = img.get('src') img_title = img.get('alt') t = threading.Thread(target=download_img, args=(img_detail_url, img_url, img_path2, img_title)) threads.append(t) for i in threads: i.start() for i in threads: i.join()# 解析每一个类型def type_url(x): img_group_url = x(['a'])[0].get('href') img_title1 = x(['a'])[1].text.strip() beautiful_soup = parse_(img_group_url) strip2 = beautiful_soup.find_all(name='div', attrs=&#123;"id": "pages"&#125;)[0]('a') member = [] for pp in strip2: member.append(pp) member2 = member[2:len(member) - 1] member2.append(1) print('11：&#123;&#125;开始保存'.format(img_title1)) # 加入进程中（已注释掉，目标图片服务器相应速度慢， # 下载慢，进程不断添加，达到定量时，可能也会报栈溢出问题） for p in member2: # pool.apply_async(func=page_url, args=(p, img_group_url, group_url, img_title1, img_path)) page_url(p, img_group_url, group_url, img_title1, img_path)def download_img(img_detail_url, img_url, img_path2, img_title): try: uuid2 = uuid.uuid4() print('22：&#123;&#125;&#123;&#125;保存完成'.format(img_detail_url, img_title)) res = requests.get(img_url) with open("&#123;&#125;\\&#123;&#125;&#123;&#125;".format(img_path2, uuid2, '.jpg'), 'wb')as f: f.write(res.content) except: print('------------------------------------------------------&gt;')# 大类型的具体某一页套图def type_page_url(url): beautiful_soup = parse_(url) b_find_all = beautiful_soup.find_all(name='div', attrs=&#123;"class", "hezi"&#125;)[0]('li') # 循环传进去具体一页上的所有套图地址 for x in b_find_all: type_url(x)# 爬取结构# 类型页（所有类型）--&gt;单个类型--单类型下多套图（分页）--多套图下多张图（分页）if __name__ == '__main__': # 进程池，这里设置了4各 pool = multiprocessing.Pool(processes=4) # 类型页 url = '&#123;&#125;/html/3/'.format(root_url) soup = parse_(url) # 解析所有类型获取地址 find_all = soup.find_all(name='div', attrs=&#123;"class": "jigou"&#125;)[0]('li') # 循环每一个类型 for i in find_all: group_url = i(['a'])[0].get('href') b = parse_(group_url) # 获取这个类型下有多少页套图 strip2 = b.find_all(name='div', attrs=&#123;"id": "pages"&#125;)[0]('a') member = [] for pp in strip2: member.append(pp) member2 = member[2:len(member) - 3] member2.append(1) # 获取具体这一页的套图 for p in member2: href = p.attrs['href'] # 大类型的第一页地址 if p == 1: num = re.findall(r"\d+\.?\d*", group_url) url = '&#123;&#125;list_&#123;&#125;_1.html'.format(group_url, num[1]) else: url = group_url + href type_page_url(url) pool.close() pool.join() &emsp;&emsp;最后看看爬取下来的战绩吧。经过一夜的爬取，已经保存了近20G，十好几万张图片。。。 &emsp;&emsp;基本就是这样吧，代码还是很简单的，没啥好说的，都有注释。主要的技术点就是其中的那两块多进程、多线程的地方。]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>多进程</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[当只能ftp连上linux服务器时,如何执行命令]]></title>
    <url>%2F2020%2F03%2F31%2F%E5%BD%93%E5%8F%AA%E8%83%BDftp%E8%BF%9E%E4%B8%8Alinux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6-%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[其实这个问题挺少见的，既然能ftp，哪有不能ssh的，虽然少见但我还是遇到了。 废话昨天在升级某云中心项目登录到跳板机上时，发现那台跳板机上的xshell提示试用期到了，需购买。看，多坑爹。本着节约的态度，本地下载了一个社区版的xshell，上传上去安装时，提示只有管理员权限才能删除程序重装。没折了，试着用电脑上的ftp工具连接服务器，上传了需要更新的项目jar包。发现没ssh是没法执行命令的。 思索过后，想到上传个重启项目的脚本，改下crontab的配置文件，然后定时去执行一次不就行吗。当我打开crontab的配置文件时，懵逼了，上面8、9条任务跑着，本着谨慎的态度，放弃了。后来想到服务器上其他主项目也有调用shell命令的功能，通过那个项目执行了一波。 但是为了满足好奇心，用crontab到底行不行，今天用自己的阿里云服务器测试了一波，发现是可行的。 crontab的默认配置文件路径是：/var/spool/cron下的root文件，修改保存即可。 方法感觉本篇文章好水，一句话就是：当只能ftp时，可修改crontab的配置文件去执行脚本文件，达到执行命令的效果。当然前提是，服务器安装过crontab。]]></content>
      <categories>
        <category>编程</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
        <tag>cron</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最长的假期]]></title>
    <url>%2F2020%2F03%2F30%2F%E6%9C%80%E9%95%BF%E7%9A%84%E5%81%87%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[“你那年前买的口罩还多吗？”“还不少呢，爸。公司也发，都没怎么用，家里还有吗？我往家里寄一些？”“要是多，给寄10个，家里买不到。”“行，我下了班寄过去！” 起先没人在意只是一场大火，一次火山爆发，一场疾病。直至大火烧死了数亿动物，火山影响了数十万人撤离，疾病感染人数不断攀升，大家才意识到这是一场逃不过去“硬仗”，影响着每个人。 临近春节，坐在公司座位上，盯着电脑，认真的看着一行行代码，逐渐模糊，越看越像过年挑着竹竿放响的鞭炮，耳边仿佛也响起了七大姑八大姨的声音，“在哪工作？一月多少钱？找对象了吗？”，不由自主的打了个寒颤，逃不过的灵魂三连问。转眼看看整个办公室也没有几个有心思敲代码的同事了，偶尔有两个交谈的还是在说，“你几号回家，看网上说武汉有瘟疫….”。就这样时间一分一秒的被盯着溜走。5、4、3、2、1五点半，终于下班了，同事们都站了起来，内心的喜悦从每个人的嘴角漏了出来，大家都手忙脚乱的收拾着自己的“媳妇”-电脑。同时有的没的说着下班买些口罩去。 回家的车票我也是早早的买好了。在去火车站的公交上，后面座位上一位大叔，在那不停的咳嗽，咳的我直发毛，看网上说此次瘟疫为可传染性的病毒肺炎，临床最明显的表现就是-咳嗽。这着实让我有些害怕，手不由自主的伸向了衣领，紧紧的拉着捂在了自己帅气的脸上，生怕那该死的病毒分子通过空气飘到我的体内。唉，前一天晚上还想着买些口罩，直到听到他的咳嗽才想起来有这么一茬事。 火车站戴口罩的人数也多了起来，一夜之间微博热搜也被递增的感染人数占满了屏幕，200、300、600，到现在看来，那还仅仅是个开始，后面看着每天成百上千递增的数字，已经麻木了。网上看着的是数字，现实中都是活生生的人。 肺炎也主要集中在武汉，回家的列车也不经过那，以至于整车的人也都没那么惶恐，只是比以往稍微安静了些。 回到家，出了火车站，看着家乡好像还很平静，毕竟也是十八线的小县城，生活节奏慢了许多。不过临近春节，路上还是熙熙攘攘，车里都装满了红红火火的年货，行人都左手提着鸡鸭，右手扛着炮筒烟花。外出务工回来的也都扛着大包小包的行李一路小跑，撵着公交，嘴里骂骂咧咧的喊着：“等等，等等，开总快，干洪么滴。。。” 一片和谐，我坐也上了通过我家的大巴。一路上田野居多，没了大城市的钢筋混凝土，心情也很舒爽。 回到家第二天就是除夕，我们那都是在这天辞旧迎新贴对联。 第三天就是大年初一，晚辈都要去村里长辈家拜年，早晨喊着弟弟从南到北，从上而下逛遍了全村。听到父辈、爷辈讲的最多话就是：“我滴娘啊，这是dl吗？比每来胖多了，白多了”，“领媳妇回家了吗”，“这要是该集上碰见，真不敢认来，变化真大”。哈哈，都诸如此类。也倒是，自从上了大学就很少在家了，工作后，在家的日子，就更屈指可数了。一年难得见上几回面。不过拜完年的感受不是磕头磕的膝盖疼，而是感觉整个村的面孔已经不再是小时候熟识的那些面孔了，长辈们的脸上都被生活刻划出了无数道痕迹，加上渐白的头发，显得苍老了许多，当然也有很多没见过的新面孔，比自己长几岁的哥哥们，都有了自己的孩子，孩子们成长都很快，给人的感觉就是每年一个新面孔，学长辈的话就是“这要是该集上，真不敢认来”，哈哈。 大年初二，邻村村里居委会的喇叭已经开始响起了：“为应对新冠肺炎，请大家不要走访亲戚，减少走动，少聚集…”，由于我们三四个村一个居委会大队，村委会又在邻村，过冬后也没啥农活了，所以我们村老爷们们还是会聚集一块晒太阳打牌。妇女们也会聚集一块嚼舌根，据说他们是全村消息最灵通的组织，你家要是有个啥事，第二天邻村的妇女们都会知道，堪称乡村FBI，消息情报局，不过也有很多都是子虚乌有的事情。每次进村看见他们在村口，都有点害怕过去。因为你过去之后，你就有可能成为他们讨论的对象，唯一的解决办法加入他们，跟他们一块讨论，哈哈。 接下来的几天，全国的疫情不断严重，村里的表现就是村口的路被封了，交通阻断，限制进出，不允许乱跑了。同时，村委会的喇叭，也不停的喊着宣传标语。村里的气氛也逐渐紧张了起来，妇女们饭后舌根也集中到了疫情上，“以后远离XXX，看他去诊所了”，“听说XX村都有1例了” 待更…]]></content>
      <categories>
        <category>生活</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>散文</tag>
        <tag>假期</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用java解析皮皮虾视频实现无水印下载]]></title>
    <url>%2F2020%2F02%2F22%2F%E7%94%A8java%E8%A7%A3%E6%9E%90%E7%9A%AE%E7%9A%AE%E8%99%BE%E8%A7%86%E9%A2%91%E5%AE%9E%E7%8E%B0%E6%97%A0%E6%B0%B4%E5%8D%B0%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;为什么会有这篇文章的诞生呢？或许是因为我闲的，想找点东西练练手吧！ &emsp;&emsp;段友出征，寸草不生，这是属于曾经每一位段友的暗号。不过现在也一去不复返了，取而代之的就是这个皮皮虾了，还是原来的样子，但是已经没有了原来的味道。 &emsp;&emsp;话不多说，进入今天的主题。每当刷着皮皮虾的时候，遇到好看的视频想保存，但是保存下来都会有水印，虽然不影响整体视频观看效果，但是看着就是碍眼，感觉像贴了一块牛皮癣一样。 &emsp;&emsp;以前在网上找的无水印解析工具也都经常失灵。作为开发人员的我，怎么能忍，所以想着自己做个工具，毕竟自己动手才能丰衣足食嘛！ &emsp;&emsp;首先打开皮皮虾随便找了个视频，复制分享链接到电脑chrome浏览器中打开。 &emsp;&emsp;啥？为什么随便找的视频小姐姐都那么漂亮？我反手就是一个巴掌，皮友发的视频哪有不好看的。（是不是该给点广告费！） &emsp;&emsp;常规操作F12也打开，刷新一下，观察所有请求的链接。 &emsp;&emsp;通过上图可以观察到，软件内复制的链接是一个短链接，相当于一个短网址一样，哎！说到短网址，欢迎查看的另一篇文章《一小时快速撸出一个短网址生成项目》 ，我滴娘来，偏了，跑题了。回过来继续看，请求这个短网址会看到有一个302重定向的过程，重定向到哪呢？就是Response中location的参数，这个参数就是再次请求的一个地址。继续查看这个地址会返回什么。 &emsp;&emsp;不难发现这个地址响应的就是一个页面，content-type: text/html; charset=utf-8,也就是整个页面，那好吧，你返回一整个页面，那我就看看页面源代码中能不能找到真实无水印的视频地址吧。 &emsp;&emsp;不看不知道，一看一懵逼，这他娘的谁能找得到有用信息，得，还是继续往下看看其他请求都是干什么的吧！ &emsp;&emsp;选中XHR查看所有的接口请求，发现第一个接口返回的json中包含了所有想要的信息，发帖人信息，帖子信息，有水印的视频链接、视频封面图链接，无水印的视频链接、视频封面图链接等等。都包含在了这一个接口中，好啊，这不就是想要的吗，但是我又思考，代码该怎么写呢，怎么通过一个分享的短链接去获取到这个接送呢，像那种一个链接就返回一串json的请求还好操作，直接代码请求，获取相应json就可以了。 &emsp;&emsp;但是这个短链接302重定向了一次真实地址，然后又请求了一个接口才得到的数据啊！ &emsp;&emsp;通过分析真实地址和接口地址找到了突破口，先看看这两个地址之间的联系，上地址：&emsp;&emsp;真实地址：https://h5.pipix.com/item/6762160710051961101?app_id=1319&amp;app=super&amp;timestamp=1582362058&amp;user_id=5516739140&amp;carrier_region=cn&amp;region=cn&amp;language=zh&amp;utm_source=weixin&emsp;&emsp;json接口：https://h5.pipix.com/bds/webapi/item/detail/?item_id=6762160710051961101&amp;source=share &emsp;&emsp;不难发现两者的联系已经很明显了，就是那串数字item_id=6762160710051961101,而且json接口是GET请求，无任何其他参数了。 &emsp;&emsp;所以思路就有了，能不能通过重定向的地址获取item_id，然后进行拼接json接口的地址再请求呢？后来敲代码证实是可以的。 &emsp;&emsp;不过这地方有两个问题：1.怎么能获取到重定向的网址。2.怎么通过地址截取出来那串数字。 &emsp;&emsp;其实这些问题都不是问题，哈哈，第一个问题直接获取response中的location，第二个问题直接正则匹配就完事了。还有写代码时，直接不带header的去请求接口是不返回json数据的，必须加上User-Agent才好使。 &emsp;&emsp;所以到此就基本结束了，有了思路，代码一眨眼就搞定了。下面关门，放代码。代码整体很简单，就不多说了。 &emsp;&emsp;我把这个功能放到了我的助聊软件 上面去了，软件软件也不仅这一个功能，还有很多丰富干货，欢迎大家下载使用，多多支持。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798/** * 解析链接获取标题和无水印视频地址 * * @return json */ @PostMapping("/getPipixiaVideo") @ResponseBody public String getPipixiaVideo(HttpServletRequest request) &#123; final String pwd = "wjup.top"; JSONObject json = new JSONObject(); String videoUrl = request.getParameter("videoUrl"); String value = request.getParameter("value"); String redirectUrl = null; if (pwd.equals(value)) &#123; try &#123; redirectUrl = getRedirectUrl(videoUrl); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; String digitAfter = getDigitAfter(redirectUrl); String apiUrl = "https://h5.pipix.com/bds/webapi/item/detail/?item_id=" + digitAfter + "&amp;source=share"; String urlData = getUrlData(apiUrl, HttpMethod.GET); JSONObject jsonObject = JSONObject.parseObject(urlData); JSONObject video = jsonObject.getJSONObject("data").getJSONObject("item").getJSONObject("video"); // 标题 String title = video.getString("text"); // 无水印视频链接 String downVideo = video.getJSONObject("video_fallback").getJSONArray("url_list").getJSONObject(0).getString("url"); // 无水印封面图 String downImg = video.getJSONObject("video_fallback").getJSONObject("cover_image").getJSONArray("url_list").getJSONObject(0).getString("url"); json.put("videoTitle", title); json.put("downVideo", downVideo); json.put("downImg", downImg); &#125; else &#123; json.put("msg", 404); &#125; return json.toJSONString(); &#125; /** * 获取重定向地址 * * @param path * @return url * @throws Exception */ private String getRedirectUrl(String path) throws Exception &#123; HttpURLConnection conn = (HttpURLConnection) new URL(path) .openConnection(); conn.setInstanceFollowRedirects(false); conn.setConnectTimeout(5000); return conn.getHeaderField("Location"); &#125; /** * 获取接口返回的json * * @param url * @param method * @return json */ public String getUrlData(String url, HttpMethod method) &#123; SimpleClientHttpRequestFactory factory = new SimpleClientHttpRequestFactory(); factory.setConnectTimeout(10 * 1000); factory.setReadTimeout(10 * 1000); RestTemplate template = new RestTemplate(factory); HttpHeaders headers = new HttpHeaders(); headers.set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36"); headers.set("Accept", "*/*"); HttpEntity&lt;String&gt; requestEntity = new HttpEntity&lt;String&gt;(headers); // 执行HTTP请求 ResponseEntity&lt;String&gt; response = template.exchange(url, method, requestEntity, String.class); return response.getBody(); &#125; /** * 正则匹配数字 * * @param content */ public String getDigitAfter(String content) &#123; Pattern p = compile("\\d&#123;5,&#125;"); Matcher m = p.matcher(content); boolean result = m.find(); String find_result = null; if (result) &#123; find_result = m.group(); return find_result; &#125; else &#123; return ""; &#125; &#125;]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>数据处理</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的年终总结之快速成长的2019]]></title>
    <url>%2F2020%2F01%2F15%2F%E6%88%91%E7%9A%84%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%88%90%E9%95%BF%E7%9A%842019%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;盯着屏幕发呆回想这一年，感觉经历了许多。如果用四个字总结的话，快速成长挺合适。不管是工作还是生活，自己都成熟了许多。 &emsp;19年一整年都老老实实的工作着，上班下班上班下班…回想过去的12个月，仿佛过了一天，重复了365遍。工作上汲取知识，生活上…乱糟糟，被爱情搞的一整年没怎么开心，不是在吵架就是在酝酿吵架的路上，一直在想找女朋友到底是为了什么。。。 &emsp;19年初回来对上班还是满怀激情，当时还在26层。部门竞标一个香港的项目，于是封闭开发。我和另一个外协的同事跟着郭姐负责接口的开发，自己拉了一个分支，创个项目。 &emsp;这个接口和平常写的提供数据的接口有些不一样，这个接口是携带信息去增删改某个数据，比如有个接口是这样的，携带登录信息去登陆目标网站然后执行增加或者修改操作，再返回一些信息，这个接口操作的目标网站是国外做f5负载均衡的网站。在这段时间中郭姐负责讲述业务逻辑，我们负责实现，她还怕我们不懂，一行一行的写注释，说明这一段改写什么逻辑下一段该写什么逻辑，可谓非常细心。 &emsp;差不多一两个月后迎来了lc新财年，部门业务做了调整，我们从主要开发到主要运维，主要业务也是负责部署和维护，主要处理现场的问题，有需求就开发，刚开始比较忙，一边开发一边处理现场各种问题，后来新来了一些实习生组内也分了组，运维和开发，我在开发里。不过平时还是会解决一些现场的问题。也正是在这段时间学会了linux的使用，也由此走上了linux的不归道路。 &emsp;之后相继开发了配置资产（云服务器）、资源大屏、运行概貌大屏、数据汇总项目和修改了很多bug，优化了很多功能。做完大屏的开发，接着就是对全国70多个云中心的部署工作，每个云中心三个大屏，可谓是对linux的操作更熟悉了一遍。 &emsp;不过后来也慢慢的失去了激情，工作部署大屏重复着那一套。 &emsp;回首这一年也没干啥，干的活也就那些。正因如此，鄙人也有了大量的摸鱼时间，摸鱼遍布V2EX、github、cnblog、csdn、52pojie、各种个人博客网站等等。在v2ex看到很多大佬都有自己维护的项目，崇拜不已。后来自己相继开发了资源网站（charming），用了半天完成的短网址项目（shorturl），以及12月1号上线的助z聊l（love）项目。 &emsp;下面分别说说这几个项目 资源网站 &emsp;这个项目灵感的来源很邪恶，不说了。 &emsp;在在lc一年的总结文章 中介绍过这个项目。 &emsp;不过后来又优化新增了很多功能，比如三个资源详情的点赞收藏功能，后台页面的升级，加入了quartz定时任务，新增卡密兑换会员功能等等。后来项目根据也原版裂变出了绿色版本。关于其中的quartz主要用于每日资源的更新，由于资源都是一次性爬取，会非常多，一次性展示到页面不太好。所以建了资源池表。由任务每天从资源池表中抽取数十条数据新增到展示表中，这样网站资源每日都会更新。这一点感觉非常美妙。&emsp;之后慢慢的对项目就很少优化新增功能了，看日志最后一次提交是11月15号。。。11月15号，好吧也就是两个月前。 &emsp;这个项目修修补补做了快一年了，一共提交了249次，建立了4个分支，感觉自己还挺用心的，这应该是自己真正意义上的第一个项目，带来的不仅是技术的成长，还有心灵上的愉悦，哈哈。 短网址项目 &emsp;这个项目的诞生纯属意外，是在逛v2ex摸鱼时，看到有位老哥是用其他语言实现的，于是自己也….不介绍了。这个项目自己单独写了一篇文章:一小时快速撸出一个短网址生成项目。 助z聊l 助z聊l官网 &emsp;这个项目的诞生也是个意外，也是在逛某论坛得到的灵感。当时在那个论坛下载了一个恋爱话术破解版软件，当然鄙人下载它，不是使用它，而是对软件的破解，软件的数据感兴趣。接着是对软件的抓包分析，通过不断的抓包发现这个软件是菜的一批，虽然是有会员才能看所有内容，但是软件的数据接口完全没有限制，修改get请求的“行数”参数，即可返回全部数据，在网上找到这个软件的正版，抓包也是如此。不过这还不是最大的惊喜，最大的惊喜是，软件的后台网站通过分析可完全绕过，拿到超级管理员的权限。什么资料数据、用户信息、用户充值信息等等都能看到。在用户充值信息中发现每天都有充值的用户，一天大约300-500的收入，正是这吸引了鄙人。也是由此诞生了我的助z聊l项目，事实证明，他的诞生是对的。 &emsp;那天是个周六（11月25号），项目代号love正式诞生了。后来的一个星期正好公司也没太多任务，于是就快马加鞭的实现它，因为我初步打算在12月1号上线。后来项目也如约的在11月29号完工，30号部署测试，31号周六公测上线了。12月1号周日大肆的宣传正式的上线了。上线以来的前三天流量增长迅猛，单日ip达到了600多。后来慢慢的将了下来，到现在每日维持在100左右，注册用户每日10-40个。截止今天注册总用户1300多位，注册的日活用户20-30，也有很多注册完之后第二天不再登了的。 &emsp;创作这个软件的目的很简单，就是靠收会员盈利。第一个会员也是在这个软件上线的7天后（12月7号）到来的，欣喜不已，是个99元的永久会员。 &emsp;关于上线的服务器，是双十一阿里云买的，感觉还是很便宜的，三年才200多，当时买也没能想到。会有这么个项目跑在上面，以至于一个月的时间，就把买服务器的前赚回来了。窃喜 &emsp;其实在做助z聊l前，还有个在做的小项目，因为做助z聊l而夭折了。那个项目的代号为simple，完全是模仿v2ex做的。 &emsp;当初在做个这个项目的时候，选用框架纠结了好几天，自己的理想框架是前后端分离的spring cloud + vue正好练练自己的技术，于是自己先用vue+elementui做了个demo，vue+elementui也纠结了一天，看网上评论这两个搭配很棒就选择了，后来发现elementui样式是真难调，用的也不是html标签，而是有他自己的一套标签，整的头都大了。然后，然后就是放弃了。不过vue的路由真香，和springboot的@RequestMapping一样。后来也没选用这个框架而是用的springnboot+layui。记得当时做出来主页和发帖功能后，给同事看。他还怀疑我是直接保存的v2ex主页，哈哈，这也恰巧反映了我技术。（狐假虎威，应该是css库的强大，基本调的样式也不多）。 &emsp;就这样边做项目边学习，还是有不少收获的。个人博客也逐步迁移到了我的个人博客网站上，不过在csdn收获的粉丝赞也是挺多的。 &emsp;对了，博客也是今年搭建的用的gitpage+hexo，感觉非常棒，不需要服务器，只要个域名就可以。 &emsp;去年的flag是希望自己多涨涨技术，现在看来的确收获到了很多新知识，但是还是感觉不够。&emsp;今年也是自己疯狂发福的一年，从年初的不到70kg到现在的75kg，胖了不少，身体健康也差了不少。&emsp;还有今年买了几本书，也都在那吃灰了 &emsp;所以新年的flag又来了 2020年一定要多锻炼身体，多看两本书，卸载掉无意义的短视频软件。 当然技术是主要的，希望能更上一个台阶，自己维护的项目大火，赚更的多钱。 还有工作也希望能待在满足自己内心的地方。 当然有机会还要考个驾照。 自己的笔记本用了好几年了。还是大学的时候，通过兼职赚的钱，花1300买的二手笔记本。虽然便宜但是没出过啥毛病，陪伴我战斗了无数个风风雨雨。所以希望新的一年买个笔记本，让这位老哥退役休息休息。 还希望自己新的一年能够开开心心，开开心心，开开心心。赚更多钱，2020年末银行卡存更多的钱。 &emsp;明天农历腊月廿八，不用来上班了，放假。不过后天才能回自己家，一想到这就有点烦。&emsp;去年回家基本没攒住什么钱，还欠一屁股帐，没给家里买什么东西。今年有所好转，给我爸买了和iphone8。他的手机又卡接电话还不畅通是该换了，打算给我妈包600块钱红包，给我弟包100或200的红包，其乐融融。 &emsp;2020 加油！]]></content>
      <categories>
        <category>生活</category>
        <category>总结</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux配置多个tomcat启动混乱问题]]></title>
    <url>%2F2019%2F12%2F24%2Flinux%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAtomcat%E5%90%AF%E5%8A%A8%E6%B7%B7%E4%B9%B1%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[linux 多个tomcat 混乱 在部署服务时，一个linux服务器可能会跑多个tomcat。第一个tomcat启动时往往没啥问题。但是在配置第二个tomcat时可能会启动不起来，或者直接启动了第一个tomcat程序。那么端口也修改了，也不冲突，为啥在第二个tomcat里执行启动关闭命令会操作第一个tomcat呢？ 原来这是因为环境变量的问题。在启动tomcat时，startup.sh会调用catalina.sh脚本。而catalina.sh里会获取环境变量中默认的tomcat路径，CATALINA_HOME和CATALINA_BASE的值。如果不加设置，这两个参数的值都是第一个tomcat的路径。所以启动关闭都会对第一个tomcat进行操作。 所以为了区分开不同的tomcat，在环境变量中在增加两个参数就行，值设置成第二个tomcat的路径即可，像下面这样修改环境变量命令：#vi /etc/profile 多tomcat配置123456789101112##########first tomcat###########CATALINA_BASE=/opt/apache-tomcat-1CATALINA_HOME=/opt/apache-tomcat-1TOMCAT_HOME=/opt/apache-tomcat-1export CATALINA_BASE CATALINA_HOME TOMCAT_HOME##########first tomcat######################second tomcat##########CATALINA_2_BASE=/opt/apache-tomcat-2CATALINA_2_HOME=/opt/apache-tomcat-2TOMCAT_2_HOME=/opt/apache-tomcat-2export CATALINA_2_BASE CATALINA_2_HOME TOMCAT_2_HOME##########second tomcat########## 配置完成后使配置即时生效:命令: #source /etc/profile 然后我们需要配置第二个tomcat的catalina.sh,找到下面这行代码 1 # OS specific support. $var _must_ be set to either true or false. 在下面增加以下内容即可 123# myself : addexport CATALINA_BASE=$CATALINA_2_BASEexport CATALINA_HOME=$CATALINA_2_HOME 最后启动查看日志有无异常即可。]]></content>
      <categories>
        <category>编程</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些统计需求的sql语句]]></title>
    <url>%2F2019%2F12%2F03%2F%E4%B8%80%E4%BA%9B%E7%BB%9F%E8%AE%A1%E9%9C%80%E6%B1%82%E7%9A%84sql%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[需求一：统计满足条件的各个阶段的行数需求二：统计满足分类的前n条数据需求三：关联表修改、删除数据 表结构 需求一：统计满足条件的各个阶段的行数12345678910111213SELECT count( a1 ), count( a2 ), count( a3 ) FROM (SELECT ( CASE WHEN score &gt; 60 AND score &lt; 75 THEN id END ) AS a1, ( CASE WHEN score &gt;= 75 AND score &lt; 80 THEN id END ) AS a2, ( CASE WHEN score &gt; 80 THEN id END ) AS a3 FROM test_type_top ) a 统计结果 需求二：统计满足分类的前n条数据123456789SELECT * FROM test_type_top a WHERE ( SELECT count( 1 ) FROM test_type_top b WHERE a.NAME = b.NAME AND a.create_time &lt; b.create_time ) &lt; 2 ORDER BY id; 统计结果 解析： 12345678910SELECT a.id, a.NAME, a.create_time, ( SELECT count( 1 ) FROM test_type_top b WHERE a.NAME = b.NAME AND a.create_time &lt; b.create_time ) AS '有多少行数据处理时间比当前行大' FROM test_type_top aORDER BY a.id; 需求三：关联表修改数据示例sql： 12345UPDATE A a,B b SET a.user_id = b.id WHERE a.NAME = b.NAME 需求三：关联表删除数据删除关联主表的所有表数据示例sql： 123456789DELETE t1,t2,t3 FROM T1 t1 LEFT JOIN T2 t2 ON t1.id = t2.pid LEFT JOIN T3 t3 ON t1.id = t3.pid WHERE t1.id = 1 未完待续…]]></content>
      <categories>
        <category>编程</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个拥有垃圾管理后台的软件有多可怕]]></title>
    <url>%2F2019%2F11%2F23%2F%E4%B8%80%E4%B8%AA%E6%8B%A5%E6%9C%89%E5%9E%83%E5%9C%BE%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%9C%89%E5%A4%9A%E5%8F%AF%E6%80%95%2F</url>
    <content type="text"><![CDATA[Enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>编程</category>
        <category>安全</category>
      </categories>
      <tags>
        <tag>加密文章</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时光最美]]></title>
    <url>%2F2019%2F11%2F07%2F%E6%97%B6%E5%85%89%E6%9C%80%E7%BE%8E%2F</url>
    <content type="text"><![CDATA[有一天 呆坐在房间 胡思乱想 觉得未来好远 听一段旋律 想起TA 只是笑 不再怀念有一天 看时针走过零点 还没长大 但已成年 和过去的自己重逢 才发现 我从未改变时间，最美]]></content>
      <categories>
        <category>生活</category>
        <category>日常</category>
      </categories>
      <tags>
        <tag>时间</tag>
        <tag>记录</tag>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中国古典颜色卡]]></title>
    <url>%2F2019%2F10%2F10%2F%E4%B8%AD%E5%9B%BD%E5%8F%A4%E5%85%B8%E9%A2%9C%E8%89%B2%E5%8D%A1%2F</url>
    <content type="text"><![CDATA[中国传统颜色汇总文章来源：【色卡】常用色谱简析，中国传统颜色卡，代码附RBG，HC RGB HEX &nbsp;&nbsp; 完美色谱 红色系 rgb(255, 179, 167) #ffb3a7&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;粉红，即浅红色。别称：妃色 杨妃色 湘妃色 妃红色 rgb(237, 87, 54) #ed5736&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;妃色 妃红色：古同"绯"，粉红色。杨妃色 湘妃色 粉红皆同义。 rgb(240, 0, 86) #f00056&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;品红：比大红浅的红色（quester注：这里的"品红"估计是指的"一品红"，是基于大红色系的，和现在我们印刷用色的"品红M100"不是一个概念） rgb(244, 121, 131) #f47983&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;桃红，桃花的颜色，比粉红略鲜润的颜色。（quester注：不大于M70的色彩，有时可加入适量黄色） rgb(219, 90, 107) #db5a6b&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;海棠红，淡紫红色、较桃红色深一些，是非常妩媚娇艳的颜色。 rgb(242, 12, 0) #f20c00&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;石榴红：石榴花的颜色，高色度和纯度的红色。 rgb(201, 55, 86) #c93756&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;樱桃色：鲜红色 rgb(240, 86, 84) #f05654&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;银红：银朱和粉红色颜料配成的颜色。多用来形容有光泽的各种红色，尤指有光泽浅红。 rgb(255, 33, 33) #ff2121&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;大红：正红色，三原色中的红，传统的中国红，又称绛色（quester注：RGB 色中的 R255 系列明度） rgb(140, 67, 86) #8c4356&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;绛紫：紫中略带红的颜色 rgb(200, 60, 35) #c83c23&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;绯红：艳丽的深红 rgb(157, 41, 51) #9d2933&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;胭脂：1，女子装扮时用的胭脂的颜色。2，国画暗红色颜料 rgb(255, 76, 0) #ff4c00&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;朱红：朱砂的颜色，比大红活泼，也称铅朱 朱色 丹色（quester注：在YM对等的情况下，适量减少红色的成分就是该色的色彩系列感觉） rgb(255, 78, 32) #ff4e20&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;丹：丹砂的鲜艳红色 rgb(243, 83, 54) #f35336&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;彤：赤色 rgb(203, 58, 86) #cb3a56&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;茜色：茜草染的色彩，呈深红色 rgb(255, 45, 81) #ff2d51&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;火红：火焰的红色，赤色 rgb(201, 31, 55) #c91f37&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;赫赤：深红，火红。泛指赤色、火红色。 rgb(239, 122, 130) #ef7a82&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;嫣红：鲜艳的红色 rgb(255, 0, 151) #ff0097&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;洋红：色橘红（quester注：这个色彩方向不太对，通常洋红指的是倾向于M100系列的红色，应该削弱黄色成分。） rgb(255, 51, 0) #ff3300&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;炎：引申为红色。 rgb(195, 39, 43) #c3272b&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;赤：本义火的颜色，即红色 rgb(169, 129, 117) #a98175&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;绾：绛色；浅绛色。 rgb(195, 33, 54) #c32136&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;枣红：即深红（quester注：色相不变，是深浅变化） rgb(179, 109, 97) #b36d61&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;檀：浅红色，浅绛色。 rgb(190, 0, 47) #be002f&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;殷红：发黑的红色。 rgb(220, 48, 35) #dc3023&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;酡红：像饮酒后脸上泛现的红色，泛指脸红 rgb(249, 144, 111) #f9906f&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;酡颜：饮酒脸红的样子。亦泛指脸红色 黄色系 rgb(255, 241, 67) #fff143 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;鹅黄：淡黄色（quester注：鹅嘴的颜色，高明度微偏红黄色） rgb(250, 255, 114) #faff72&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;鸭黄：小鸭毛的黄色 rgb(234, 255, 86) #eaff56&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;樱草色：淡黄色 rgb(255, 166, 49) #ffa631&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;杏黄：成熟杏子的黄色（quester注：Y100 M20~30 感觉的色彩，比较常用且有浓郁中国味道） rgb(255, 140, 49) #ff8c31&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;杏红：成熟杏子偏红色的一种颜色 rgb(255, 137, 54) #ff8936&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;橘黄：柑橘的黄色。 rgb(255, 164, 0) #ffa400&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;橙黄：同上。（quester注：Y100 M50 感觉的色彩，现代感比较强。广告上用得较多） rgb(255, 117, 0) #ff7500&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;橘红：柑橘皮所呈现的红色。 rgb(255, 199, 115) #ffc773&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;姜黄：中药名。别名黄姜。为姜科植物姜黄的根茎。又指人脸色不正,呈黄白色 rgb(240, 194, 57) #f0c239&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;缃色：浅黄色。 rgb(250, 140, 53) #fa8c35&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;橙色：界于红色和黄色之间的混合色。 rgb(179, 92, 68) #b35c44&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;茶色：一种比栗色稍红的棕橙色至浅棕色 rgb(168, 132, 98) #a88462&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;驼色：一种比咔叽色稍红而微淡、比肉桂色黄而稍淡和比核桃棕色黄而暗的浅黄棕色 rgb(200, 155, 64) #c89b40&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;昏黄：形容天色、灯光等呈幽暗的黄色 rgb(96, 40, 30) #60281e&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;栗色：栗壳的颜色。即紫黑色 rgb(178, 93, 37) #b25d25&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;棕色：棕毛的颜色,即褐色。1，在红色和黄色之间的任何一种颜色2，适中的暗淡和适度的浅黑。 rgb(130, 113, 0) #827100&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;棕绿：绿中泛棕色的一种颜色。 rgb(124, 75, 0) #7c4b00&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;棕黑：深棕色。 rgb(155, 68, 0) #9b4400&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;棕红：红褐色。 rgb(174, 112, 0) #ae7000&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;棕黄：浅褐色。 rgb(156, 83, 51) #9c5333&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;赭：赤红如赭土的颜料,古人用以饰面 rgb(149, 85, 57) #955539&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;赭色：红色、赤红色。 rgb(202, 105, 36) #ca6924&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;琥珀： rgb(110, 81, 30) #6e511e&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;褐色： 黄黑色 rgb(211, 177, 125) #d3b17d&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;枯黄：干枯焦黄 rgb(226, 156, 69) #e29c45&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;黄栌：一种落叶灌木，花黄绿色,叶子秋天变成红色。木材黄色可做染料。 rgb(137, 108, 57) #896c39&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;秋色：1，中常橄榄棕色,它比一般橄榄棕色稍暗,且稍稍绿些。2，古以秋为金,其色白,故代指白色。 rgb(217, 182, 17) #d9b611&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;秋香色：浅橄榄色 浅黄绿色。（quester注：直接在Y中掺入k10~30可得到不同浓淡的该类色彩） 绿色系 rgb(189, 221, 34) #bddd22&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;嫩绿：像刚长出的嫩叶的浅绿色 rgb(201, 221, 34) #c9dd22&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;柳黄：像柳树芽那样的浅黄色 rgb(175, 221, 34) #afdd22&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;柳绿：柳叶的青绿色 rgb(120, 146, 98) #789262&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;竹青：竹子的绿色 rgb(163, 217, 0) #a3d900&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;葱黄：黄绿色，嫩黄色 rgb(158, 217, 0) #9ed900&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;葱绿：1，浅绿又略显微黄的颜色2，草木青翠的样子 rgb(14, 184, 58) #0eb83a&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;葱青：淡淡的青绿色 rgb(14, 184, 58) #0eb83a&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;葱倩：青绿色 rgb(10, 163, 68) #0aa344&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;青葱：翠绿色,形容植物浓绿 rgb(0, 188, 18) #00bc12&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;油绿：光润而浓绿的颜色。以上几种绿色都是明亮可爱的色彩。 rgb(12, 137, 24) #0c8918&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;绿沈（沉）：深绿 rgb(27, 209, 165) #1bd1a5&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;碧色：1，青绿色。2，青白色,浅蓝色。 rgb(42, 221, 156) #2add9c&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;碧绿：鲜艳的青绿色 rgb(72, 192, 163) #48c0a3&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;青碧：鲜艳的青蓝色 rgb(61, 225, 173) #3de1ad&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;翡翠色：1，翡翠鸟羽毛的青绿色。2，翡翠宝石的颜色。（quester注：C-Y≥30 的系列色彩，多与白色配合以体现清新明丽感觉，与黑色配合效果不好：该色个性柔弱，会被黑色牵制） rgb(64, 222, 90) #40de5a&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;草绿：绿而略黄的颜色。 rgb(0, 224, 158) #00e09e&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;青色：1，一类带绿的蓝色,中等深浅,高度饱和。3，本义是蓝色。4，一般指深绿色。5，也指黑色。6，四色印刷中的一色。2，特指三补色中的一色。 rgb(0, 224, 121) #00e079&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;青翠：鲜绿 rgb(192, 235, 215) #c0ebd7&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;青白：白而发青,尤指脸没有血色 rgb(224, 238, 232) #e0eee8&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;鸭卵青：淡青灰色，极淡的青绿色 rgb(187, 205, 197) #bbcdc5&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;蟹壳青：深灰绿色 rgb(66, 76, 80) #424c50&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;鸦青：鸦羽的颜色。即黑而带有紫绿光的颜色。 rgb(0, 229, 0) #00e500&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;绿色：1，在光谱中介于蓝与黄之间的那种颜色。2，本义：青中带黄的颜色。3，引申为黑色，如绿鬓：乌黑而光亮的鬓发。代指为青春年少的容颜。（quester注：现代色彩研究中，把绿色提高到了一个重要的位置，和其它红黄兰三原色并列研究，称做"心理原色"之一） rgb(158, 208, 72) #9ed048&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;豆绿：浅黄绿色 rgb(150, 206, 84) #96ce54&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;豆青：浅青绿色 rgb(123, 207, 166) #7bcfa6&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;石青：淡灰绿色 rgb(46, 223, 163) #2edfa3&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;玉色:玉的颜色，高雅的淡绿、淡青色 rgb(127, 236, 173) #7fecad&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;缥：绿色而微白 rgb(164, 226, 198) #a4e2c6&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;艾绿：艾草的颜色。偏苍白的绿色。 rgb(33, 166, 117) #21a675&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;松柏绿：经冬松柏叶的深绿 rgb(5, 119, 72) #057748&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;松花绿：亦作"松花"、"松绿"。偏黑的深绿色,墨绿。 rgb(188, 230, 114) #bce672&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;松花色：浅黄绿色。（松树花粉的颜色）《红楼梦》中提及松花配桃红为娇艳 蓝色系 rgb(68, 206, 246) #44cef6&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;蓝：三原色的一种。像晴天天空的颜色（quester注：这里的蓝色指的不是RGB色彩中的B，而是CMY色彩中的C） rgb(23, 124, 176) #177cb0&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;靛青：也叫"蓝靛"。用蓼蓝叶泡水调和与石灰沉淀所得的蓝色染料。呈深蓝绿色（quester注：靛，发音dian四声，有些地方将蓝墨水称为"靛水"或者"兰靛水"） rgb(6, 82, 121) #065279&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;靛蓝：由植物(例如靛蓝或菘蓝属植物)得到的蓝色染料 rgb(62, 237, 231) #3eede7&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;碧蓝：青蓝色 rgb(112, 243, 255) #70f3ff&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;蔚蓝：类似晴朗天空的颜色的一种蓝色 rgb(75, 92, 196) #4b5cc4&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;宝蓝：鲜艳明亮的蓝色（quester注：英文中为 RoyalBlue 即皇家蓝色，是皇室选用的色彩，多和小面积纯黄色（金色）配合使用。） rgb(161, 175, 201) #a1afc9&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;蓝灰色：一种近于灰略带蓝的深灰色 rgb(46, 78, 126) #2e4e7e&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;藏青：蓝而近黑 rgb(59, 46, 126) #3b2e7e&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;藏蓝：蓝里略透红色 rgb(74, 66, 102) #4a4266&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;黛：青黑色的颜料。古代女子用以画眉。 rgb(74, 66, 102) #4a4266&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;黛螺：绘画或画眉所使用的青黑色颜料，代指女子眉妩。 rgb(74, 66, 102) #4a4266&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;黛色：青黑色。 rgb(66, 102, 102) #426666&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;黛绿：墨绿。 rgb(66, 80, 102) #425066&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;黛蓝：深蓝色 rgb(87, 66, 102) #574266&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;黛紫：深紫色 rgb(141, 75, 187) #8d4bbb&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;紫色：蓝和红组成的颜色。古人以紫为祥瑞的颜色。代指与帝王、皇宫有关的事物。 rgb(129, 84, 99) #815463&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;紫酱：浑浊的紫色 rgb(129, 84, 118) #815476&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;酱紫：紫中略带红的颜色 rgb(76, 34, 27) #4c221b&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;紫檀：檀木的颜色，也称乌檀色 乌木色 rgb(0, 51, 113) #003371&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;绀青 绀紫：纯度较低的深紫色 rgb(86, 0, 79) #56004f&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;紫棠：黑红色 rgb(128, 29, 174) #801dae&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;青莲：偏蓝的紫色 rgb(76, 141, 174) #4c8dae&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;群青：深蓝色 rgb(176, 164, 227) #b0a4e3&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;雪青：浅蓝紫色 rgb(204, 164, 227) #cca4e3&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;丁香色：紫丁香的颜色，浅浅的紫色，很娇柔淡雅的色彩 rgb(237, 209, 216) #edd1d8&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;藕色：浅灰而略带红的颜色 rgb(228, 198, 208) #e4c6d0&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;藕荷色：浅紫而略带红的颜色 苍色 rgb(117, 135, 138) #75878a&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;苍色：即各种颜色掺入黑色后的颜色，如 rgb(81, 154, 115) #519a73&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;苍翠 rgb(162, 155, 124) #a29b7c&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;苍黄 rgb(115, 151, 171) #7397ab&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;苍青 rgb(57, 82, 96) #395260&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;苍黑 rgb(209, 217, 224) #d1d9e0&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;苍白（quester注：准确的说是掺入不同灰度级别的灰色） 水色 rgb(136, 173, 166) #88ada6&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;水色 rgb(243, 211, 231) #f3d3e7&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;水红 rgb(212, 242, 231) #d4f2e7&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;水绿 rgb(210, 240, 244) #d2f0f4&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;水蓝 rgb(211, 224, 243) #d3e0f3&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;淡青 rgb(48, 223, 243) #30dff3&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;湖蓝 rgb(37, 248, 203) #25f8cb&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;湖绿，皆是浅色。 深色淡色：颜色深的或浅的，不再一一列出。 灰白色系 rgb(255, 255, 255) #ffffff &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;精白：纯白，洁白，净白，粉白。 rgb(255, 251, 240) #fffbf0 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;象牙白：乳白色 rgb(240, 252, 255) #f2fdff &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;雪白：如雪般洁白 rgb(214, 236, 240) #d6ecf0 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;月白：淡蓝色 rgb(242, 236, 222) #f2ecde &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;缟：白色 rgb(224, 240, 233) #e0f0e9 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;素：白色，无色 rgb(243, 249, 241) #f3f9f1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;荼白：如荼之白色 rgb(233, 241, 246) #e9f1f6 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;霜色：白霜的颜色。 rgb(194, 204, 208) #c2ccd0 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▓▓▓▓&nbsp;&nbsp;花白：白色和黑色混杂的。斑白的 夹杂有灰色的白 rgb(252, 239, 232) #fcefe8 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;鱼肚白：似鱼腹部的颜色，多指黎明时东方的天色颜色（quester注：M5 Y5） rgb(227, 249, 253) #e3f9fd &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;莹白：晶莹洁白 rgb(128, 128, 128) #808080 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;灰色：黑色和白色混和成的一种颜色 rgb(238, 222, 176) #eedeb0 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;牙色：与象牙相似的淡黄色（quester注：暖白） rgb(240, 240, 244) #f0f0f4 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;铅白：铅粉的白色。铅粉，国画颜料，日久易氧化"返铅"变黑。铅粉在古时用以搽脸的化妆品。（quester注：冷白） 黑色系 rgb(98, 42, 29) #622a1d &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;玄色：赤黑色，黑中带红的颜色，又泛指黑色 rgb(61, 59, 79) #3d3b4f &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;玄青：深黑色 rgb(114, 94, 130) #725e82 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;乌色：暗而呈黑的颜色 rgb(57, 47, 65) #392f41 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;乌黑：深黑；漆黑 rgb(22, 24, 35) #161823 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;漆黑：非常黑的 rgb(80, 97, 109) #50616d &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;墨色：即黑色 rgb(117, 138, 153) #758a99 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;墨灰：即黑灰 rgb(0, 0, 0) #000000 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ████&nbsp;&nbsp; 黑色：亮度最低的非彩色的或消色差的物体的颜色；最暗的灰色；与白色截然不同的消色差的颜色；被认为特别属于那些既不能反射、又不能透过能使人感觉到的微小入射光的物体,任何亮度很低的物体颜色。 rgb(73, 49, 49) #493131 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;缁色：帛黑色 rgb(49, 37, 32) #312520 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp; 煤黑、象牙黑：都是黑，不过有冷暖之分。 rgb(93, 81, 60) #5d513c &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;黧：黑中带黄的颜色 rgb(117, 102, 77) #75664d &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;黎：黑中带黄似黎草色 rgb(107, 104, 130) #6b6882 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;黝：本义为淡黑色或微青黑色。 rgb(102, 87, 87) #665757 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;黝黑：（皮肤暴露在太阳光下而晒成的）青黑色 rgb(65, 85, 93) #41555d &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;黯：深黑色、泛指黑色 金银色 rgb(242, 190, 69) #f2be45 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;赤金：足金的颜色 rgb(234, 205, 118) #eacd76 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;金色：平均为深黄色带光泽的颜色 rgb(233, 231, 239) #e9e7ef &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;银白：带银光的白色 rgb(84, 150, 136) #549688 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;铜绿 rgb(167, 142, 68) #a78e44 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;乌金 rgb(186, 202, 198) #bacac6 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;████&nbsp;&nbsp;老银：金属氧化后的色彩]]></content>
      <categories>
        <category>编程</category>
        <category>html</category>
      </categories>
      <tags>
        <tag>色值</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一小时快速撸出一个短网址生成项目]]></title>
    <url>%2F2019%2F09%2F30%2F%E4%B8%80%E5%B0%8F%E6%97%B6%E5%BF%AB%E9%80%9F%E6%92%B8%E5%87%BA%E7%9F%AD%E7%BD%91%E5%9D%80%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[写在最前面&emsp;项目完整源码(欢迎star)：https://github.com/wjup/shorturl 引入主题&emsp;前几天在某论坛看到这样一篇帖子，说的是“大家第一个项目，都是从网址导航开始？”，浏览半天回复的内容发现都是大佬啊，有做了个浏览器插件的，有做了个博客的，这个更不错，手撸出来的多厉害。当然也有不少做的网址导航的。&emsp;翻到上面看到一位老哥说的是短网址项目。 &emsp;于是我脑瓜一热，百度了下短网址的原理。发现还是很简单的，说时迟那时快，我已经打开了IDEA,创建项目手撸开干。项目架构选择了springboot,持久层还是用的mybatis,前端依然是bootstrap。用了不到一个下午的时间项目已经出来了。整个项目中，最浪费时间的还是前端调样式。前端菜的一批。 实现原理下面说下实现的原理&emsp;首先在用户输入一条长链接传到后端的时候，我先生成了数字和字母随机组成的6位字符，然后把这个字符和长链接保存到数据库。保存成功后，把这6位字符拼上我的网址，返回给用户，就像是这样的 https://wjup.top/HtN3Gc&emsp;当用户拿到这个短网址访问的时候。我在后台进行获取这个短网址的6个字符，然后根据这个字符到数据库查询原来的链接，再进行301永久重定向到原网址就可以了。整体实现非常简单。当然我还增加了对短网址加密的功能，只有输入正确的密码才能访问原始链接 逻辑代码下面放出主要的实现代码。项目完整版可以到github中去克隆岛到本地研究 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188package com.wjup.shorturl.controller;import com.alibaba.fastjson.JSONObject;import com.wjup.shorturl.entity.UrlEntity;import com.wjup.shorturl.service.UrlService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import org.thymeleaf.util.DateUtils;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.Date;import java.util.Locale;import java.util.Random;import java.util.UUID;/** * Create by wjup on 2019/9/29 11:33 * &lt;p&gt; * 短网址生成项目 */@Controllerpublic class UrlController &#123; @Autowired private UrlService urlService; @RequestMapping("/") public String index() &#123; return "index"; &#125; /** * 创建短链接 * * @param longUrl 原地址 * @param viewPwd 访问密码 * @param request 请求 * @return json */ @RequestMapping("/create") @ResponseBody public String creatShortUrl(String longUrl, String viewPwd, HttpServletRequest request) &#123; JSONObject json = new JSONObject(); String[] split = longUrl.split("\n|\r"); StringBuffer msg = new StringBuffer(); for (int i = 0; i &lt; split.length; i++) &#123; UrlEntity urlEntity = new UrlEntity(); if (!split[i].contains("https://") &amp;&amp; !split[i].contains("http://")) &#123; split[i] = "http://" + split[i]; &#125; String shortUrlId = getStringRandom(6); urlEntity.setShortUrlId(shortUrlId); urlEntity.setUuid(UUID.randomUUID().toString()); urlEntity.setLongUrl(split[i]); urlEntity.setCreateTime(DateUtils.format(new Date(), "yyyy-MM-dd HH-mm-ss", Locale.SIMPLIFIED_CHINESE)); urlEntity.setViewPwd(viewPwd); int flag = urlService.createShortUrl(urlEntity); String toUrl = "/"; int serverPort = request.getServerPort(); if (serverPort == 80 || serverPort == 443) &#123; toUrl = request.getScheme() + "://" + request.getServerName(); &#125; else &#123; toUrl = request.getScheme() + "://" + request.getServerName() + ":" + serverPort; &#125; if (flag &gt; 0) &#123; msg.append(toUrl + "/" + shortUrlId + "&lt;br&gt;"); &#125; &#125; json.put("shortUrl", msg); return json.toJSONString(); &#125; /** * 访问短链接 * * @param shortUrlId 短网址id * @param response 响应 * @param request 请求 * @throws ServletException 异常捕获 * @throws IOException 异常捕获 */ @RequestMapping(value = "/&#123;shortUrlId&#125;") public void view(@PathVariable("shortUrlId") String shortUrlId, HttpServletResponse response, HttpServletRequest request) throws ServletException, IOException &#123; UrlEntity urlEntity = urlService.findByShortUrlId(shortUrlId); if (urlEntity != null) &#123; if (urlEntity.getViewPwd() != null &amp;&amp; !"".equals(urlEntity.getViewPwd())) &#123; request.setAttribute("shortUrlId", shortUrlId); request.getRequestDispatcher("/viewPwd").forward(request, response); &#125; else &#123; urlService.updateShortUrl(shortUrlId); response.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY); response.setHeader("Location", urlEntity.getLongUrl()); &#125; &#125; else &#123; request.getRequestDispatcher("/noPage").forward(request, response); &#125; &#125; /** * 没有该请求跳转到指定页面 * * @return page */ @RequestMapping("/noPage") public String noPage() &#123; return "noPage"; &#125; /** * 有密码打开输入密码页面 * * @return html */ @RequestMapping("/viewPwd") public String viewPwd(HttpServletRequest request, Model model) &#123; String shortUrlId = request.getAttribute("shortUrlId").toString(); model.addAttribute("shortUrlId", shortUrlId); return "viewPwd"; &#125; /** * 验证密码是否正确 * * @param viewPwd 密码 * @param shortUrlId 短址id */ @RequestMapping("/VerifyPwd") @ResponseBody public String VerifyPwd(String viewPwd, String shortUrlId) &#123; UrlEntity urlEntity = urlService.findByPwd(viewPwd, shortUrlId); JSONObject jsonObject = new JSONObject(); if (urlEntity != null) &#123; urlService.updateShortUrl(shortUrlId); jsonObject.put("longUrl", urlEntity.getLongUrl()); jsonObject.put("flag", true); &#125; else &#123; jsonObject.put("flag", false); &#125; return jsonObject.toJSONString(); &#125; /** * 生成随机数字和字母 * * @param length 生成长度 * @return shortUrlId */ private String getStringRandom(int length) &#123; String val = ""; Random random = new Random(); //参数length，表示生成几位随机数 for (int i = 0; i &lt; length; i++) &#123; String charOrNum = random.nextInt(2) % 2 == 0 ? "char" : "num"; //输出字母还是数字 if ("char".equalsIgnoreCase(charOrNum)) &#123; //输出是大写字母还是小写字母 int temp = random.nextInt(2) % 2 == 0 ? 65 : 97; val += (char) (random.nextInt(26) + temp); &#125; else if ("num".equalsIgnoreCase(charOrNum)) &#123; val += String.valueOf(random.nextInt(10)); &#125; &#125; return val; &#125;&#125;]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>Thymeleaf</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[建议收藏-专业的MySQL开发规范]]></title>
    <url>%2F2019%2F09%2F25%2F%E5%BB%BA%E8%AE%AE%E6%94%B6%E8%97%8F-%E4%B8%93%E4%B8%9A%E7%9A%84MySQL%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[为了项目的稳定，代码的高效，管理的便捷，在开发团队内部会制定各种各样的规范 今天的内容转载自某团队成员分享的他们内部定义的建议收藏 | 专业的MySQL开发规范 数据库对象命名规范数据库对象命名规范的对象是指数据库SCHEMA、表TABLE、索引INDEX、约束CONSTRAINTS等的命名约定 数据库对象命名原则 命名使用具有意义的英文词汇，词汇中间以下划线分隔 命名只能使用英文字母、数字、下划线 避免用MySQL的保留字如：call、group等 所有数据库对象使用小写字母 数据库命名规范 数据库名不能超过30个字符 数据库命名必须为项目英文名称或有意义的简写 数据库创建时必须添加默认字符集和校对规则子句。默认字符集为UTF8(已迁移dumbo的使用utf8mb4) 命名应使用小写 表命名规范 同一个模块的表尽可能使用相同的前缀，表名称尽可能表达含义 多个单词以下划线（_）分隔 表名不能超过30个字符 普通表名以t_开头，表示为table，命名规则为t_模块名（或有意义的简写）_+table_name 临时表(运营、开发或数据库人员临时用作临时进行数据采集用的中间表)命名规则：加上tmp前缀和8位时间后缀（tmp_test_user_20181109） 备份表（DBA备份用作保存历史数据的中间表）命名规则：加上bak前缀和8位时间后缀（bak_test_user_20181109） 命名应使用小写 字段命名规范 字段命名需要表示其实际含义的英文单词或简写，单词之间用下划线（_）进行连接 各表之间相同意义的字段必须同名 字段名不能超过30个字符 用户命名规范 生产使用的用户命名格式为 code_应用 只读用户命名规则为 read_应用 数据库对象设计规范存储引擎的选择如无特殊需求，必须使用innodb存储引擎 字符集的选择如无特殊要求，必须使用utf8或utf8mb4 表设计规范 不同应用间所对应的数据库表之间的关联应尽可能减少，不允许使用外键对表之间进行关联，确保组件对应的表之间的独立性，为系统或表结构的重构提供可能性 表设计的角度不应该针对整个系统进行数据库设计，而应该根据系统架构中组件划分，针对每个组件所处理的业务进行数据库设计 表必须要有PK 一个字段只表示一个含义 表不应该有重复列 禁止使用复杂数据类型(数组,自定义等) 需要join的字段(连接键),数据类型必须保持绝对一致，避免隐式转换 设计应至少满足第三范式,尽量减少数据冗余。一些特殊场景允许反范式化设计，但在项目评审时需要对冗余字段的设计给出解释 TEXT字段必须放在独立的表中,用PK与主表关联。如无特殊需要，禁止使用TEXT、BLOB字段 需要定期删除(或者转移)过期数据的表,通过分表解决 单表字段数不要太多，建议最多不要大于50个 MySQL在处理大表时，性能就开始明显降低，所以建议单表物理大小限制在16GB，表中数据控制在2000W内 如果数据量或数据增长在前期规划时就较大，那么在设计评审时就应加入分表策略 无特殊需求，严禁使用分区表 字段设计规范 INT：如无特殊需要，存放整型数字使用UNSIGNED INT型。整型字段后的数字代表显示长度 DATETIME：所有需要精确到时间(时分秒)的字段均使用DATETIME,不要使用TIMESTAMP类型 VARCHAR：所有动态长度字符串 全部使用VARCHAR类型,类似于状态等有限类别的字段,也使用可以比较明显表示出实际意义的字符串,而不应该使用INT之类的数字来代替； VARCHAR(N)，N表示的是字符数而不是字节数。比如VARCHAR(255)，可以最大可存储255个字符（字符包括英文字母，汉字，特殊字符等）。但N应尽可能小，因为MySQL一个表中所有的VARCHAR字段最大长度是65535个字节，且存储字符个数由所选字符集决定。如UTF8存储一个字符最大要3个字节，那么varchar在存放占用3个字节长度的字符时不应超过21845个字符。同时，在进行排序和创建临时表一类的内存操作时，会使用N的长度申请内存。(如无特殊需要，原则上单个varchar型字段不允许超过255个字符) TEXT:仅仅当字符数量可能超过20000个的时候,才可以使用TEXT类型来存放字符类数据,因为所有MySQL数据库都会使用UTF8字符集。所有使用TEXT类型的字段必须和原表进行分拆,与原表主键单独组成另外一个表进行存放。如无特殊需要，严禁开发人员使用MEDIUMTEXT、TEXT、LONGTEXT类型 对于精确浮点型数据存储，需要使用DECIMAL，严禁使用FLOAT和DOUBLE 如无特殊需要，严禁开发人员使用BLOB类型 如无特殊需要，字段建议使用NOT NULL属性，可用默认值代替NULL 自增字段类型必须是整型且必须为UNSIGNED，推荐类型为INT或BIGINT，并且自增字段必须是主键或者主键的一部分 索引设计规范 索引必须创建在索引选择性选择性较高的列上,选择性的计算方式为: select count(distinct(col_name))/count(*) from tb_name;如果结果小于0.2，则不建议在此列上创建索引，否则大概率会拖慢SQL执行 组合索引的首字段,必须在where条件中，对于确定需要组成组合索引的多个字段,建议将选择性高的字段靠前放 禁止使用外键 Text类型字段如果需要创建索引，必须使用前缀索引 单张表的索引数量理论上应控制在5个以内。经常有大批量插入、更新操作表，应尽量少建索引 ORDER BY，GROUP BY，DISTINCT的字段需要添加在索引的后面，形成覆盖索引 尽量使用Btree索引，不要使用其它类型索引 约束设计规范 PK应该是有序并且无意义的,尽量由开发人员自定义,且尽可能短，使用自增序列。 表中除PK以外,还存在唯一性约束的,可以在数据库中创建以uidx_作为前缀的唯一约束索引。 PK字段不允许更新。 禁止创建外键约束,外键约束由应用控制。 如无特殊需要，所有字段必须添加非空约束，即not null。 如无特殊需要，所有字段必须有默认值。 SQL编写规范 尽量避免使用select *，join语句使用select *可能导致只需要访问索引即可完成的查询需要回表取数 严禁使用select * from table而不加任何where条件 MySQL中的text类型字段存储的时候不是和由其他普通字段类型的字段组成的记录存放在一起,而且读取效率本身也不如普通字段块。如果不需要取回text字段，又使用了select *,会让完成相同功能的sql所消耗的io量大很多,而且增加部分的io效率也更低下 在取出字段上可以使用相关函数，但应尽可能避免出现now(),rand(),sysdate(),current_user()等不确定结果的函数，在Where条件中的过滤条件字段上严禁使用任何函数，包括数据类型转换函数 所有连接的SQL必须使用Join ... On ...方式进行连接，而不允许直接通过普通的Where条件关联方式。外连接的SQL语句,可以使用Left Join On的Join方式，且所有外连接一律写成Left Join，而不要使用Right Join 分页查询语句全部都需要带有排序条件,除非应用方明确要求不要使用任何排序来随机展示数据 WHERE条件中严禁在索引列上进行数学运算或函数运算 用in()/union替换or，并注意in的个数小于300 严禁使用%前缀进行模糊前缀查询:如：select id,val from table where val like ‘%name’;可以使用%模糊后缀查询如：select id,val from table where val like ‘name%’ 严禁使用INSERT ON DUPLICATE KEY UPDATE、REPLACE INTO、INSERT IGNORE]]></content>
      <categories>
        <category>编程</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[maven多个子项目和父项目之间的引用问题]]></title>
    <url>%2F2019%2F09%2F24%2Fmaven%E5%A4%9A%E4%B8%AA%E5%AD%90%E9%A1%B9%E7%9B%AE%E5%92%8C%E7%88%B6%E9%A1%B9%E7%9B%AE%E4%B9%8B%E9%97%B4%E7%9A%84%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[spring cloud中多个maven子项目与父项目之间jar包的引用 下面是一个简略的项目结构图 Parent------ childA(BusinessLayer)— pom.xml ------ childB(WebLayer)— pom.xml `—— pom.xml Parent怎么能找到childA和childB呢？在maven中，parent模块组织好childA和childB，叫做”聚合”，多个模块联合编译。实现起来很简单，只需要在parent的pom文件里加入以下内容。 1234&lt;modules&gt; &lt;module&gt;childA&lt;/module&gt; &lt;module&gt;childB&lt;/module&gt;&lt;/modules&gt; 是不是这样写就完全ok了？这样只是告诉maven编译器，在读取parent的pom文件时去找到childA和childB，但还是会分别去编译他们引入的依赖。这样就会导致pom文件引入的包重复！！于是我们引入了”继承”的概念，也就是形成”父子”关系，子pom可以引用到父pom中引入的依赖。具体做法如下： 在parent中，写入以下内容，其中”*”标识的行可以组成一个路径，通过这个路径可以在maven仓库中找到这个pom文件！本例中，path为M2_Path/com/sang/main/Parent-Moduel/1.0.2/xxxx-1.0.2.pom。所以这三个标签是必须的！！！ 123456&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.sang.main&lt;/groupId&gt; *&lt;artifactId&gt;Parent-Moduel&lt;/artifactId&gt; *&lt;version&gt;1.0.2&lt;/version&gt; *&lt;packaging&gt;pom&lt;/packaging&gt; &lt;name&gt;Simple-main&lt;/name&gt; 父pom写好了，子pom就通过标签继承父pom的依赖，如下： 123456&lt;parent&gt; &lt;groupId&gt;com.sang.main&lt;/groupId&gt; &lt;artifactId&gt;Parent-Moduel&lt;/artifactId&gt; &lt;version&gt;1.0.2&lt;/version&gt; &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt; &lt;!--本例中此处是可选的--&gt;&lt;/parent&gt; 值得注意的是标签，如果pom的层次关系就像本例中的那样只隔一层，则可以省略这个。maven同样可以找到子pom。 子pom中引入标签后，就会从父pom继承等属性了，例如childA只需要再加入如下内容即可！ 12345&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.sang.business&lt;/groupId&gt; &lt;!--和artifactId一起唯一标识这个jar文件--&gt;&lt;artifactId&gt;ChildA-module&lt;/artifactId&gt;&lt;packaging&gt;jar&lt;/packaging&gt; &lt;!--指明打包类型--&gt;&lt;name&gt;childA&lt;/name&gt; 如何添加依赖？maven可以让我们方便地管理jar包依赖，具体做法如下： 1234567&lt;dependencies&gt; &lt;dependency&gt; &lt;!--添加一个jar包依赖--&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 如果不通过继承，则需要在每个pom中加入这样的依赖，这样子pom对应的模块可以引用到这个jar包。上面提到的重复引用jar包，可以通过下面的方式解决： 主pom中把依赖通过引起来，表示子pom可能会用到的jar包依赖 123456789&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt; 子pom如果需要引用该jar包，则直接引用即可！不需要加入，便于统一管理。此外也可以加入仅在子pom中用到的jar包，比如： 1234567891011&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;!--此处不再需要verison了！--&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt; &lt;artifactId&gt;jackson-core-lgpl&lt;/artifactId&gt; &lt;version&gt;1.9.4&lt;/version&gt; &lt;!--当然也可以加入只在这个子模块中用到的jar包--&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 除了jar包依赖，插件也可以通过这样的方式进行管理12345678910111213141516171819202122&lt;!-- mainModule --&gt;&lt;build&gt; &lt;pluginManagement&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt; &lt;version&gt;2.1.1&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt;&lt;/build&gt;&lt;!-- childA --&gt;&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 如果子pom间存在引用关系，比如childA引用到了childB的jar包，该怎么做？12345&lt;dependency&gt; &lt;groupId&gt;com.module&lt;/groupId&gt; &lt;artifactId&gt;childA&lt;/artifactId&gt; &lt;!--加上childA的依赖--&gt; &lt;version&gt;1.0.0&lt;/version&gt;&lt;/dependency&gt; 参考文献本文转载自：maven多个子项目、父项目之间的引用问题 -360图书馆]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Quartz的cron表达式写法详解]]></title>
    <url>%2F2019%2F09%2F10%2Fquartz%E7%9A%84cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%86%99%E6%B3%95%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp; 用过quartz才发现如此的好用，由其是使用cron来表达时间，简直不要太赞。不过他的cron表达式和crontab的cron表达式还是稍有不同的。 格式* * * * * ? *秒 分 时 天 月 周 年 取值范围 “日”和”周几”不能同时为*和数字，也不能同时为?，否则会报错 年若为*，可以被省略 Cron表达式的格式：秒 分 时 日 月 周 年(可选) 字段名 允许的值 允许的特殊字符 秒 0-59 , - * / 分 0-59 , - * / 小时 0-23 , - * / 日 1-31 , - * ? / L W C 月 1-12 or JAN-DEC , - * / 周几 1-7 or SUN-SAT , - * ? / L C # 年(可选字段)empty 1970-2099 , - * / 特殊字符解释*：每一(秒/分…)执行x/y：每隔x执行，从y开始x,y：在第z、y执行(周一周二执行：* * * ? * MON,TUE *)x-y：周期从x到y执行(每年6-8月执行：* * * * 6-8 ? *)L：这个月的最后一天(* * * L * ? *)LW：这个月的最后一个工作日(* * * LW * ? *)nL：这个月的最后一个星期n(* * * nL * ? *)L-n：在本月底前n天(* * * L-n * ? *)x#y：在这个月的第y个星期x(* * * ? * 5#2 *)nW：最近的工作日（周一至周五）至本月n日(* * * nW * ? *) 注意一周从星期天开始计数，周天为1，周六为7 表达式示例 表达式 解释 0 * * * * ? 每1分钟触发一次 0 0 * * * ? 每天每1小时触发一次 0 0 10 * * ? 每天10点触发一次 0 * 14 * * ? 在每天下午2点到下午2:59期间的每1分钟触发 0 30 9 1 * ? 每月1号上午9点半 0 15 10 15 * ? 每月15日上午10:15触发 */5 * * * * ? 每隔5秒执行一次 0 */1 * * * ? 每隔1分钟执行一次 0 0 5-15 * * ? 每天5-15点整点触发 0 0/3 * * * ? 每三分钟触发一次 0 0-5 14 * * ? 在每天下午2点到下午2:05期间的每1分钟触发 0 0/5 14 * * ? 在每天下午2点到下午2:55期间的每5分钟触发 0 0/5 14,18 * * ? 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 0 0/30 9-17 * * ? 朝九晚五工作时间内每半小时 0 0 10,14,16 * * ? 每天上午10点，下午2点，4点 0 0 12 ? * WED 表示每个星期三中午12点 0 0 17 ? * TUES,THUR,SAT 每周二、四、六下午五点 0 10,44 14 ? 3 WED 每年三月的星期三的下午2:10和2:44触发 0 15 10 ? * MON-FRI 周一至周五的上午10:15触发 0 0 23 L * ? 每月最后一天23点执行一次 0 15 10 L * ? 每月最后一日的上午10:15触发 0 15 10 ? * 6L 每月的最后一个星期五上午10:15触发 0 15 10 * * ? 2005 2005年的每天上午10:15触发 0 15 10 ? * 6L 2002-2005 2002年至2005年的每月的最后一个星期五上午10:15触发 0 15 10 ? * 6#3 每月的第三个星期五上午10:15触发 参考文档 quartz时间表达式中 * 和 ? 的意思似乎差不多？ pigx微服务快速开发框架项目 示例来源博客园]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>quartz</tag>
        <tag>cron</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thymeleaf自带的时间工具类]]></title>
    <url>%2F2019%2F09%2F06%2FThymeleaf%E8%87%AA%E5%B8%A6%E7%9A%84%E6%97%B6%E9%97%B4%E5%B7%A5%E5%85%B7%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[先简单介绍下Thymeleaf： Thymeleaf是一种用于Web和独立环境的现代服务器端的Java模板引擎。Thymeleaf的主要目标是将优雅的自然模板带到开发工作流程中，并将HTML在浏览器中正确显示，并且可以作为静态原型，让开发团队能更容易地协作。Thymeleaf能够处理HTML，XML，JavaScript，CSS甚至纯文本。Thymeleaf使用Spring框架的模块，与许多常见的工具集成在一起，并且可以插入自己的功能，是现代HTML5 JVM Web开发的理想选择，尽管Thymeleaf还有更多其它的功能。Thymeleaf建立在自然模板的概念之上，以不影响模板作为设计原型的方式将其逻辑注入到模板文件中。 这改善了设计沟通，弥合了前端设计和开发人员之间的理解偏差。 本文重点不在Thymeleaf模板，而是在开发中无意发现(如获至宝)他自带的一个时间工具类org.thymeleaf.util.DateUtils. 该类提供了20多种方法，一起来看下 format(Object target, Locale locale) 该方法中第一个参数target虽然对象是Object类，但是往下翻源码，还是会对他进行一个判断，所以该参数的对象只能是Calendar或者Data，其他对象会返回一个异常。 第二个参数locale，点击查看Locale对象，发现里面提供很多时区常量，往下翻会找到中国地区 123String format = DateUtils.format(new Date(), Locale.SIMPLIFIED_CHINESE);System.out.println(format);//format：2019年9月6日 下午03时59分02秒 format(Object target, String pattern, Locale locale) 这一个相信是很常用的方法了，翻开源码发现第二个参数是要格式化的时间格式 123String format1 = DateUtils.format(new Date(), "yyyy-MM-dd", Locale.SIMPLIFIED_CHINESE);System.out.println(format1);// format1：2019-09-06 16:04:59 其他不常用的就不详细罗列了，直观点展示。还有create方法，感觉一般更用不上，不展示了12345678910111213141516// 2019-09-06 16:20:21System.out.println(DateUtils.dayOfWeek(new Date()));// 6System.out.println(DateUtils.dayOfWeekName(new Date(),Locale.SIMPLIFIED_CHINESE));//星期五System.out.println(DateUtils.dayOfWeekNameShort(new Date(),Locale.SIMPLIFIED_CHINESE));//星期五System.out.println(DateUtils.monthName(new Date(),Locale.SIMPLIFIED_CHINESE));//九月System.out.println(DateUtils.monthNameShort(new Date(),Locale.SIMPLIFIED_CHINESE));//九月System.out.println(DateUtils.year(new Date()));//2019System.out.println(DateUtils.month(new Date()));//9System.out.println(DateUtils.day(new Date()));//6System.out.println(DateUtils.hour(new Date()));//16System.out.println(DateUtils.minute(new Date()));//20System.out.println(DateUtils.second(new Date()));//21System.out.println(DateUtils.millisecond(new Date()));//98 写完才发现没啥用，一个小小的功能写个博客浪费时间…]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>工具类</tag>
        <tag>Thymeleaf</tag>
        <tag>时间</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql中replace into的用法]]></title>
    <url>%2F2019%2F09%2F04%2Fmysql%E4%B8%ADreplace-into%E7%9A%84%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[replace into 跟 insert 功能类似，不同点在于：replace into 首先尝试插入数据到表中， 1. 如果发现表中已经有此行数据（根据主键或者唯一索引判断）则先删除此行数据，然后插入新的数据。 2. 否则，直接插入新数据。 要注意的是：插入数据的表必须有主键或者是唯一索引！否则的话，replace into 会直接插入数据，这将导致表中出现重复的数据。 MySQL replace into 有三种形式： replace into tbl_name(col_name, ...) values(...) replace into tbl_name(col_name, ...) select ... replace into tbl_name set col_name=value, ... 第一种形式类似于insert into的用法 第二种replace select的用法也类似于insert select，这种用法并不一定要求列名匹配，事实上，MYSQL甚至不关心select返回的列名，它需要的是列的位置。例如，replace into tb1( name, title, mood) select rname, rtitle, rmood from tb2;这个例子使用replace into从tb2中将所有数据导入tb1中。 第三种replace set用法类似于update set用法，使用一个例如“SET col_name = col_name + 1”的赋值，则对位于右侧的列名称的引用会被作为DEFAULT(col_name)处理。因此，该赋值相当于SET col_name = DEFAULT(col_name) + 1。 前两种形式用的多些。其中 “into” 关键字可以省略，不过最好加上 “into”，这样意思更加直观。另外，对于那些没有给予值的列，MySQL 将自动为这些列赋上默认值。]]></content>
      <categories>
        <category>编程</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在lc一年的总结]]></title>
    <url>%2F2019%2F09%2F01%2F%E5%A4%96%E5%8C%85%E5%88%B0lc%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%B9%B4%E7%9A%84%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;时间过得真快，转瞬即逝。回头看好像还是此间少年，转眼就秃头相见。当下有的只是对生活理想一步一步的失望，曾经憧憬当超人，拯救世界遨游在广阔的蓝天，而现在却无法打败这钢筋水泥筑成的吃人理想的怪物。 &emsp;&emsp;18年8月1号来到这，当时签了一年合同，内心无比喜悦。当时想的很简单，就是有稳定的工作安心敲代码就行。刚进来时，还在朋友圈晒，现在想想真可笑；下了班还戴着工牌和刚进来的外协同事坐公交一路聊天假装忘记摘了他，让更多的人看到，现在想想真丢人。有啥好炫耀的呢，或许这是一种悲哀。当时女朋友都说我飘了，唉！从那以后才明白一个道理，引用这里的领导某次开会对职业规划时讲到的一句：低头做事，抬头看人，平头生活。感觉还是很有道理的。做人就是要低调。 &emsp;&emsp;进了项目组，看了一个星期项目，然后让做了一个管理页面，就是对一个表的增删改查，给了三天时间，后来磨磨唧唧的还是在第三天完成了，当时做出来后，自己看着页面一副满足的样子。这可以说是自己做的第一个完整页面，内心也是小兴奋的。这个项目比较久，后端用的struts2+jdbc,前端用的是easyui。 &emsp;&emsp;后来慢慢的这样的页面比较多，也越来越顺手，差不多半天搞定。又过了两个月小组长安排我做了一个有业务流程的功能-资产借用，算是比较复杂的流程了，需求是发起借用单然后逐级审核，最后审核完成接着是发货流程，最后借用到期时再归还回来。借用又分为云中心借用，客户借用，公共库房借用，云中心又分为同一片区和不同片区，流程都不一样。现在想想都怀疑自己当时是怎么搞出来的，接着就是提测修改完善了。 &emsp;&emsp;然后就是过年了，其实过年之前还是挺轻松的，活也不多。所以这期间自学了springboot，python爬虫。学会爬虫后，感觉数据采集的好省事，于是各种页面各种爬。学会了springboot后，也发现这个框架配置的好省事，于是后来在这个框架的基础上做了个小项目，刚开始是想做个博客出来，但是后来慢慢发现做博客没意思，于是改道做出了另一个项目，利用下班以及周末空闲时间不断完善升级，有次脑海里出现一个想法，为了实现，周六搞到凌晨一点多，乐此不疲。这个项目数据都是利用python采集来的，刚开始还是爬网页，后来直接抓取app的数据包，获取json数据进行爬取，不过有些app的json是进行加密传输的，就没有办法爬取了。 &emsp;&emsp;这一年是第一个带薪的年假，一切都是那么的新鲜，充满了激情，斗志昂扬，这是工作，另一边爱情就没那么顺了… &emsp;&emsp;年后上班，部门竞标一个香港的项目，于是封闭开发，我和另一个外协的同事负责接口的开发，自己拉了一个分支，创个项目，这个接口和平常写的提供数据的接口有些不一样，这个接口是携带信息去增删改某个数据，比如有个接口是这样的，携带登录信息去登陆目标网站然后执行增加或者查询操作，再返回一些信息这个接口操作的目标网站是国外做f5负载均衡的网站。差不多一两个月后迎来了lc新财年，部门业务做了调整，我们从主要开发到主要运维，主要业务也是负责部署和维护，主要处理现场的问题，有需求就开发，刚开始比较忙，一边开发一遍处理现场各种问题，后来新来了一些实习生组内也分了两组，运维和开发，我分到了开发。不过平时还是会解决一些现场的问题。也正是在这段时间学会了linux的使用，激动不已，后来在qq空间看见腾讯云促销活动，便宜的服务器10块钱一个月，2G内存，1G带宽10G硬盘，自己买来瞎捯饬，已经很完美了，于是买了两个月的。linux是centos7.0版本的，上面啥软件也没有，自己百度着安装各种环境、软件，jdk、redis、mysql、tomcat、nginx等等，于是把自己的小项目部署了上去，完美运行，更是激动不已。于是不断的爱上了linux，如果把windowsserver比作啤酒的话，那么linux就是白酒，浓郁而深沉。 &emsp;&emsp;工作上就是这样快速的推动着。在这里工作的感受还是不错的，也没有网上说的那种对外包的歧视，领导员工之间都很和睦，外协和正式员工之间也没啥区别。不过要说羡慕倒是有一点的，比如18年8月份和我时间差不几天，一同进来的正式实习生，现在已经带领着今年新来的实习生做项目了，而我们外协的还是写着基础的代码，升是升不上去的毕竟不是正式的员工，属于外协人员。所以每每想到这就不想做外包了，想找一家公司，进一个团队，参与一个新项目，从头到尾的做一遍，职位不断的晋升…这也许就是外协人员的悲哀吧。同一起点，不同的天花板高度。不过对于非本科的程序员来说，前两年在外包公司积累经验，做跳板，也是不错的选择，但是千万别适应了外包的悠闲，“温水煮青蛙”般麻木下去，那样失去生活斗志，没有了对未来的憧憬，活着还有什么意义，人就要往高处走，勇攀高峰（高峰？这里有个同事就叫高峰，linux玩的很厉害，大神）。 &emsp;&emsp;在这工作一年多，积累的经验也是不少的。首先，组长分配任务时，一定要重复一遍需求，防止出现偏差。分配完，无论什么情况都要抓紧完成，不管组长给你多长时，尽早完成是有很多好处的，至少到最后不会因为偏差或其他原因耽误交付时间。然后就是接手一个新项目，一定要尽快搞清业务逻辑，搞清楚都是是干啥的，不要出现都接手项目好几个月了，一些业务、一些表数据是干啥的都还不知道，这也是非常重要的一点。其次就是要学习项目中先进的技术点，善于总结项目中遇到的障碍或解决错误的过程，不积跬步无以至千里，知识经验都是一点一点积累起来的。 &emsp;&emsp;今年（19年）8月份，合同正好到期了，本想着要离职，自己找家公司的，但是7月份做完的功能，还没开始用，数据正在收集中。预计是8月份用，汇总全国云中心的数据。还有一些其他新分配的任务没有完成，所以就先做着了。另一方面，还是感觉自己的技术很菜，出去怕找不到公司，找到了也怕和上家公司一样活拖欠工资。后来外包老板过来给我又续签了两年。虽然签两年但我也不会真的坐满这么长时间。那样的话，自己的技术可能不会提升太多，毕竟在这个项目上开发一年多了，而且项目用的也不是啥新潮技术，所以趁年轻多跳槽，毕竟现在年轻就是资本，要不断提升自己，让自己更有价值。 &emsp;&emsp;最后介绍下上文中提到的我做的项目，项目涉及的技术：springboot、mybatis、bootstrap、thymeleaf作为整体架构,mysql、redis作为存储,springSecurity作为权限控制,jQuery写js，echarts做的图表，还有一些其他js工具。部署用的linux服务器，利用nginx、tomcat和nginx做的负载均衡。用github托管代码，数据来源靠python爬取。项目分为两个版本（不多赘述），整体感觉还是很简单的。功能就是可以浏览图片视频小说，全站多处有广告位，广告信息缓存在redis中，广告设计合理，并不影响用户体验。用户分为会员和普通用户，目前会员是全站免广告的。后台利用websocket可以向在线用户推送消息，站点顶部也有消息滚动提示栏，用户首次打开网站也会有公告模态框弹出，值得后端开发为主的我骄傲的是网站做成了响应式的，手机电脑全兼容，这要感谢伟大的bootstrap前端框架，用起来非常方便，也要感谢中文bootstrap网站文档的支持，很棒。]]></content>
      <categories>
        <category>生活</category>
        <category>总结</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[惨痛的教训]]></title>
    <url>%2F2019%2F08%2F26%2F%E6%83%A8%E7%97%9B%E7%9A%84%E6%95%99%E8%AE%AD%2F</url>
    <content type="text"><![CDATA[教训是惨痛的！ &emsp;&emsp;以后晚6点以后千万别喝咖啡，或其他提神饮品。因为教训是惨痛的。&emsp;&emsp;昨晚吃完饭，感觉那家餐厅的咖啡很浓郁，就忍不住多喝了几杯，大概四杯(自助餐厅)。对于咖啡我还停留在，之前买的雀巢咖啡上，那种咖啡喝了也不怎么提神，晚上喝照样呼呼大睡。但是这次不一样，在那家餐厅吃过饭后回家，还没感觉到什么，到点就放下手机睡觉了，但是后劲来了，不知怎么的就醒了。看下时间才11点多。怎么也睡不着，于是就玩手机，心想玩会手机会困吧。但是玩了近一个小时，仍未有困意，就这样磨磨唧唧的到了四点半左右才睡着，早晨被7点的闹钟吵醒，那叫一个困。难受至极，托着没有灵魂的身躯来到公司，也是一副无精打采的样子。看来睡眠不足真的不行，或许自己锻炼也欠佳。&emsp;&emsp;所以给自己定下一个规定，以后晚上早睡，不喝提神饮品，保证充足的睡眠。]]></content>
      <categories>
        <category>生活</category>
        <category>日常</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用python3对某网站进行批量注册的技术分析]]></title>
    <url>%2F2019%2F08%2F17%2F%E5%88%A9%E7%94%A8python3%E5%AF%B9%E6%9F%90%E7%BD%91%E7%AB%99%E8%BF%9B%E8%A1%8C%E6%89%B9%E9%87%8F%E6%B3%A8%E5%86%8C%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[问题来源于实践，实践是检验真理的唯一标准 分析执行今日正浏览借鉴别人网站的长处时，发现一站点注册界面没有加验证操作。于是F12，经过再次注册，梳理了注册的整个流程。于是打开PyCharm，代码一顿撸。 发现把浏览器中的头信息全抓过来，换成随机的用户名密码邮箱，发送post请求后，返回的是500。不解，深入研究后发现每次请求返回的500信息页面中，注册表单有个隐藏input输入框，并且名称很可疑，竟然叫_token，而且赋了value值。 想必这就是每次注册不能一样的token信息吧，于是换在头信息和注册form表单提交信息中，再次请求，发现是可行的，返回了{“result”:true,”data”:””}信息，到页面登陆也是ok的。接着再请求一次就是返回的500了，而且返回的500页面，input的value值也更新了，于是想，能不能利用爬虫把这500页面的input值获取，放到新的注册接口中请求中在此注册呢，于是代码又是一顿撸。获取token—&gt;更新token信息—&gt;请求注册接口。最外层加了个for循环，循环100次，也成功注册了100个账号。页面随便取出一个账号登陆也没毛病 总结积累 通过这次的批量请求接口并且注册成功的小案例，我们不难发现。一个没有验证码的注册接口，或者一个后台没有限制ip请求次数的网站是多么的危险，轻则生成无数垃圾用户数据，重则可能就会造成数据库的崩溃，进而整个网站的崩溃。 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134from urllib import requestimport requestsimport random, stringfrom bs4 import BeautifulSoupurl = "http://promo.v2rty.xyz/json_register"headers = &#123; 'Accept': 'application/json, text/javascript, */*; q=0.01', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.9', 'Connection': 'keep-alive', 'Content-Length': '170', 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8', 'Cookie': '__cfduid=d20ad5a1e337b628e2b7a31b2f8cc20831566037397; _ga=GA1.2.198601284.1566037407; _gid=GA1.2.1940824762.1566037407; __tawkuuid=e::promo.v2rty.xyz::OnkwncKyZiOeRRGLJXLwct9mBhRoEvZTVJryyTgUnaJh+AD6MBlGnWKk+DRAJ/qx::2; agent=eyJpdiI6ImNnbzV1c1l0dU9GNmpac3hLS0doUkE9PSIsInZhbHVlIjoicWlIakM4SCtZNHQ0RVdzVHBZUVNlRTZtbUF0VWJNZ3MxODNFTjlvM2hOWT0iLCJtYWMiOiI4NTAzM2EwMGUwMGI3MmU5ODRkNWU5NDUzYzA5YjI2MWM0Y2M5MjIyNTQ1MmY4NzNhNzkwYThmNWFlYTQ0NTE3In0%3D; VIEW_PLAY_PAGE_VIDEO_IDS=eyJpdiI6IlNMQWpMdWpTd2VUSlRLWnArMW9cL2NRPT0iLCJ2YWx1ZSI6IndJK2pDcGMyQVNNTkJHbFk1Rjg3a3BINjdVQk5sRlwvcnFlam5LdmZnWjRnPSIsIm1hYyI6IjYzYTZhNGNjNDg2MzE2MjY0MzBlNWEzZTNkZGZlMDhhMTFjNDFmZDU5MzE5NWExZDgxZWRmNjAxMjFkMDZiMjQifQ%3D%3D; font_loginName=; font_loginPwd=; XSRF-TOKEN=eyJpdiI6IlI0RjY2eDU4K1AzRmY0N0tiOFQrQkE9PSIsInZhbHVlIjoiMW1KMW1UY1RIVFVxcENqenkzK3J0UEt4eFhRd25RdE5BZ0YwMTZBVkFmbTJHbnhhclgwSDArc0JReHUwQml4VGxJbk05dG1NWGNyK0FlYnVONk9JUEE9PSIsIm1hYyI6IjUxYjdkY2YwNDc0YTI0YTA2MjUzM2I1YjNhNjQyNDYwYjU3ZDk4MGIwYTM3NjBkY2U5NzQ4NDgyYTk4YzA0MjUifQ%3D%3D; laravel_session=eyJpdiI6IjFmR3ZkTFg2RE9jYzlDa2pSUUFCalE9PSIsInZhbHVlIjoieHk0NVRaYlkzU0ZmUjJvQU5jendQczhmODB4dnBKeURQSnJoWnY0cjlXckkyQlZ6amFXaGl3UGhQYTZTMndtZmxcL2g2N0E5YTJZdzVPTE0wRm1DbzFRPT0iLCJtYWMiOiI3NjI2N2I4Zjg1OTc4MDQ3YmY5YTViMDJjN2NiMjdkZmExZjM0MzZiMmNiZTAwMGNhZDJjMmMyZDg5ZWVhNjNiIn0%3D; _gat=1; TawkConnectionTime=0', 'Host': 'promo.v2rty.xyz', 'Origin': 'http://promo.v2rty.xyz', 'Referer': 'http://promo.v2rty.xyz/', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0', 'X-CSRF-TOKEN': 'XjrNNdCe9dMyeH67Q7jPInGIak8ovSW9R8dtv3wa', 'X-Requested-With': 'XMLHttpRequest'&#125;def getToken(data): s = requests.session() login = s.post(url, data=data, headers=headers) soup = BeautifulSoup(login.text, 'html.parser') find_all = soup.find_all(name='div', attrs=&#123;'class': 'xingyu-search'&#125;)[0]('input')[0]["value"] print("login:" + find_all) return find_all # print(login.text)# 不知道为啥首页的token信息不能用来注册def getInToken(): get = requests.get('http://promo.v2rty.xyz/') soup = BeautifulSoup(get.text, 'html.parser') find_all = soup.find_all(name='div', attrs=&#123;'class': 'xingyu-search'&#125;)[0]('input')[0]["value"] print("index:" + find_all) return find_alldef reg(data, endHaders): s = requests.session() login = s.post(url, data=data, headers=endHaders) # 发送登录信息，返回响应信息（包含cookie） print(login.text)# 随机生成用户名、密码、邮箱def getData(): # num的值为[a-zA-Z0-9] num = string.ascii_letters + string.digits name = "".join(random.sample(num, random.randint(4, 9))) pwd = "".join(random.sample(num, random.randint(6, 16))) em = "".join(random.sample(num, random.randint(6, 16))) malist = ["@qq.com", "@163.com", "@126.com", "@gmail.com"] mailend = random.sample(malist, 1)[0] email = "&#123;&#125;&#123;&#125;".format(em, mailend) data = &#123;'_token': 'XjrNNdCe9dMyeH67Q7jPInGIak8ovSW9R8dtv3wa', 'register_region': 'PC', "name": name, "password": pwd, "password_confirmation": pwd, "email": email, "sex": "1", "remember": "on" &#125; return datadef getEndData(tokrn): num = string.ascii_letters + string.digits name = "".join(random.sample(num, random.randint(4, 9))) pwd = "".join(random.sample(num, random.randint(6, 16))) em = "".join(random.sample(num, random.randint(6, 16))) malist = ["@qq.com", "@163.com", "@126.com", "@gmail.com"] mailend = random.sample(malist, 1)[0] email = "&#123;&#125;&#123;&#125;".format(em, mailend) print("name：" + name + "------" + "pwd：" + pwd + "------" + "email：" + email) data = &#123;'_token': tokrn, 'register_region': 'PC', "name": name, "password": pwd, "password_confirmation": pwd, "email": email, "sex": "1", "remember": "on" &#125; return datadef getEndHaders(token): headers = &#123; 'Accept': 'application/json, text/javascript, */*; q=0.01', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.9', 'Connection': 'keep-alive', 'Content-Length': '170', 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8', 'Cookie': '__cfduid=d20ad5a1e337b628e2b7a31b2f8cc20831566037397; _ga=GA1.2.198601284.1566037407; _gid=GA1.2.1940824762.1566037407; __tawkuuid=e::promo.v2rty.xyz::OnkwncKyZiOeRRGLJXLwct9mBhRoEvZTVJryyTgUnaJh+AD6MBlGnWKk+DRAJ/qx::2; agent=eyJpdiI6ImNnbzV1c1l0dU9GNmpac3hLS0doUkE9PSIsInZhbHVlIjoicWlIakM4SCtZNHQ0RVdzVHBZUVNlRTZtbUF0VWJNZ3MxODNFTjlvM2hOWT0iLCJtYWMiOiI4NTAzM2EwMGUwMGI3MmU5ODRkNWU5NDUzYzA5YjI2MWM0Y2M5MjIyNTQ1MmY4NzNhNzkwYThmNWFlYTQ0NTE3In0%3D; VIEW_PLAY_PAGE_VIDEO_IDS=eyJpdiI6IlNMQWpMdWpTd2VUSlRLWnArMW9cL2NRPT0iLCJ2YWx1ZSI6IndJK2pDcGMyQVNNTkJHbFk1Rjg3a3BINjdVQk5sRlwvcnFlam5LdmZnWjRnPSIsIm1hYyI6IjYzYTZhNGNjNDg2MzE2MjY0MzBlNWEzZTNkZGZlMDhhMTFjNDFmZDU5MzE5NWExZDgxZWRmNjAxMjFkMDZiMjQifQ%3D%3D; font_loginName=; font_loginPwd=; XSRF-TOKEN=eyJpdiI6IlI0RjY2eDU4K1AzRmY0N0tiOFQrQkE9PSIsInZhbHVlIjoiMW1KMW1UY1RIVFVxcENqenkzK3J0UEt4eFhRd25RdE5BZ0YwMTZBVkFmbTJHbnhhclgwSDArc0JReHUwQml4VGxJbk05dG1NWGNyK0FlYnVONk9JUEE9PSIsIm1hYyI6IjUxYjdkY2YwNDc0YTI0YTA2MjUzM2I1YjNhNjQyNDYwYjU3ZDk4MGIwYTM3NjBkY2U5NzQ4NDgyYTk4YzA0MjUifQ%3D%3D; laravel_session=eyJpdiI6IjFmR3ZkTFg2RE9jYzlDa2pSUUFCalE9PSIsInZhbHVlIjoieHk0NVRaYlkzU0ZmUjJvQU5jendQczhmODB4dnBKeURQSnJoWnY0cjlXckkyQlZ6amFXaGl3UGhQYTZTMndtZmxcL2g2N0E5YTJZdzVPTE0wRm1DbzFRPT0iLCJtYWMiOiI3NjI2N2I4Zjg1OTc4MDQ3YmY5YTViMDJjN2NiMjdkZmExZjM0MzZiMmNiZTAwMGNhZDJjMmMyZDg5ZWVhNjNiIn0%3D; _gat=1; TawkConnectionTime=0', 'Host': 'promo.v2rty.xyz', 'Origin': 'http://promo.v2rty.xyz', 'Referer': 'http://promo.v2rty.xyz/', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0', 'X-CSRF-TOKEN': token, 'X-Requested-With': 'XMLHttpRequest' &#125; return headers# 此网页每次注册后if __name__ == "__main__": for i in range(100): # 获取随机生成的用户名密码邮箱，用于注册获取token信息 data = getData() # 首次会注册失败但是会有token信息，此处获取token信息 token = getToken(data) # 注册信息携带最新的token endData = getEndData(token) # 头信息携带最新的token endHaders = getEndHaders(token) # 进行注册操作 reg(endData, endHaders)]]></content>
      <categories>
        <category>编程</category>
        <category>安全</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>模拟注册</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将springboot项目打包成war包和利用redis实现session共享]]></title>
    <url>%2F2019%2F08%2F15%2F%E5%B0%86springboot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90war%E5%8C%85%E5%92%8C%E5%88%A9%E7%94%A8redis%E5%AE%9E%E7%8E%B0session%E5%85%B1%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[springboot项目有内置的服务，可直接打成jar包，java -jar xxx.jar运行就可。但是想要用nginx+tomcat做个集群利用jar好像就不太方便了。所以需求就来了：打war包、tomcat间session共享 修改打包形式在pom.xml里设置 &lt;packaging&gt;war&lt;/packaging&gt; 在pom.xml里找到spring-boot-starter-web依赖节点，在其中添加如下代码1234567891011&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;!-- 移除嵌入式tomcat插件 --&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; 添加servlet-api的依赖，下面两种方式都可以，任选其一 第一种123456&lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt; 第二种123456&lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt; &lt;artifactId&gt;tomcat-servlet-api&lt;/artifactId&gt; &lt;version&gt;8.0.36&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt; 修改启动类，并重写初始化方法我们需要类似于web.xml的配置方式来启动spring上下文了，在Application类的同级目录下添加一个SpringBootStartApplication类，其代码如下: 1234567891011/** * 修改启动类，继承 SpringBootServletInitializer 并重写 configure 方法 */public class SpringBootStartApplication extends SpringBootServletInitializer &#123; @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123; // 注意这里要指向原先用main方法执行的Application启动类 return builder.sources(Application.class); &#125;&#125; 针对有websocket功能的注释掉WebSocketConfig.java(websocket配置类)中的bean(有的说只需注释掉@bean这行就可以，未测试)1234/*@Beanpublic ServerEndpointExporter serverEndpointExporter() &#123; return new ServerEndpointExporter();&#125;*/ pom添加依赖jar包123456&lt;dependency&gt; &lt;groupId&gt;javax&lt;/groupId&gt; &lt;artifactId&gt;javaee-api&lt;/artifactId&gt; &lt;version&gt;7.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt; 打包部署在项目根目录下（即包含pom.xml的目录），在命令行里输入：mvn clean package -Dmaven.test.skip=true即可， 等待打包完成，出现[INFO] BUILD SUCCESS即为打包成功。然后把target目录下的war包放到tomcat的webapps目录下，启动tomcat，即可自动解压部署。 最后在浏览器中输入http://localhost:\[端口号\]/\[打包项目名\]/ 注：项目配置文件端口和tomcat端口可不需一致。多次试验，事实证明打成war包，配置文件里的端口会失效，会直接用tomcat设置的端口，所以配置文件的端口是多少都不影响 发布成功 多tomcat设置session共享方法 导入依赖12345678910&lt;dependency&gt; &lt;groupId&gt;org.springframework.session&lt;/groupId&gt; &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--如果已导入redis的依赖可不用导入下面的依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt; application.yml中设置session存储方式spring.session.store-type=redis 然后为主类（启动类）添加 @EnableRedisHttpSession 注解 java命令直接运行jar包方式如果java定义了jar包的main class入口，则使用如下命令java -jar myjar.jar 如果Java没有定义jar的main class入口，则使用如下命令java -cp myjar.jar com.example.MainClass]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式详解]]></title>
    <url>%2F2019%2F08%2F06%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[什么是正则表达式? 正则表达式是一组由字母和符号组成的特殊文本, 它可以用来从文本中找出满足你想要的格式的句子.一个正则表达式是在一个主体字符串中从左到右匹配字符串时的一种样式. “Regular expression”这个词比较拗口, 我们常使用缩写的术语”regex”或”regexp”. 正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等. 想象你正在写一个应用, 然后你想设定一个用户命名的规则, 让用户名包含字符,数字,下划线和连字符,以及限制字符的个数,好让名字看起来没那么丑. 我们使用以下正则表达式来验证一个用户名: 以上的正则表达式可以接受 john_doe, jo-hn_doe, john12_as. 但不匹配Jo, 因为它包含了大写的字母而且太短了. 基本匹配正则表达式其实就是在执行搜索时的格式, 它由一些字母和数字组合而成.例如: 一个正则表达式 the, 它表示一个规则: 由字母t开始,接着是h,再接着是e. "the" => The fat cat sat on the mat. 在线练习 正则表达式123匹配字符串123. 它逐个字符的与输入的正则表达式做比较. 正则表达式是大小写敏感的, 所以The不会匹配the. "The" => The fat cat sat on the mat. 在线练习 元字符正则表达式主要依赖于元字符.元字符不代表他们本身的字面意思, 他们都有特殊的含义. 一些元字符写在方括号中的时候有一些特殊的意思. 以下是一些元字符的介绍: 元字符 描述 . 句号匹配任意单个字符除了换行符. [ ] 字符种类. 匹配方括号内的任意字符. [^ ] 否定的字符种类. 匹配除了方括号里的任意字符 * 匹配&gt;=0个重复的在*号之前的字符. + 匹配&gt;=1个重复的+号前的字符. ? 标记?之前的字符为可选. {n,m} 匹配num个大括号之前的字符 (n &lt;= num &lt;= m). (xyz) 字符集, 匹配与 xyz 完全相等的字符串. &#124; 或运算符,匹配符号前或后的字符. &#92; 转义字符,用于匹配一些保留的字符 [ ] ( ) { } . * + ? ^ $ \ &#124; ^ 从开始行开始匹配. $ 从末端开始匹配. 点运算符 ..是元字符中最简单的例子..匹配任意单个字符, 但不匹配换行符.例如, 表达式.ar匹配一个任意字符后面跟着是a和r的字符串. ".ar" => The car parked in the garage. 在线练习 字符集字符集也叫做字符类.方括号用来指定一个字符集.在方括号中使用连字符来指定字符集的范围.在方括号中的字符集不关心顺序.例如, 表达式[Tt]he 匹配 the 和 The. "[Tt]he" => The car parked in the garage. 在线练习 方括号的句号就表示句号.表达式 ar[.] 匹配 ar.字符串 "ar[.]" => A garage is a good place to park a car. 在线练习 否定字符集一般来说 ^ 表示一个字符串的开头, 但它用在一个方括号的开头的时候, 它表示这个字符集是否定的.例如, 表达式[^c]ar 匹配一个后面跟着ar的除了c的任意字符. "[^c]ar" => The car parked in the garage. 在线练习 重复次数后面跟着元字符 +, * or ? 的, 用来指定匹配子模式的次数.这些元字符在不同的情况下有着不同的意思. * 号*号匹配 在*之前的字符出现大于等于0次.例如, 表达式 a* 匹配以0或更多个a开头的字符, 因为有0个这个条件, 其实也就匹配了所有的字符. 表达式[a-z]* 匹配一个行中所有以小写字母开头的字符串. "[a-z]*" => The car parked in the garage #21. 在线练习 *字符和.字符搭配可以匹配所有的字符.*.*和表示匹配空格的符号\s连起来用, 如表达式\s*cat\s*匹配0或更多个空格开头和0或更多个空格结尾的cat字符串. "\s*cat\s*" => The fat cat sat on the concatenation. 在线练习 + 号+号匹配+号之前的字符出现 &gt;=1 次.例如表达式c.+t 匹配以首字母c开头以t结尾,中间跟着任意个字符的字符串. "c.+t" => The fat cat sat on the mat. 在线练习 ? 号在正则表达式中元字符 ? 标记在符号前面的字符为可选, 即出现 0 或 1 次.例如, 表达式 [T]?he 匹配字符串 he 和 The. "[T]he" => The car is parked in the garage. 在线练习 "[T]?he" => The car is parked in the garage. 在线练习 {} 号在正则表达式中 {} 是一个量词, 常用来一个或一组字符可以重复出现的次数.例如, 表达式 [0-9]{2,3} 匹配最少 2 位最多 3 位 0~9 的数字. "[0-9]{2,3}" => The number was 9.9997 but we rounded it off to 10.0. 在线练习 我们可以省略第二个参数.例如, [0-9]{2,} 匹配至少两位 0~9 的数字. "[0-9]{2,}" => The number was 9.9997 but we rounded it off to 10.0. 在线练习 如果逗号也省略掉则表示重复固定的次数.例如, [0-9]{3} 匹配3位数字 "[0-9]{3}" => The number was 9.9997 but we rounded it off to 10.0. 在线练习 (...) 特征标群特征标群是一组写在 (...) 中的子模式. 例如之前说的 {} 是用来表示前面一个字符出现指定次数. 但如果在 {} 前加入特征标群则表示整个标群内的字符重复 N 次. 例如, 表达式 (ab)* 匹配连续出现 0 或更多个 ab. 我们还可以在 () 中用或字符 | 表示或. 例如, (c|g|p)ar 匹配 car 或 gar 或 par. "(c|g|p)ar" => The car is parked in the garage. 在线练习 | 或运算符或运算符就表示或, 用作判断条件. 例如 (T|t)he|car 匹配 (T|t)he 或 car. "(T|t)he|car" => The car is parked in the garage. 在线练习 转码特殊字符反斜线 \ 在表达式中用于转码紧跟其后的字符. 用于指定 { } [ ] / \ + * . $ ^ | ? 这些特殊字符. 如果想要匹配这些特殊字符则要在其前面加上反斜线 \. 例如 . 是用来匹配除换行符外的所有字符的. 如果想要匹配句子中的 . 则要写成 \. 以下这个例子 \.?是选择性匹配. "(f|c|m)at\.?" => The fat cat sat on the mat. 在线练习 锚点在正则表达式中, 想要匹配指定开头或结尾的字符串就要使用到锚点. ^ 指定开头, $ 指定结尾. ^ 号^ 用来检查匹配的字符串是否在所匹配字符串的开头. 例如, 在 abc 中使用表达式 ^a 会得到结果 a. 但如果使用 ^b 将匹配不到任何结果. 因为在字符串 abc 中并不是以 b 开头. 例如, ^(T|t)he 匹配以 The 或 the 开头的字符串. "(T|t)he" => The car is parked in the garage. 在线练习 "^(T|t)he" => The car is parked in the garage. 在线练习 $ 号同理于 ^ 号, $ 号用来匹配字符是否是最后一个. 例如, (at\.)$ 匹配以 at. 结尾的字符串. "(at\.)" => The fat cat. sat. on the mat. 在线练习 "(at\.)$" => The fat cat. sat. on the mat. 在线练习 简写字符集正则表达式提供一些常用的字符集简写. 如下: 简写 描述 . 除换行符外的所有字符 \w 匹配所有字母数字, 等同于 [a-zA-Z0-9_] \W 匹配所有非字母数字, 即符号, 等同于: [^\w] \d 匹配数字: [0-9] \D 匹配非数字: [^\d] \s 匹配所有空格字符, 等同于: [\t\n\f\r\p{Z}] \S 匹配所有非空格字符: [^\s] \f 匹配一个换页符 \n 匹配一个换行符 \r 匹配一个回车符 \t 匹配一个制表符 \v 匹配一个垂直制表符 \p 匹配 CR/LF (等同于 \r\n)，用来匹配 DOS 行终止符 零宽度断言(前后预查)先行断言和后发断言都属于非捕获簇(不捕获文本 ，也不针对组合计进行计数).先行断言用于判断所匹配的格式是否在另一个确定的格式之前, 匹配结果不包含该确定格式(仅作为约束). 例如, 我们想要获得所有跟在 $ 符号后的数字, 我们可以使用正后发断言 (?&lt;=\$)[0-9\.]*.这个表达式匹配 $ 开头, 之后跟着 0,1,2,3,4,5,6,7,8,9,. 这些字符可以出现大于等于 0 次. 零宽度断言如下: 符号 描述 ?= 正先行断言-存在 ?! 负先行断言-排除 ?&lt;= 正后发断言-存在 ?&lt;! 负后发断言-排除 ?=... 正先行断言?=... 正先行断言, 表示第一部分表达式之后必须跟着 ?=...定义的表达式. 返回结果只包含满足匹配条件的第一部分表达式.定义一个正先行断言要使用 (). 在括号内部使用一个问号和等号: (?=...). 正先行断言的内容写在括号中的等号后面.例如, 表达式 (T|t)he(?=\sfat) 匹配 The 和 the, 在括号中我们又定义了正先行断言 (?=\sfat) ,即 The 和 the 后面紧跟着 (空格)fat. "(T|t)he(?=\sfat)" => The fat cat sat on the mat. 在线练习 ?!... 负先行断言负先行断言 ?! 用于筛选所有匹配结果, 筛选条件为 其后不跟随着断言中定义的格式.正先行断言 定义和 负先行断言 一样, 区别就是 = 替换成 ! 也就是 (?!...). 表达式 (T|t)he(?!\sfat) 匹配 The 和 the, 且其后不跟着 (空格)fat. "(T|t)he(?!\sfat)" => The fat cat sat on the mat. 在线练习 ?&lt;= ... 正后发断言正后发断言 记作(?&lt;=...) 用于筛选所有匹配结果, 筛选条件为 其前跟随着断言中定义的格式.例如, 表达式 (?&lt;=(T|t)he\s)(fat|mat) 匹配 fat 和 mat, 且其前跟着 The 或 the. "(? 在线练习 ?&lt;!... 负后发断言负后发断言 记作 (?&lt;!...) 用于筛选所有匹配结果, 筛选条件为 其前不跟随着断言中定义的格式.例如, 表达式 (?&lt;!(T|t)he\s)(cat) 匹配 cat, 且其前不跟着 The 或 the. "(?&lt;!(T|t)he\s)(cat)" => The cat sat on cat. 在线练习 标志标志也叫模式修正符, 因为它可以用来修改表达式的搜索结果.这些标志可以任意的组合使用, 它也是整个正则表达式的一部分. 标志 描述 i 忽略大小写. g 全局搜索. m 多行的: 锚点元字符 ^ $ 工作范围在每行的起始. 忽略大小写 (Case Insensitive)修饰语 i 用于忽略大小写.例如, 表达式 /The/gi 表示在全局搜索 The, 在后面的 i 将其条件修改为忽略大小写, 则变成搜索 the 和 The, g 表示全局搜索. "The" => The fat cat sat on the mat. 在线练习 "/The/gi" => The fat cat sat on the mat. 在线练习 全局搜索 (Global search)修饰符 g 常用于执行一个全局搜索匹配, 即(不仅仅返回第一个匹配的, 而是返回全部).例如, 表达式 /.(at)/g 表示搜索 任意字符(除了换行) + at, 并返回全部结果. "/.(at)/" => The fat cat sat on the mat. 在线练习 "/.(at)/g" => The fat cat sat on the mat. 在线练习 多行修饰符 (Multiline)多行修饰符 m 常用于执行一个多行匹配. 像之前介绍的 (^,$) 用于检查格式是否是在待检测字符串的开头或结尾. 但我们如果想要它在每行的开头和结尾生效, 我们需要用到多行修饰符 m. 例如, 表达式 /at(.)?$/gm 表示小写字符 a 后跟小写字符 t , 末尾可选除换行符外任意字符. 根据 m 修饰符, 现在表达式匹配每行的结尾. "/.at(.)?$/" => The fat cat sat on the mat. 在线练习 "/.at(.)?$/gm" => The fat cat sat on the mat. 在线练习 贪婪匹配与惰性匹配 (Greedy vs lazy matching)正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 ? 将贪婪匹配模式转化为惰性匹配模式。 "/(.*at)/" => The fat cat sat on the mat. 在线练习 "/(.*?at)/" => The fat cat sat on the mat. 在线练习 参考文献转载自github：ziishaned的learn-regex一文]]></content>
      <categories>
        <category>编程</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对某小视频APP资源的爬取]]></title>
    <url>%2F2019%2F08%2F04%2Fxxx%2F</url>
    <content type="text"><![CDATA[Enter password to read Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>编程</category>
        <category>安全</category>
      </categories>
      <tags>
        <tag>数据处理</tag>
        <tag>爬虫</tag>
        <tag>加密文章</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql删除多余重复数据只保留一条数据]]></title>
    <url>%2F2019%2F07%2F29%2Fmysql%E5%88%A0%E9%99%A4%E5%A4%9A%E4%BD%99%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE%E5%8F%AA%E4%BF%9D%E7%95%99%E4%B8%80%E6%9D%A1%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[问题的根源都来自现实生活中。就在周末无聊从网上爬数据插入到数据库时，发现有些数据是重复的，而且重复了五六次。肯定不能忍。于是查询资料，sql骚操作一番，最后完美解决。 循序渐进，逐步开始 先展示下示例user表数据 id username password ctime 1 tom 123456 2019-07-29 2 jack 123456 2019-07-21 3 tom 123456 2019-07-29 4 admin admin 2019-01-01 5 tom 123456 2019-07-29 6 jack 123456 2019-07-21 先把数据进行分组，把有重复数据的组筛选出来1select username,count(1) from user GROUP BY username HAVING count(1) &gt; 1 username count(1) tom 3 jack 2 查询出全部重复数据1select * from user where username in (select username from user group by username having count(1)&gt;1 ) order by username id username password ctime 1 tom 123456 2019-07-29 3 tom 123456 2019-07-29 5 tom 123456 2019-07-29 2 jack 123456 2019-07-21 6 jack 123456 2019-07-21 删除全部重复数据将上面的查询select改为delete会出现如下错误：[Err] 1093 - You can’t specify target table ‘user’ for update in FROM clause原因是：更新这个表的同时又查询了这个表，查询这个表的同时又去更新了这个表，可以理解为死锁。mysql不支持这种更新查询同一张表的操作解决办法：把要更新的几列数据查询出来做为一个第三方表，然后筛选更新。 只保留一条数据删除多余重复数据语句实例1234delete from user where id not in ( select t.minid from (select min(id) as minid from user GROUP BY username) t ) 思路： 按重复字段进行分组，查询出每组最小的id。(语句实例第三行) 把它作为一个临时表进行查询出id。(语句实例第二行) 查询全表把id不在上面两部查询出来的id删掉。(语句实例第一行)]]></content>
      <categories>
        <category>编程</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用浏览器user-agent]]></title>
    <url>%2F2019%2F07%2F23%2F%E5%B8%B8%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8user-agent%2F</url>
    <content type="text"><![CDATA[常用浏览器(PC,移动) user-agent，整理时下流行的浏览器User-Agent大全。之前做爬虫的时候用到过，电脑浏览器也有类似的插件，伪装头信息，伪装成手机端等等。 PC端safari 5.1 – MAC1User-Agent,Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50 safari 5.1 – Windows1User-Agent,Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50 IE 9.01User-Agent,Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; IE 8.01User-Agent,Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0) IE 7.01User-Agent,Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0) IE 6.01User-Agent, Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1) Firefox 4.0.1 – MAC1User-Agent, Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv,2.0.1) Gecko/20100101 Firefox/4.0.1 Firefox 4.0.1 – Windows1User-Agent,Mozilla/5.0 (Windows NT 6.1; rv,2.0.1) Gecko/20100101 Firefox/4.0.1 Opera 11.11 – MAC1User-Agent,Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11 Opera 11.11 – Windows1User-Agent,Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11 Chrome 17.0 – MAC1User-Agent, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11 傲游（Maxthon）1User-Agent, Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0) 腾讯TT1User-Agent, Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; TencentTraveler 4.0) 世界之窗（The World） 2.x1User-Agent, Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1) 世界之窗（The World） 3.x1User-Agent, Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; The World) 搜狗浏览器 1.x1User-Agent, Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0) 360浏览器1User-Agent, Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE) Avant1User-Agent, Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser) Green Browser1User-Agent, Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1) 移动设备端safari iOS 4.33 – iPhone1User-Agent,Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5 safari iOS 4.33 – iPod Touch1User-Agent,Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5 safari iOS 4.33 – iPad1User-Agent,Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5 Android N11User-Agent, Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 Android QQ浏览器 For android1User-Agent, MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 Android Opera Mobile1User-Agent, Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) Presto/2.8.149 Version/11.10 Android Pad Moto Xoom1User-Agent, Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13 BlackBerry1User-Agent, Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+ WebOS HP Touchpad1User-Agent, Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0 Nokia N971User-Agent, Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124 Windows Phone Mango1User-Agent, Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan) UC无1User-Agent, UCWEB7.0.2.37/28/999 UC标准1User-Agent, NOKIA5700/ UCWEB7.0.2.37/28/999 UCOpenwave1User-Agent, Openwave/ UCWEB7.0.2.37/28/999 UC Opera1User-Agent, Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999]]></content>
      <categories>
        <category>编程</category>
        <category>html</category>
      </categories>
      <tags>
        <tag>userAgent</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次失误和git小知识]]></title>
    <url>%2F2019%2F07%2F18%2F%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%A7%E6%84%8F%2F</url>
    <content type="text"><![CDATA[出现的问题&emsp;&emsp;下午时分我正在调代码高亮样式（idea的代码颜色，文章末截图分享），组长让我把上周做好的某功能截个图发给boss，说是文档中用。 &emsp;&emsp;截图那就截图吧，于是在IDEA中切换到那个功能的分支上。切换完成，启动项目，突然报错了，xxx找不到。啥？一脸懵逼的看了下错误信息，定位到文件里，发现少个实体类，不对啊，之前做完功能还测了一遍。都正常啊，怎么会少个实体类呢，内心开始慌了，大boss还等着我的截图呢，尼玛，这边项目都报错了。不过仔细观察后，值得庆幸的是只是少了一个实体类。按数据库的字段加上那个实体类就可以了。要是少个Controller类或者其他业务逻辑类，我看你怎么补回来吧。后来新增了那个缺少的实体类，启动项目，尼玛又报错了，原因是另一个分支的一个导出excel的类文件中报错了，又奇怪了，另一个分支的文件怎么跟着切换分支切过来了。先不管了，先注释掉这个文件中的所有内容，赶紧启动项目截图要紧，boss还等着呢。注释、启动、截图、发送一气呵成。 &emsp;&emsp;在此分析下为啥那个实体类会没了，而且另一个分支的文件怎么会跟着过来。 &emsp;&emsp;第一那个文件没了，我猜想应该是创建完那个实体类后，在idea弹框提示是否增加到本地仓库时，我习惯性的选择了否。 &emsp;&emsp;以至于后来提交更改的内容时，idea不显示不在本地仓库里的文件，只显示更改的文件，于是我也没仔细看，直接提交了，以为万事大吉，就切换到其他分支继续撸代码做其他功能了。 &emsp;&emsp;后来小姐姐在merge我更早的功能分支时，说有冲突，于是我协助来回切换分支解决，可能在那时弄丢了。 &emsp;&emsp;第二另一个分支的文件跟着过来，我猜想也是同样的问题，在那个分支没提交这个增加的文件导致的。后来提交就没有这个情况了。 &emsp;&emsp;所以在此记录下，让自己长长记性。 git相关知识&emsp;&emsp;创建本地仓库—&gt;新建项目—&gt;提交代码到远程仓库&emsp;&emsp;简要流程： git init //初始化仓库 git add .(文件name) //添加文件到本地仓库 git commit -m “first commit” //添加文件描述信息 git remote add origin + 远程仓库地址 //链接远程仓库，创建主分支 git pull –rebase origin master // 把本地仓库的变化连接到远程仓库主分支 git push -u origin master //把本地仓库的文件推送到远程仓库 github上创建repository&emsp;&emsp;很简单，直接在github网站右上角点击加号新建就可以。填入名称、描述、选择是否开源、是否创建README.md文件然后就OK了。 创建本地仓库&emsp;&emsp;选择代码的文件夹 1git init .gitignore文件&emsp;&emsp;若不存在该文件可以用git bash创建该文件 1touch .gitignore &emsp;&emsp;然后就可以在该文件中填入这个目录不需要提交到远程仓库的文件或文件夹。&emsp;&emsp;可以直接填写文件名或者文件夹名，一行一个，也可填写模糊名称，比如： 12345678.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/themes/ 提交代码到本地仓库12git add .git commit -m &quot;提交时的备注&quot; 设置远程仓库地址1git remote add origin https://github.com/wjup/repository名.git &emsp;&emsp;如果出现问题：fatal: remote origin already exists&emsp;&emsp;解决办法如下： 先删除远程 Git 仓库 1git remote rm origin 再添加远程 Git 仓库 1git remote add origin https://github.com/wugenqiang/myblog.git &emsp;&emsp;发现问题成功解决。 &emsp;&emsp;切记！！ &emsp;&emsp;如果在GitHub上创建远程仓库时，勾选了 Initialize this repository with a README这项，导致远程仓库不为空，为了不出现Bug，请先执行下面的远程仓库合并到本地这步，若远程仓库为空，则忽略，直接进行更新到远程仓库操作！ 远程仓库合并到本地1git pull --rebase origin master 更新到远程仓库1git push -u origin master 经本人亲自改调的idea代码样式花里胡哨的，先上截图。有需要的发我邮件吧，发给你]]></content>
      <categories>
        <category>编程</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>失误</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[next主题的简单美化]]></title>
    <url>%2F2019%2F07%2F14%2Fnext%E4%B8%BB%E9%A2%98%E7%9A%84%E7%AE%80%E5%8D%95%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[首先不得不说next挺好看的，但是有些地方我们可以再深入美化下。然后本next主题选用的是Gemini v7.2.0样式，博文为块状显示。所以下面就按照Gemini样式从上到下，由外到内的美化下（不限于美化） 文章置顶文章置顶属于hexo层面，首先需要安装插件插件的github地址：https://github.com/amlove2/hexo-generator-topindex到hexo根执行安装命令 1$ npm install hexo-generator-topindex --save 安装完成后，在文章头部添加top属性，top值越大文章越靠前 12345title: next主题的美化date: 2019-07-13 21:29:55tags: hexocategories: [编程,hexo]top: 1 # 值越大越靠前 这样后就可以置顶文章了，但是不看时间，这篇文章是看不出是置顶文章的，所以要加些样式 themes/hexo-theme-next/layout/_macro/post.swig在&lt;div class=&quot;post-meta&quot;&gt;大约近70行，下添加 12345&#123;% if post.top %&#125; &lt;i class="fa fa-thumb-tack"&gt;&lt;/i&gt; &lt;font color=7D26CD&gt;置顶&lt;/font&gt; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;&#123;% endif %&#125; 文章加密文章加密也属于hexo层面，安装插件插件的github地址：https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md到hexo根执行安装命令 12npm install --save hexo-blog-encrypt或者 yarn add hexo-blog-encrypt (需要安装 Yarn) 首先, 你需要确保你的文章中含有内容（不能为空，或者只包含空格）然后在hexo配置的文件 _config.yml 中启用该插件: 1234# Security##encrypt: enable: true 然后在文章头部添加 1234567title: next主题的美化date: 2019-07-13 21:29:55tags: hexocategories: [编程,hexo]password: 123456 # 该博客加密使用的密码abstract: 改文章存在一定权限 # 该博客的摘要，会显示在博客的列表页message: 请输入密码 # 博客查看时，密码输入框上面的描述性文字 菜单上显示数目在next的主题配置文件中找到下面内容，设置为true即可 123menu_settings: icons: true badges: true # 显示文章数开关 模块圆角化 themes/hexo-theme-next/source/css/_variables/Gemini.styl追加内容 123// 修改主题页面布局为圆角$border-radius-inner = 15px 15px 15px 15px;$border-radius = 15px; 自定义css /themes/hexo-theme-next/source/css/_custom/custom.styl 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// 添加背景图片body &#123; background: url(https://source.unsplash.com/random/1600x900?simple); background-size: cover; background-repeat: no-repeat; background-attachment: fixed; background-position: 50% 50%;&#125;// 修改主体透明度.main-inner &#123; opacity: 0.9;&#125;// 修改菜单栏透明度.header-inner &#123; background-color: rgba(255,255,255,0.9);&#125;#sidebar &#123; border-radius: 15px;&#125;// 标题栏.site-meta &#123; background-image: url(/images/brand.jpg); background-position: 50% 50%; background-size: 100% 100%; opacity: 0.9;&#125;/*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/::-webkit-scrollbar&#123; width: 8px; height: 8px; background-color: rgba(255, 255, 255, 0.2);&#125;/*定义滚动条轨道 内阴影+圆角*/::-webkit-scrollbar-track&#123; -webkit-box-shadow: inset 0 0 8px rgb(1, 64, 118); border-radius: 2px; background-color: rgba(245, 245, 245, 0.2);&#125;/*定义滑块 内阴影+圆角*/::-webkit-scrollbar-thumb&#123; border-radius: 10px; -webkit-box-shadow: inset 0 0 8px #014076; background-color: #555;&#125; 文章内超链接样式更改的链接颜色和选中颜色效果—&gt;https://wjup.top themes/hexo-theme-next/source/css/_common/components/post/post.styl追加内容 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #ff4081; border-bottom: none; // border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #ff92b7; border-bottom: none; // border-bottom: 1px solid #fc6423; &#125;&#125; 网站尾部添加运行时间 themes/hexo-theme-next/layout/_partials/footer.swig在if theme.footer.powered.enable约40行左右，前面追加 123456789101112131415161718&lt;span id="timeDate"&gt;载入天数...&lt;/span&gt;&lt;span id="times"&gt;载入时分秒...&lt;/span&gt;&lt;br&gt;&lt;script&gt; var now = new Date(); function createtime() &#123; var grt= new Date("04/28/2019 13:14:21");//此处修改你的建站时间或者网站上线时间 now.setTime(now.getTime()+250); days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); if(String(hnum).length ==1 )&#123;hnum = "0" + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = "0" + mnum;&#125; seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = "0" + snum;&#125; document.getElementById("timeDate").innerHTML = "本站已安全运行 "+dnum+" 天 "; document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒"; &#125; setInterval("createtime()",250);&lt;/script&gt;]]></content>
      <categories>
        <category>编程</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot2.0集成WebSocket]]></title>
    <url>%2F2019%2F07%2F13%2FSpringBoot2-0%E9%9B%86%E6%88%90WebSocket%2F</url>
    <content type="text"><![CDATA[简单的说WebSocket最大的好处就是：不用重复刷新，就可以实现前后台不断交互 什么是WebSocket? &emsp;&emsp;WebSocket协议是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。 为什么需要 WebSocket？&emsp;&emsp;初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？ &emsp;&emsp;答案很简单，因为 HTTP 协议有一个缺陷：通信只能由客户端发起，HTTP 协议做不到服务器主动向客户端推送信息。&emsp;&emsp;举例来说，我们想要查询当前的排队情况，只能是页面轮询向服务器发出请求，服务器返回查询结果。轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。因此WebSocket 就是这样发明的。 maven依赖1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt; &lt;/dependency&gt; WebSocketConfig&emsp;&emsp;启用WebSocket的支持也是很简单，几句代码搞定 1234567891011121314151617import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.socket.server.standard.ServerEndpointExporter;/** * 开启WebSocket支持 * @author zhengkai */@Configuration public class WebSocketConfig &#123; @Bean public ServerEndpointExporter serverEndpointExporter() &#123; return new ServerEndpointExporter(); &#125; &#125; WebSocketServer&emsp;&emsp;因为WebSocket是类似客户端服务端的形式(采用ws协议)，那么这里的WebSocketServer其实就相当于一个ws协议的Controller&emsp;&emsp;直接@ServerEndpoint(“/websocket”)@Component启用即可，然后在里面实现@OnOpen,@onClose,@onMessage等方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150import java.io.IOException;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.CopyOnWriteArraySet;import javax.websocket.OnClose;import javax.websocket.OnError;import javax.websocket.OnMessage;import javax.websocket.OnOpen;import javax.websocket.Session;import javax.websocket.server.PathParam;import javax.websocket.server.ServerEndpoint;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.softdev.system.likeu.util.ApiReturnUtil;import org.apache.commons.lang3.StringUtils;import org.springframework.stereotype.Component;import cn.hutool.log.Log;import cn.hutool.log.LogFactory;import lombok.extern.slf4j.Slf4j;@ServerEndpoint("/im/&#123;userId&#125;")@Componentpublic class WebSocketServer &#123; static Log log=LogFactory.get(ImController.class); //静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。 private static int onlineCount = 0; //旧：concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。 //private static CopyOnWriteArraySet&lt;ImController&gt; webSocketSet = new CopyOnWriteArraySet&lt;ImController&gt;(); //与某个客户端的连接会话，需要通过它来给客户端发送数据 private Session session; //新：使用map对象，便于根据userId来获取对应的WebSocket private static ConcurrentHashMap&lt;String,ImController&gt; websocketList = new ConcurrentHashMap&lt;&gt;(); //接收sid private String userId=""; /** * 连接建立成功调用的方法*/ @OnOpen public void onOpen(Session session,@PathParam("userId") String userId) &#123; this.session = session; websocketList.put(userId,this); log.info("websocketList-&gt;"+JSON.toJSONString(websocketList)); //webSocketSet.add(this); //加入set中 addOnlineCount(); //在线数加1 log.info("有新窗口开始监听:"+userId+",当前在线人数为" + getOnlineCount()); this.userId=userId; try &#123; sendMessage(JSON.toJSONString(ApiReturnUtil.success("连接成功"))); &#125; catch (IOException e) &#123; log.error("websocket IO异常"); &#125; &#125; /** * 连接关闭调用的方法 */ @OnClose public void onClose() &#123; if(websocketList.get(this.userId)!=null)&#123; websocketList.remove(this.userId); //webSocketSet.remove(this); //从set中删除 subOnlineCount(); //在线数减1 log.info("有一连接关闭！当前在线人数为" + getOnlineCount()); &#125; &#125; /** * 收到客户端消息后调用的方法 * * @param message 客户端发送过来的消息 */ @OnMessage public void onMessage(String message, Session session) &#123; log.info("收到来自窗口"+userId+"的信息:"+message); if(StringUtils.isNotBlank(message))&#123; JSONArray list=JSONArray.parseArray(message); for (int i = 0; i &lt; list.size(); i++) &#123; try &#123; //解析发送的报文 JSONObject object = list.getJSONObject(i); String toUserId=object.getString("toUserId"); String contentText=object.getString("contentText"); object.put("fromUserId",this.userId); //传送给对应用户的websocket if(StringUtils.isNotBlank(toUserId)&amp;&amp;StringUtils.isNotBlank(contentText))&#123; ImController socketx=websocketList.get(toUserId); //需要进行转换，userId if(socketx!=null)&#123; socketx.sendMessage(JSON.toJSONString(ApiReturnUtil.success(object))); //此处可以放置相关业务代码，例如存储到数据库 &#125; &#125; &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; &#125; &#125; /** * * @param session * @param error */ @OnError public void onError(Session session, Throwable error) &#123; log.error("发生错误"); error.printStackTrace(); &#125; /** * 实现服务器主动推送 */ public void sendMessage(String message) throws IOException &#123; this.session.getBasicRemote().sendText(message); &#125; /** * 群发自定义消息 * */ public static void sendInfo(String message,@PathParam("userId") String userId) throws IOException &#123; log.info("推送消息到窗口"+userId+"，推送内容:"+message); for (ImController item : webSocketSet) &#123; try &#123; //这里可以设定只推送给这个sid的，为null则全部推送 if(userId==null) &#123; item.sendMessage(message); &#125;else if(item.userId.equals(userId))&#123; item.sendMessage(message); &#125; &#125; catch (IOException e) &#123; continue; &#125; &#125; &#125; public static synchronized int getOnlineCount() &#123; return onlineCount; &#125; public static synchronized void addOnlineCount() &#123; ImController.onlineCount++; &#125; public static synchronized void subOnlineCount() &#123; ImController.onlineCount--; &#125;&#125; 消息推送&emsp;&emsp;至于推送新信息，可以再自己的Controller写个方法调用WebSocketServer.sendInfo();即可 123456789101112131415161718192021222324@Controller@RequestMapping("/checkcenter")public class CheckCenterController &#123; //页面请求 @GetMapping("/socket/&#123;cid&#125;") public ModelAndView socket(@PathVariable String cid) &#123; ModelAndView mav=new ModelAndView("/socket"); mav.addObject("cid", cid); return mav; &#125; //推送数据接口 @ResponseBody @RequestMapping("/socket/push/&#123;cid&#125;") public ApiReturnObject pushToWeb(@PathVariable String cid,String message) &#123; try &#123; WebSocketServer.sendInfo(message,cid); &#125; catch (IOException e) &#123; e.printStackTrace(); return ApiReturnUtil.error(cid+"#"+e.getMessage()); &#125; return ApiReturnUtil.success(cid); &#125; &#125; 页面发起socket请求&emsp;&emsp;然后在页面用js代码调用socket，当然，太古老的浏览器是不行的，一般新的浏览器或者谷歌浏览器是没问题的。还有一点，记得协议是ws的哦，如果像我这样封装了一些basePath的路径类，可以replace(“http”,“ws”)来替换协议 123456789101112131415161718192021222324252627282930313233343536373839404142var socket;function openSocket() &#123; if(typeof(WebSocket) == "undefined") &#123; console.log("您的浏览器不支持WebSocket"); &#125;else&#123; console.log("您的浏览器支持WebSocket"); //实现化WebSocket对象，指定要连接的服务器地址与端口 建立连接 //等同于socket = new WebSocket("ws://localhost:8888/xxxx/im/25"); //var socketUrl="$&#123;request.contextPath&#125;/im/"+$("#userId").val(); var socketUrl="http://localhost:8888/xxxx/im/"+$("#userId").val(); socketUrl=socketUrl.replace("https","ws").replace("http","ws"); console.log(socketUrl) socket = new WebSocket(socketUrl); //打开事件 socket.onopen = function() &#123; console.log("websocket已打开"); //socket.send("这是来自客户端的消息" + location.href + new Date()); &#125;; //获得消息事件 socket.onmessage = function(msg) &#123; console.log(msg.data); //发现消息进入 开始处理前端触发逻辑 &#125;; //关闭事件 socket.onclose = function() &#123; console.log("websocket已关闭"); &#125;; //发生了错误事件 socket.onerror = function() &#123; console.log("websocket发生了错误"); &#125; &#125;&#125;function sendMessage() &#123; if(typeof(WebSocket) == "undefined") &#123; console.log("您的浏览器不支持WebSocket"); &#125;else &#123; console.log("您的浏览器支持WebSocket"); console.log('[&#123;"toUserId":"'+$("#toUserId").val()+'","contentText":"'+$("#contentText").val()+'"&#125;]'); socket.send('[&#123;"toUserId":"'+$("#toUserId").val()+'","contentText":"'+$("#contentText").val()+'"&#125;]'); &#125;&#125; js获取路径获取主机名1var hostname = location.hostname; 获取端口号1var port = location.port; 获取主机名+端口号1var host = location.host; 访问：172.16.0.1:30/login.html123hostname = 172.16.0.1;port = 30;host = 172.16.0.1/30 参考资料&emsp;&emsp;转发自SpringBoot2.0集成WebSocket，实现后台向前端推送信息]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>WebSocket</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决引用图片403加载失败问题]]></title>
    <url>%2F2019%2F07%2F13%2F%E8%A7%A3%E5%86%B3%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87403%E5%8A%A0%E8%BD%BD%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;自己开发了个资源项目，前期运行稳定，没啥问题，可是几个月后发现爬虫爬下来的资源，视频展示图不显示加载不出来了，查看后请求返回状态为403，猜想应该是做了防盗链措施了。于是网上搜一波看看有啥就觉方法，别说还真有，而且很稳很有用。所以在此做个笔记。 &emsp;&emsp;网上提供的解决方法有两种，分别看下 使用 images.weserv.nl 方案1234567getImage(url)&#123; console.log(url); // 把现在的图片连接传进来，返回一个不受限制的路径 if(url !== undefined)&#123; return url.replace(/^(http)[s]*(\:\/\/)/,'https://images.weserv.nl/?url='); &#125;&#125; &emsp;&emsp;把图片路径直接传进去,替换一下原来url的http/https.或者直接在图片url前加上https://images.weserv.nl/?url=&emsp;&emsp;例如下面，其中图片的地址前缀http://是可以省略的 1https://images.weserv.nl/?url=http://img.zcool.cn/community/01d881579dc3620000018c1b430c4b.JPG@3000w_1l_2o_100sh.jpg &emsp;&emsp;其中https://images.weserv.nl/ 这个网址是一个提供图像缓存和调整大小服务。我们的服务器调整您的图像大小，在全球范围内缓存并显示它。可以点进去看看 使用 no-referrer 方案(推荐)&emsp;&emsp;这种方案不仅针对图片的防盗链,还可以是其他标签。 在前端页面头部添加一个meta1&lt;meta name="referrer" content="no-referrer" /&gt; referrer介绍&emsp;&emsp;在流量监测中，访客的来源信息是一个很重要的信息，包括访客的访前链接，以及搜索关键词。在HTTP请求中有一个referrer标签，用来指明当前流量的来源参考页。例如在http://www.bitauto.com/ 上点击一个链接到达www.taoche.com 首页，那么就referrer就是http://www.bitauto.com/ 了。在Javascript中，我们可以通过document.referrer来获取同样的信息。通过这个信息，我们就可以知道访客是从什么渠道来到当前页面的。这对于网站分析来说，是非常重要的，这可以告诉我们不同渠道带来的流量的分布情况，还有用户搜索的关键词等，都是通过分析这个referrer信息来获取的。 referrer的几种状态 策略名称 属性值(新) 属性值旧 No Referrer no-referrer never No Referrer When Downgrade no-referrer-when-downgrade default Origin Only origin - Origin When Cross-origin origin-when-crossorigin - Unsafe URL unsafe-url always a标签的referrer1&lt;a href="http://example.com" referrer="no-referrer|origin|unsafe-url"&gt;xxx&lt;/a&gt; img/image标签的referrer12&lt;img referrer="no-referrer|origin|unsafe-url" src="&#123;&#123;item.src&#125;&#125;"/&gt;&lt;image referrer="no-referrer|origin|unsafe-url" src="&#123;&#123;item.src&#125;&#125;"&gt;&lt;/image&gt; 说明&emsp;&emsp;如果我们是访问的gif图片,使用第一种方案是没有gif效果的,只能显示静态图片.这个时候推荐大家使用第二种.亲测可以完美展示gif效果. 参考资料&emsp;&emsp;https://segmentfault.com/a/1190000011628835&emsp;&emsp;https://www.cnblogs.com/mttcug/p/8109036.html]]></content>
      <categories>
        <category>编程</category>
        <category>html</category>
      </categories>
      <tags>
        <tag>403</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux搭建ssr教程]]></title>
    <url>%2F2019%2F07%2F12%2Flinux%E6%90%AD%E5%BB%BAssr%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[介绍VPN是什么？&emsp;&emsp;VPN，全称：Virtual Private Network，中文翻译：虛拟私人网络。作用：提供安全可靠的通信渠道，一般而言企业使用较多。延伸作用：科学上网。说明：VPN的出现并不是为了“科学上网”，二是在公网上建立加密的通信渠道。例如，公司员工出差或者在寝室，想要登录公司内网邮箱怎么办？这时VPN就派上用场了，可以通过第三方连接工具进行远程连接，比如思科就有相应的工具。 何为SS？&emsp;&emsp;SS全称shadowsocks，一开始为个人独立开发并用作“科学上网”，后被大家所熟知和广泛使用。再后来，据说作者被请去“喝茶”，停止了该项目。 什么是SSR？&emsp;&emsp;SSR全称shadowsocks-R。SSR作者声称SS不够隐匿，容易被防火墙检测到，SSR在改进了混淆和协议，更难被防火墙检测到。简单地说，SSR是SS的改进版。 SSR与SS的区别？&emsp;&emsp;SS和SSR两者原理相同，都是基于socks5代理。客户端与服务端没有建立专有通道，客户端和实际要访问的服务端之间通过代理服务器进行通信，客户端发送请求和接受服务端返回的数据都要通过代理服务器。SSR目的是为了能让流量通过防火墙。客户端请求服务端数据流程（SSR)：（1）浏览器发送请求（基于socks5协议）， 通过ssr客户端将sock5协议通过协议插件和混淆插件进行转换加密，使得来自客户端的流量和基于HTTP协议的流量无差别；（2）SSR服务端（代理服务器）收到请求后，通过混淆插件、协议插件将数据解密并还原协议，最后转发到目标服务器。 &emsp;&emsp;服务端返回数据到客户端同理。 VPN与SSR、SS的区别？&emsp;&emsp;目的（作用）不同，VPN是为了保证通信的安全性、私密性，不是专门为“科学上网”制定的技术；而SS/SSR则是为了转发客户端流量，绕过防火墙的检测，从而达到“科学上网”的真实意图，但是没有保证数据传输的安全性。 ssr功能 可当梯子用。比如有些问题需要到google上去搜索，就可以借助它，另外Google Play、Youtube、Facebook、Tumblr、Twitter等等被墙的都可以访问 可以代理ip，伪装真实ip。 ssr搭建&emsp;&emsp;当然你得先有台linux服务器或vps，然后再操作。 执行安装命令1wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh &emsp;&emsp;选择安装设置端口，设置加密方式（推荐none），协议插件选择auth_chain_a，混淆插件选择http_simple，后面不懂得可回车默认，也可自定义设置，到最后会出现下载安装。&emsp;&emsp;安装成功后会显示账号及配置信息 &emsp;&emsp;加速脚本(之前ssr安装脚本选项14其他功能中有锐速之类的，效果很好。安装不了就安装bbr。如果安装不了可以试试这个，这个是针对ope的。) 123wget https://raw.githubusercontent.com/kuoruan/shell-scripts/master/ovz-bbr/ovz-bbr-installer.sh chmod +x ovz-bbr-installer.sh./ovz-bbr-installer.sh &emsp;&emsp;按要求填就好了 客户端下载windows、android 参考资料什么是SSR、SS？]]></content>
      <categories>
        <category>编程</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>ssr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[巧用python内置的web服务器]]></title>
    <url>%2F2019%2F07%2F11%2F%E5%B7%A7%E7%94%A8python%E5%86%85%E7%BD%AE%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[逛技术论坛、别人的技术博客，总能发现新奇好玩而又涨知识的技术。 今天无意间发现python自带一个内置的web服务器，而且启动使用极其简单和方便。下面一起探索下吧！ 用途先说下用途 比如相应文件夹下存在index.html文件，这时启动python服务，就可以在浏览器中直接预览。 当目录中不存在index.html时，就会罗列显示该文件夹下的所有文件，类似web中的ftp。这项功能巧用的话，就可以给别人传文件啊。直接给别人你电脑的ip端口，别人浏览器打开就可以下载你目录下的文件了。 使用方法介绍完用途，那就说说怎么使用吧首先选择合适的文件夹，在cmd中输入命令 12# python3python -m http.server 12# python3 指定端口python -m http.server 8000 12# python2 python -m SimpleHTTPServer 启动成功截图 这时在页面打开地址就可以了（这是文件夹中没有index.html文件的效果） 参考Python 也会传文件，再也不用看某某网盘的脸色了！]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>奇淫巧技</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[装deepin系统踩的坑]]></title>
    <url>%2F2019%2F07%2F10%2Fdeepin%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;周末逛论坛，发现linux桌面版系统，deepin做很漂亮，也是国产的。于是跳到官网瞟了一波。按照官网的帮助，下载了镜像，做了系统U盘。我先是在另一个淘汰的笔记本上安装测试的，发现正常。回到win10系统也正常，没啥异样。而且界面很美，MAC book既视感😂。&emsp;&emsp;于是大胆的在我工作笔记本上安装了起来。重启几次后来发现，安装的那个E盘被格式化重新写入数据了，而且在win10这边也不显示这个盘符。瞬间懵逼了，之前桌面都是放在E盘的，而且还有一些资料都没了。瞬间心疼，桌面快捷方式图标也没了。重要的是这个博客的大本营在这个盘下啊。了解next的都知道，重新搭建不难，主要是写的md博文源文件都丢了。而且主题配置也没了，当初浪费了很长时间才完成各种配置的啊（1天？）。唉，迫不得已。又重新搭建还原了博文，还好文章数量不是太多。不过发现这次整个博客比之前的更增添了很多东西。也美观了不是。&emsp;&emsp;不过这个deepin系统真香，界面的确挺美的。使用感受就是，和win10没啥区别，主要不同就是一个是linux支持，一个是windows支持。下面是当时安装好的截图。]]></content>
      <categories>
        <category>编程</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>deepin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[午休醒来的懵逼发呆和思考人生]]></title>
    <url>%2F2019%2F07%2F03%2F%E5%8D%88%E4%BC%91%E9%86%92%E6%9D%A5%E7%9A%84%E6%87%B5%E9%80%BC%E5%8F%91%E5%91%86%E5%92%8C%E6%80%9D%E8%80%83%E4%BA%BA%E7%94%9F%2F</url>
    <content type="text"><![CDATA[嗯？我的腿呢？还在啊，怎么…卧槽！好麻！ 午休，中国传统习俗，不知是不是中国特有。之前看到一个段子这样说道：一位外国小哥第一天上班，中午出去吃完饭回来后，看到同事全躺下了，咋了中毒了？被偷袭了？差点没报警。（笑） 所以秉着传承习俗，发扬传统文化的理念。于是乎我也“卧倒”了~每日小憩醒来一瞬间，总会发现自己少了个腿，或着丢了个胳臂。懵逼过去后才发现是麻了。听网上说腿脚发麻是血液不畅通的缘故，于是我伸直了腿，蹦着身子成一条直线躺在椅子上，呆若木鸡，双眼无神，开始了思考人生。 为啥，我火急火燎的来到这个世界，为啥…（宋丹丹腔?）。嗯？情景不对，刚睡醒没这么激情。切换 记得小时候夏天的某个中午。自己玩累了，见爸妈都躺在床上午睡，占了大片的面积（床小家穷）。于是我找到了四五个化肥袋子，到大门口铺上睡了起来（小时候我家大门面朝东，所以太阳会被挡住，门口有些阴凉地）。 ….不想写了。敲代码]]></content>
      <categories>
        <category>生活</category>
        <category>日常</category>
      </categories>
      <tags>
        <tag>午觉</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[秘密花园]]></title>
    <url>%2F2019%2F07%2F02%2F%E7%A7%98%E5%AF%86%E8%8A%B1%E5%9B%AD%2F</url>
    <content type="text"><![CDATA[Enter password to read. Incorrect Password! No content to display! U2FsdGVkX1+xs1YCKwHBVQ0kFQ1WaSILZRY/gHFHEtp0mX4rj6rv/TmiPUjWH2x2QQz+oxLl/DHh1ne/nFCaQwk1u2QNmHuU6Nr7hF2aDmNb8hbPtuVWsaOsHT1GMRDPSlcm5hrlcjt32jazDOElEgOWKvQdbasaXfWHBANNgul5CPo00+GePldczbPyqJM49h9KOzxAZsgdVrqZadA/lyx+4LbK2uFuEVB7J2i7iw9iJCd88m4ilrLV0fZcgkH3L8SaTSXTosUcMj+O5iWsdJiNT95zyDpn/W4ufxtQVtKVf1cuSOzEf8aUb2VthlVbGAPqga7ZvjbRyZHBrm+6LRfmDBHqqnClBI4yWBTH0J8jUzGH/IiPfU5ZHfTjv9qVUUCKupqJ97TwxDXRKRYyCg+JgeNZxKeRloyVvZrMvVKZLFszNXihX3sAgkmSmPh15a5kBvnvEn94UqwiL+Zbb9HkTaohCSvmYxriCoIomQvCSEV5p9L7DrwKEvVqhAri+u4iymXjTLO6YiLnL04LySNV/jGy4Ze2eE6YiTxqgnAbOtVx31qTCV02XUuki8jXiojKr9CHsrabQOVgjBfkwv0z20dC8MoX9K9LRl2fWZzIYlNnPLbzO8ANs5p5Tm5xLKgNmUC2nYURGlHprGwv6Kd1cDlDvNGV+vioQUfcIno7S6A3cpPydFE/YPeTJ8LL38w9Hpnm5B72q13NzfZjSu6NATrOA3XA1b2dEyWlR5ZLahjCK73Twyrr6+6J/Tgn4nBo/feKlSwfNldZqCTH/xxupnIMIRLptC0zBAicn8hOGFD+mlGHe/VajGVAhPJsyigKWDrJc1EtEXUnGk4CkWE7YJYPz43L7WXqsMkuLZrbxlgEFOQ7ybhRE4iLpzTsGmu4rPobqV+1HMbPaUYZzSYPn4XHtbHT5Gfqkx8yv9ycUQfJS9bMm1Hp52zEK9UVZDsrd1QIyz2MYfhI2x3cURPwQyEC2keghXIaLfMK7dami3aaRM/VPL0OBvgSSqzeMB1yWkm2F2dYJu6VnUcqcViC+UH6SFCYuSHYsQz6QqyLqQ72LBtk7hdWzHZ03L3jyB8ZtY+lcTxPTm45qk/o77AZ3nrGStZzj7sAp/nJ1+kAvyxwQvIN/+/2IuocelV3Zfjc620Czowesye3G4jVakPmHyE0qpifddiYTrdroFT8y6Q5en6iPMsy6GroaXHWMin77pl8IY8KxYaciztPjVR01kE3hDllyhpZLpOfYRDmTqT00qZWgJOMVeKKfqV6RtYRfMBU6p2IEhmqV3WEL5gUQegwGNboLGLMdthsicvoQk178Ql7W5WIMlRS62PRVkh9xNcwrftAQDuLLVzP1xw9KjXwmJvgsow3Ei259JPhK4P3iKKm3RXwccVMrZlrMRxlZOTq8vw0Lvn0wWYSZ1yDaysLxiES4rN85bNwAvOC2BsFAPOdEU7vUNWH4otIqeR/4YKr3h7RgzYa20B6gj259ZC/MYVm7+ydBNhcpUAaeo5Wv1h5nnqjc4d9eVP/0+rZCW3Fb3C3aa2ZqkOiEXayySmDEkUGqn+nWjrFj/JAbERQ7ODNksmTFPnML1BrJP6K0XGeJGMbSIDazFSvMnAEsgztaWCpppMbyvd428yHrTYg1Qs4rXsNoZiEA8zBEHv6NLYZW+G8hex5b/3a40WtjNpFhgYwvCDImM40WGFqWaJ1myrYDAQsWBkYNmfDYWoACeK8uI+1t0+HsK7JCVMgwa6qhHBGXn5kqUlNhNmFvX0E1AHpjwaaA2D/UPJfgvGb2HCDjYStQ1IdU2cyAqLQJbWECjwXTE8n9bvE/4gSbXZcdBAGQJxU8Gc1wMNoJfMIlY0tomaHGOSljFb+eLXtiG6gKuoEc10Zv60fc6pHja3P5o/y7ToSMpVeC+KqEVXUedaBGSyO5KgjDc4dqcCXMJCZ9eorOpdJH/XrE642wcAnZGA5yvz8NUgmY/7Qz+VjybLmSgA6kEaOuqB28+LOdar/Erq0pp5YFJLqTaKcRCwK0rjwiJmmf+dW88Yp9pQflgp5JtrwycXFpjqUa+1swDlBLa+RyweMQ2QnqAVjB3CVgTXDzLC3db4WHXqG54pdixvFnQTGeg9hItWjZ+l+FRR6RUyfFmD4pvAbC68YOwaISGbPe1j+gF9v+l9gkNHzGzXhqKV7A9BVqfnewpCZ1b1HCswRU3UrQI1yXDVCshnbYDRjWrHLppnEvnbKXTAznRw6iam4Qx2OC1q6UN9NijSZm+Mwu12nNqvHoUgIyjw10tNG7b7/XXJqknDJ3HnxQouBojTuLufjrCxX8Xh/XOzH1EVBB/nnmN0WuKoUeKcYznYTFp7vAzMwbXn3uA7Q39USbKC1etS/2U/INNABBt3YYGs1pff9m3wap4O6Ji8H0kd9R8NCYwRma/Dvyf5W759AONrm/ZqMFhzl2vr5npwaqQ4mVje8WOI44RYOYehgttCMRu9CMoFCAZ7ilNymADIQR9PHEit/slJjL6wcPcz5LJGovj6kzUBnXqozko9lO6R62SKQ6D+JJGNqRxufj22rUIDXgp0VIABvooy2bc6QAcNWTOxITTq3r8DPSu7ChQaIfb5HfAwMTrtSBVBqYGIVF1llzLXKuhk+i1ve/mAFpcxbVX65hMzoeyXyZCxctmPUHW+TPc+WwqkGK2haPT3MDjzorKmlaT8rTh5CJg309MI708hwtoMMn2hjkce2RUOUTtYPCo5gvsQ9agx01qQuqhSatE7D4ORUPQb/9cuku0vzKlS0h7uYDvKcYKoTWqBx3bvp6iCa+5Cs0Mw96mYnbZRrYLOSXAdv1kB3RMkv7uX5O0vCtFQmY/tL8e1bbXo9ajpkDwODy6P3+K2LZDRwo8T39tkbeG+Pj4f9qLOH1NaGAkb6yumvhxBCrHi3Ig+uE+Pxk/1amdnRKzpW0q5QAUTte647aLuCX44k0BqhNq1PLKEtZeE+alDOcpAJhosoiSEo90jaM8qsEfGAClN6PMhtx6S9X84TUVY3srGqkLhHoyyn51Hdwn04v0GcGXzntF1Yfy6wDu3JnJUk1YKzpQle/vGSG23HrYPq22dokqOdZBxbqWE88aBb/6gcnHthfT5WJEXhi5QzDqIi5nSPPQwddFh5OI5bVAnh8DB37cQBD2f/h1ErOwvLJMAfCPUFsZU2jnPeP63iHU4PnuKRMGnJaWPERNTRT9ie6gXw7Bu4W/uDHw1WyoeIqWdZrTFmGXfOFgvN6hQwD3EGTWauJNe61tNGkE0djKrYqhmgNG95wsaeXq02G9TGMcIidUzAT1fNwdOQwoADt+D9X8FmjhnMB7o+2YzI24aPUiogWdk4yCi6QVHipVtUm1Lbt2Qjwy4b0a8/lHNbDnOud9cwwOeXv5uETwy1GP8PmIf/48Vo8NkvP+ZaDFR75ShPiLo99zisFLpx9iOdWudNrWwtgF+DLTkSEAqiOuSA5WIoTwTN5jYcnBhyfH55ANWHvLabLNL/nIwRSTexoe7s9rF+SHGzrQG/NDCHhuhXdyq/bqpIz34lbOsLWQtpXOGzMa17hb3meSOMPpF+v8waN4k5bfGe4S+7dk5/7ZAWTShL7xr+61VyKF+Hzly0p3zv2BbrFBxSV4OCHY0upmkiMDWJGN00C4ZJIXstrRvd2peXRT2B8+Y/wEn5yoVtONYZSK9pmySjUHLSjMgTo7n9G6cQ5PrDj8lKLEGTFsHYYbkkHEXrpJpQtbxsAaaGose4EOQzCdPY+rmODLAiU9Ya4OdsjGvjUlj+khvfibkoVQfNF8X3SBInLrm1SV/oQVsGm5HvhZlCVLTK/zLtJK6hvzPkJoJ2KMaus/xmaY9ef8s9bJFazYx1gqdsOzRWmFfafY3ev/xbVJ0HqQeumhJvmkiOMyPlbEFsiI/HKE1+XEpAVNxN2YJuWL5KKhsUpPR6mQB3YQQuV2Tt3xVWRdzjU9rGgn6fXgBw2DxMWpYOWKCPxZ+NY/z80uoExwn9f1koh8qztEbWWHXepA+/RDzCqbL+7unYr/CCMCVsUTuIW6xS2E6H1Cy1qsfvgMf4XxfFS81/bfBLllcRKmyIo4PLd3rgCNf0kUnaxGgzmRVPhtGjIfPl9B8Idnseo+IdT8H+JLsBeVGEt1EcR7OzvLo70ZTCcCW5J5KhujnGoVguCdhNhTPnGc/f8WWZIyX11jyQBhCsuHvT+CDIsNqoWUufhoSR5cD7hNyoyICoQP5fO/3goVnaDmNZ1XqzRBvueNvjSTBbDGJPkSWoVBSIJU/erIfmbMJX3TP28rPNtu/M9dbCPxpLoch7qnjn40fg79tbLbSTCVGe3N5EMS2Blh9JvKJvy4yaHjmlyyO+j69qvXv8T+KkQhdTzALUtSd6tnNU6qsZyPI6VbRLKCWgmlCpqd2HQ35oArxQAjaHu8YgJi+YnHcg2RwNFrixn/dEJURIDvSsM6pU/Zvhkxlw9Ys5SPQOsdepEzH05otmBp4UrtuTYo9uVcPCwMwVXFVB+orvyAjVCLpfL4/KUYIupoyQbeMee8pQkputm7R+uBZ9NJencoPzWwVgRj5hK4TqohzYK9DqeJJ82fUbXlcknnatGhAwLRD/57PNW5jy0v0tfTFast2llVLLO7MY36s/GtoXpDmv49/QalzraHchYCCCk1l8SbqbX9+0WmtKbNpt3cc8mxfLx8HKxRZWmH/s8+cwR5gchzXJCLznti2m13abn6vMzinOnTJdT2hGQLn+9yhpfhAavo8M5KCqqWoruDzS/TuxOJYz53eKuIKONLUUAE7vy6ZIAkeGRo33XW1tuSBkzBYH1urEAxysg3KydAv39XOaEURdjfXzrKgw78cM+Cr+quZX8EQ9olJEbdNfmeITE4JEF76ClYKKYZT9lrD0HatIxmhkpnrWsPqxfI6V+K/jWRKrw+/3bOmuSJSCx5K1aK4Att+aCJ21hTI/EkhPys+mI05xEOB13GqASngnuk0ddvHfsxI5mr0GoEZcMMX01jvVjP81mpqfE7qQAxnN/5QPBJkscJTnfcjsEI4WpJWq+1pBMGkD4rj1/2PRb7wAmt6IJ74gbXYfa044QdSnuMtN4/8FI/k2kzf+q18mC7fbFgfpR19LybaSNY5TT2fSZElGeoyTiqsemPLuPEjGQynmaD/Xqw+EOhxvvi3zH/3d1cJkON/CqnHeQt8fgqBACuU9JO6L8uM6ShHtKH0Fj05C78/BxIs/7OlPcDO0RPOi1GIuiXzCtQI4g7ED77hrzOE7J9acLtlLbdOYnqc2UcSMptr+wdvLt4lkVmbm1rQIV0eojzFM3X5bWslG6hHPx1sDafgHPQodRHGqA5KYKoEIpnx6RBug+cXbHqqAYvHS4aBOclrA6tS4WPK7Ef0CnH7pe0LMR1+4MbyCX3pzUJyM0TeDVEB+nR3RMaZex8Dy2hBScFF+hGpfnmZpSkIbSakbuGYGTXO0gcTZjlymB3ttWZiCWaOU/UMlYEjxvktLwGjFbm30QoPbCNGIHRepCyTE8W6NojMkTD3Fdixd0gsNpj8Gu6G9D8B8DE59duYkbB9jDz1dZSyhW0PqMqVpEAgwQF8cjChC+ytoe6lYOSRi5NsegZqiBkJK2RE8sGDW4ZDVMbJJGpqVFXNWfILosPKd6vdQXi8oKqKH9u6QslwPVCmypmr3/JH+]]></content>
      <categories>
        <category>生活</category>
        <category>后花园</category>
      </categories>
      <tags>
        <tag>加密文章</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux中定时执行shell脚本]]></title>
    <url>%2F2019%2F07%2F02%2Flinux%E4%B8%AD%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8Cshell%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;突发一股idea，我的linux服务器上的tomcat项目，虽然不能一直跑（别问我为啥不能一直跑，打开你的想象力），但是我可以设置个定时任务让他在固定时间启动和关闭啊。20大洋两个月的linux服务器，可不能浪费了，要榨干它所有的价值。对，榨干价值！于是利用定时任务在每天22点启动tomcat，早7点10分关闭它。&emsp;&emsp;因为买来的这个服务器自带crontab，而且操作简单，所以定时执行shell脚本的任务，选择了crontab。所以在此记录下。对于没有crontab的服务器，可以先安装下。 crontab的安装12yum install vixie-cronyum install crontabs vixie-cron软件包是cron的主程序；crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。 crontab启动关闭等操作12345service crond start //启动服务 service crond stop //关闭服务 service crond restart //重启服务 service crond reload //重新载入配置service crond status //查看crontab服务状态 查看crontab服务是否已设置为开机启动，执行命令：ntsysv加入开机自动启动:chkconfig –level 35 crond on 也可以用设置开机自动启动crond服务:1chkconfig crond on 查看各个开机级别的crond服务运行情况1chkconfig –list crond crond 0:关闭 1:关闭 2:启用 3:启用 4:启用 5:启用 6:关闭可以看到2、3、4、5级别开机会自动启动crond服务取消开机自动启动crond服务:1chkconfig crond off crontab定时任务操作12345cat /etc/crontab //查看crontab，会有注释说明crontab -u //设定特定用户的定时服务crontab -l //列出当前用户定时服务内容 crontab -r //删除当前用户的定时服务crontab -e //编辑当前用户的定时服务 先查看下crontab的状态 再看下crontab的所有定时任务 通过查看crontab知道，一行定时任务各部分的意思是啥 crontab添加配置解释* * * * * user_name command to be executed user_name 表示执行定时任务的用户 不指定默认当前用户 command to be executed 表示要执行的脚本语句。 前面五位*号是定时执行的时间周期 说明如下：第一个 * 表示分钟：取值范围0-59第二个 * 表示小时：取值范围0-23第三个 * 表示天数：取值范围1-31第四个 * 表示月份：取值范围1-12第五个 * 表示每周：取值范围0-6 使用(-)可以划定范围如：0 0-3 * * * 脚本表示每天0-3点整执行脚本 使用(,)可以枚举时间如: 0,15,30,45 * * * * 脚本表示每个小时的0分，15分，45分，30分会执行脚本 使用(/)可以指定间隔如：* */8 * * * 脚本表示每8小时执行脚本 组合用法0-20/10 * * * * 脚本表示在前20分钟内每隔10分钟执行脚本]]></content>
      <categories>
        <category>编程</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java后台对json进行加密、解密]]></title>
    <url>%2F2019%2F07%2F01%2Fjava%E5%90%8E%E5%8F%B0%E5%AF%B9json%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86%E3%80%81%E8%A7%A3%E5%AF%86%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;由于热爱爬虫，爱分析数据，几个月前在手机上通过抓包软件，抓到某资源app的大量请求，捕获各种类型的api接口，获取了大量json数据，而且可以直接利用。于是发挥了我python爬虫的那点知识，不断循环爬取数据保存到数据库，最后爬取了近4万条可用有价值的数据。上周末本想继续爬取更新一波，发现json传输的数据都加密了，于是对json加密产生了兴趣，本想把这种传输方式应用到java-web中，发现前端并不是好处理来自后台传过来的加密json数据（知识尚浅？），所以在此只记录下java后端对json数据加密解密处理的代码逻辑，以下两种方式来源在页尾已注明。 方式一：AES加密123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112import org.apache.commons.codec.binary.Base64;import javax.crypto.*;import javax.crypto.spec.SecretKeySpec;import java.security.SecureRandom;/** * Create by wjup on 2019/7/1 9:03 */public class AesUtil &#123; public static void main(String[] args) throws Exception &#123; // aes + base --&gt; aes + base String content = "&#123;\"mac\":\"123\",\"idfa\":\"123\",\"clientIp\":\"456\",insertTime\":\"test\"&#125;"; System.out.println("加密内容：" + content); String key = "123abc"; System.out.println("加密密钥和解密密钥：" + key); String encrypt = aesEncrypt(content, key); System.out.println("加密后：" + encrypt); String decrypt = aesDecrypt(encrypt, key); System.out.println("解密后：" + decrypt); &#125; /** * 编码 * * @param bstr * @return String */ public static String Base64encode(byte[] bstr) &#123; return Base64.encodeBase64String(bstr); &#125; /** * 解码 * * @param str * @return string */ public static byte[] Base64decode(String str) &#123; return Base64.decodeBase64(str); &#125; /* * AES加密 * @param content 待加密的内容 * @param encryptKey 加密密钥 * @return 加密后的byte[] * @throws Exception */ public static byte[] aesEncryptToBytes(String content, String encryptKey) throws Exception &#123; KeyGenerator kgen = KeyGenerator.getInstance("AES"); /*防止linux下 随机生成key*/ SecureRandom random = SecureRandom.getInstance("SHA1PRNG"); random.setSeed(encryptKey.getBytes()); kgen.init(128, random); Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding"); cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(kgen.generateKey().getEncoded(), "AES")); return cipher.doFinal(content.getBytes("UTF-8")); &#125; /** * AES加密为base 64 code * * @param content 待加密的内容 * @param encryptKey 加密密钥 * @return 加密后的base 64 code * @throws Exception */ public static String aesEncrypt(String content, String encryptKey) throws Exception &#123; return Base64encode(aesEncryptToBytes(content, encryptKey)); &#125; /** * AES解密 * * @param encryptBytes 待解密的byte[] * @param decryptKey 解密密钥 * @return 解密后的String * @throws Exception */ public static String aesDecryptByBytes(byte[] encryptBytes, String decryptKey) &#123; byte[] decryptBytes = new byte[0]; try &#123; KeyGenerator kgen = KeyGenerator.getInstance("AES"); /*防止linux下 随机生成key*/ SecureRandom random = SecureRandom.getInstance("SHA1PRNG"); random.setSeed(decryptKey.getBytes()); kgen.init(128, random); Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding"); cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(kgen.generateKey().getEncoded(), "AES")); decryptBytes = cipher.doFinal(encryptBytes); return new String(decryptBytes, "UTF-8"); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return decryptKey; &#125; /** * 将base 64 code AES解密 * * @param encryptStr 待解密的base 64 code * @param decryptKey 解密密钥 * @return 解密后的string * @throws Exception */ public static String aesDecrypt(String encryptStr, String decryptKey) &#123; return aesDecryptByBytes(Base64decode(encryptStr), decryptKey); &#125;&#125; 方式二：三重加密算法加密顺序：JSON字符串-&gt;Base64字符串-&gt;DES加密Base64是一重加密 Base64里面我改进了算法，支持任意形式的字典表，所以这个地方是第二重加密 DES在Base64的基础上再次用秘钥加密。 有人问为什么还需要改Base64的字典表，其实原因就是DES的秘钥只能是8个字节，按照现在计算机的处理速度，24小时就破解了。 Base64的处理类，这里我把网上一个公开的类库做了改进，做了一个混排编码格式 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.OutputStream;import java.util.HashMap;/** * Create by wjup on 2019/7/1 9:08 */public class Base64 &#123; private static final char[] legalChars = "9ghijk67sutJKLM8rvwx4EzAlnm3OUV+/aNbcdfePQRSTopqCDFG0125BHIWyXYZ" .toCharArray();//字典内顺序任意更改，只要内容保证不缺就行 private static HashMap&lt;Character, Integer&gt; hashDecode = new HashMap&lt;Character, Integer&gt;(); /** * data[]进行编码 * * @param data * @return */ public static String encode(byte[] data) &#123; int start = 0; int len = data.length; StringBuffer buf = new StringBuffer(data.length * 3 / 2); int end = len - 3; int i = start; int n = 0; while (i &lt;= end) &#123; int d = ((((int) data[i]) &amp; 0x0ff) &lt;&lt; 16) | ((((int) data[i + 1]) &amp; 0x0ff) &lt;&lt; 8) | (((int) data[i + 2]) &amp; 0x0ff); buf.append(legalChars[(d &gt;&gt; 18) &amp; 63]); buf.append(legalChars[(d &gt;&gt; 12) &amp; 63]); buf.append(legalChars[(d &gt;&gt; 6) &amp; 63]); buf.append(legalChars[d &amp; 63]); i += 3; if (n++ &gt;= 14) &#123; n = 0; buf.append(" "); &#125; &#125; if (i == start + len - 2) &#123; int d = ((((int) data[i]) &amp; 0x0ff) &lt;&lt; 16) | ((((int) data[i + 1]) &amp; 255) &lt;&lt; 8); buf.append(legalChars[(d &gt;&gt; 18) &amp; 63]); buf.append(legalChars[(d &gt;&gt; 12) &amp; 63]); buf.append(legalChars[(d &gt;&gt; 6) &amp; 63]); buf.append("="); &#125; else if (i == start + len - 1) &#123; int d = (((int) data[i]) &amp; 0x0ff) &lt;&lt; 16; buf.append(legalChars[(d &gt;&gt; 18) &amp; 63]); buf.append(legalChars[(d &gt;&gt; 12) &amp; 63]); buf.append("=="); &#125; return buf.toString(); &#125; public static byte[] decode(String s) &#123; ByteArrayOutputStream bos = new ByteArrayOutputStream(); try &#123; decode(s, bos); &#125; catch (IOException e) &#123; throw new RuntimeException(); &#125; byte[] decodedBytes = bos.toByteArray(); try &#123; bos.close(); bos = null; &#125; catch (IOException ex) &#123; System.err.println("Error while decoding BASE64: " + ex.toString()); &#125; return decodedBytes; &#125; private static void decode(String s, OutputStream os) throws IOException &#123; int i = 0; int len = s.length(); while (true) &#123; while (i &lt; len &amp;&amp; s.charAt(i) &lt;= ' ') &#123; i++; &#125; if (i == len) &#123; break; &#125; int tri = (decode(s.charAt(i)) &lt;&lt; 18) + (decode(s.charAt(i + 1)) &lt;&lt; 12) + (decode(s.charAt(i + 2)) &lt;&lt; 6) + (decode(s.charAt(i + 3))); os.write((tri &gt;&gt; 16) &amp; 255); if (s.charAt(i + 2) == '=') &#123; break; &#125; os.write((tri &gt;&gt; 8) &amp; 255); if (s.charAt(i + 3) == '=') &#123; break; &#125; os.write(tri &amp; 255); i += 4; &#125; &#125; private static int decode(char c) &#123; if (hashDecode.size() == 0) &#123; for (int i = 0; i &lt; 64; i++) &#123; char ch = legalChars[i]; hashDecode.put(ch, i); &#125; &#125; if (hashDecode.containsKey(c)) &#123; return hashDecode.get(c); &#125; else if (c == '=') &#123; return 0; &#125; else &#123; throw new RuntimeException("unexpected code: " + c); &#125; &#125; Des加密算法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495import javax.crypto.Cipher;import javax.crypto.spec.IvParameterSpec;import javax.crypto.spec.SecretKeySpec;/** * Create by wjup on 2019/7/1 9:12 */public class DateSecret &#123;// private static String keyCode = "12345678";//秘钥可以任意改，只要总长度是8个字节就行 private static byte[] iv = &#123;1, 2, 3, 4, 5, 6, 7, 8&#125;; /** * 加密 * @param encryptString * @param keyCode 8位秘钥 * @return * @throws Exception */ public static String encryptDES(String encryptString,String keyCode) throws Exception &#123; IvParameterSpec zeroIv = new IvParameterSpec(iv); SecretKeySpec key = new SecretKeySpec(keyCode.getBytes(), "DES"); Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding"); cipher.init(Cipher.ENCRYPT_MODE, key, zeroIv); byte[] encryptedData = cipher.doFinal(encryptString.getBytes("utf-8")); return Base64.encode(encryptedData); &#125; /** * 解密 * @param decryptString * @param keyCode 8位秘钥 * @return * @throws Exception */ public static String decryptDES(String decryptString,String keyCode) throws Exception &#123; byte[] byteMi = Base64.decode(decryptString); IvParameterSpec zeroIv = new IvParameterSpec(iv); SecretKeySpec key = new SecretKeySpec(keyCode.getBytes(), "DES"); Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding"); cipher.init(Cipher.DECRYPT_MODE, key, zeroIv); byte decryptedData[] = cipher.doFinal(byteMi); return new String(decryptedData, "utf-8"); &#125; /** * 将二进制转换成16进制 * * @param buf * @return String */ public static String parseByte2HexStr(byte buf[]) &#123; StringBuffer sb = new StringBuffer(); for (int i = 0; i &lt; buf.length; i++) &#123; String hex = Integer.toHexString(buf[i] &amp; 0xFF); if (hex.length() == 1) &#123; hex = '0' + hex; &#125; sb.append(hex.toUpperCase()); &#125; return sb.toString(); &#125; // 示例 public static void main(String[] args) &#123; try &#123; // 加密 String s = encryptDES("天王盖地虎","12345678"); // 解密 String s1 = decryptDES(s,"12345678"); System.out.println("加密后："+s+"\n解密后："+s1); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 参考信息https://www.cnblogs.com/yanchaohui/p/11005037.htmlhttps://blog.csdn.net/f2006116/article/details/53222328]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>json加密</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有印象的书、动漫、电影、电视剧]]></title>
    <url>%2F2019%2F06%2F29%2F%E6%9C%89%E5%8D%B0%E8%B1%A1%E7%9A%84%E4%B9%A6%E3%80%81%E5%8A%A8%E6%BC%AB%E3%80%81%E7%94%B5%E5%BD%B1%E3%80%81%E7%94%B5%E8%A7%86%E5%89%A7%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;“时光竟已走的这么匆忙，怎么刚刚学会懂事就老了，怎么刚刚学会包容就老了，怎么刚~~ 车辆行驶中，请站稳扶好，前方到站…”&emsp;&emsp;公交上的一首歌不知觉的把自己带入了这几年的回忆中，时间的确过得挺快。2009年仿佛还在昨天，然而已经过去十年了。长久不见的中年人见面也在感叹，一晃时间过得多快啊，看孩子们都工作到了谈婚论嫁的时候了。&emsp;&emsp;唉，岁月饶过谁，每天行尸走肉一般。不禁反问自己：我们终究是活了365天，还是活了1天，重复了364遍？&emsp;&emsp;言归正传，这篇文章的主题不是感叹时间，而是记录下我这些年读过和看过的自认为好的作品，一时之间可能有很多想不起来的。 &emsp;&emsp;首先电视剧是我们最早接触到的信息。小时候放学回到家，就打开电视机看动画片。爸妈们没少打骂我们“要赶紧写作业，少看电视，以后考个好大学，天天看都没人问”，不过那时哪里听得进去这些啊，于是不听就要被挨打，不过愈打愈看，愈看愈打。&emsp;&emsp;小时候能看到心爱的小鲤鱼泡泡打败赖皮蛇，挨点皮肉伤又算得了什么。后来实在扛不住打骂，就趁大人不在家偷看，等听到有开大门的声音，便迅雷不及掩耳之势拔掉电视机的插销，然而道高一尺魔高一丈。他们走到屋里摸摸电视机肚子，便认为你是看电视了，又少不了一顿“毒打”，任你怎么解释都不行。后来我还奇怪，怎么摸摸电视机肚子就知道我看电视了呢？还那么准，难道电视会说话？直到有一天我妈在外面和其他大人们肆意讨论他的战果时，我才知道这是他们之间广为流传的一个方法。就和电视机看着突然出雪花，只要你拍一下电视就好一样。同样看完电视，会残有余热，摸摸就知道你看没看。以至于后来每次偷看电视都会拿着扇子给电视扇风，怕它“热着”了。后来慢慢的长大，看的电视也越来越少，没机会也没时间了。 电视剧《鹿鼎记》 《仙剑奇侠传》 《白鹿原》 《人民的名义》 《毛骗》《权力的游戏》 《西部世界》 听说这两部不错还没看… 电影肖申克的救赎 当幸福来敲门 美丽人生 这个杀手不太冷 喊山 狼少年阿甘正传 第六感生死缘 绿皮书 调音师 模仿游戏 驴得水… 动漫画江湖之灵主 画江湖之不良人 少年锦衣卫 千与千寻 风少年 白蛇:缘起驯龙高手 寻梦环游记 风语咒 天上掉下个猪八戒 哆啦A梦 悬崖上的金鱼姬… 小说《活着》 《谁动了我的奶酪》… 未完待续…]]></content>
      <categories>
        <category>生活</category>
        <category>日常</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于消息队列相关]]></title>
    <url>%2F2019%2F06%2F26%2F%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;为什么使用消息队列？ 消息队列有什么优点和缺点？ Kafka、ActiveMQ、RabbitMQ、RocketMQ 都有什么区别，以及适合哪些场景？ 面试问题：为什么使用消息队列啊？&emsp;&emsp;面试官心理分析，其实面试官主要是想看看： 第一，你知不知道你们系统里为什么要用消息队列这个东西？ 不少候选人，说自己项目里用了 Redis、MQ，但是其实他并不知道自己为什么要用这个东西。其实说白了，就是为了用而用，或者是别人设计的架构，他从头到尾都没思考过。 没有对自己的架构问过为什么的人，一定是平时没有思考的人，面试官对这类候选人印象通常很不好。因为面试官担心你进了团队之后只会木头木脑的干呆活儿，不会自己思考。 第二，你既然用了消息队列这个东西，你知不知道用了有什么好处&amp;坏处？ 你要是没考虑过这个，那你盲目弄个 MQ 进系统里，后面出了问题你是不是就自己溜了给公司留坑？你要是没考虑过引入一个技术可能存在的弊端和风险，面试官把这类候选人招进来了，基本可能就是挖坑型选手。就怕你干 1 年挖一堆坑，自己跳槽了，给公司留下无穷后患。 第三，既然你用了 MQ，可能是某一种 MQ，那么你当时做没做过调研？ 你别傻乎乎的自己拍脑袋看个人喜好就瞎用了一个 MQ，比如 Kafka，甚至都从没调研过业界流行的 MQ 到底有哪几种。每一个 MQ 的优点和缺点是什么。每一个 MQ 没有绝对的好坏，但是就是看用在哪个场景可以扬长避短，利用其优势，规避其劣势。 如果是一个不考虑技术选型的候选人招进了团队，leader 交给他一个任务，去设计个什么系统，他在里面用一些技术，可能都没考虑过选型，最后选的技术可能并不一定合适，一样是留坑。 面试题剖析 &emsp;&emsp;先说一下消息队列的常见使用场景吧，其实场景有很多，但是比较核心的有3个：解耦 异步 削峰 解耦&emsp;&emsp;现场画个图来说明一下 &emsp;&emsp;A系统发送个数据到BCD三个系统，接口调用发送，那如果E系统也要这个数据呢？那如果C系统现在不需要了呢？现在A系统又要发送第二种数据了呢？A系统负责人濒临崩溃中。。。再来点更加崩溃的事儿，A系统要时时刻刻考虑BCDE四个系统如果挂了咋办？我要不要重发？我要不要把消息存起来？头发都白了啊。。。 &emsp;&emsp;面试技巧：你需要去考虑一下你负责的系统中是否有类似的场景，就是一个系统或者一个模块，调用了多个系统或者模块，互相之间的调用很复杂，维护起来很麻烦。但是其实这个调用是不需要直接同步调用接口的，如果用MQ给他异步化解耦，也是可以的，你就需要去考虑在你的项目里，是不是可以运用这个MQ去进行系统的解耦。在简历中体现出来这块东西，用MQ作解耦。 异步&emsp;&emsp;现场画个图来说明一下， &emsp;&emsp;A系统接收一个请求，需要在自己本地写库，还需要在BCD三个系统写库，自己本地写库要3ms，BCD三个系统分别写库要300ms、450ms、200ms。最终请求总延时是3 + 300 + 450 + 200 = 953ms，接近1s，用户感觉搞个什么东西，慢死了慢死了。 削峰&emsp;&emsp;每天0点到11点，A系统风平浪静，每秒并发请求数量就100个。结果每次一到11点~1点，每秒并发请求数量突然会暴增到1万条。但是系统最大的处理能力就只能是每秒钟处理1000个请求啊。。。尴尬了，系统会死。。。 消息队列有什么优点和缺点啊？&emsp;&emsp;优点上面已经说了，就是在特殊场景下有其对应的好处，解耦、异步、削峰&emsp;&emsp;缺点呢？显而易见的 系统可用性降低&emsp;&emsp;系统引入的外部依赖越多，越容易挂掉，本来你就是A系统调用BCD三个系统的接口就好了，人ABCD四个系统好好的，没啥问题，你偏加个MQ进来，万一MQ挂了咋整？MQ挂了，整套系统崩溃了，你不就完了么。 系统复杂性提高&emsp;&emsp;硬生生加个MQ进来，你怎么保证消息没有重复消费？怎么处理消息丢失的情况？怎么保证消息传递的顺序性？头大头大，问题一大堆，痛苦不已 一致性问题&emsp;&emsp;A系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是BCD三个系统那里，BD两个系统写库成功了，结果C系统写库失败了，咋整？你这数据就不一致了。 &emsp;&emsp;所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，最好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了10倍。但是关键时刻，用，还是得用的。。。 kafka、activemq、rabbitmq、rocketmq都有什么优点和缺点啊？&emsp;&emsp;常见的MQ其实就这几种，别的还有很多其他MQ，但是比较冷门的，那么就别多说了&emsp;&emsp;作为一个码农，你起码得知道各种mq的优点和缺点吧，咱们来画个表格看看 特性 ActiveMQ RabbitMQ RocketMQ Kafka 单机吞吐量 万级，吞吐量比RocketMQ和Kafka要低了一个数量级 万级，吞吐量比RocketMQ和Kafka要低了一个数量级 10万级，RocketMQ也是可以支撑高吞吐的一种MQ 10万级别，这是kafka最大的优点，就是吞吐量高。一般配合大数据类的系统来进行实时数据计算、日志采集等场景 topic数量对吞吐量的影响 topic可以达到几百，几千个的级别，吞吐量会有较小幅度的下降。这是RocketMQ的一大优势，在同等机器下，可以支撑大量的topic topic从几十个到几百个的时候，吞吐量会大幅度下降。所以在同等机器下，kafka尽量保证topic数量不要过多。如果要支撑大规模topic，需要增加更多的机器资源 时效性 ms级 微秒级，这是rabbitmq的一大特点，延迟是最低的 ms级 延迟在ms级以内 可用性 高，基于主从架构实现高可用性 高，基于主从架构实现高可用性 非常高，分布式架构 非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用 消息可靠性 有较低的概率丢失数据 经过参数优化配置，可以做到0丢失 经过参数优化配置，消息可以做到0丢失 功能支持 MQ领域的功能极其完备 基于erlang开发，所以并发能力很强，性能极其好，延时很低 MQ功能较为完善，还是分布式的，扩展性好 功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准 优劣势总结 非常成熟，功能强大，在业内大量的公司以及项目中都有应用偶尔会有较低概率丢失消息而且现在社区以及国内应用都越来越少，官方社区现在对ActiveMQ 5.x维护越来越少，几个月才发布一个版本而且确实主要是基于解耦和异步来用的，较少在大规模吞吐的场景中使用 erlang语言开发，性能极其好，延时很低；吞吐量到万级，MQ功能比较完备而且开源提供的管理界面非常棒，用起来很好用社区相对比较活跃，几乎每个月都发布几个版本分在国内一些互联网公司近几年用rabbitmq也比较多一些但是问题也是显而易见的，RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。而且erlang开发，国内有几个公司有实力做erlang源码级别的研究和定制？如果说你没这个实力的话，确实偶尔会有一些问题，你很难去看懂源码，你公司对这个东西的掌控很弱，基本职能依赖于开源社区的快速维护和修复bug。而且rabbitmq集群动态扩展会很麻烦，不过这个我觉得还好。其实主要是erlang语言本身带来的问题。很难读源码，很难定制和掌控。 接口简单易用，而且毕竟在阿里大规模应用过，有阿里品牌保障日处理消息上百亿之多，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便，社区维护还可以，可靠性和可用性都是ok的，还可以支撑大规模的topic数量，支持复杂MQ业务场景而且一个很大的优势在于，阿里出品都是java系的，我们可以自己阅读源码，定制自己公司的MQ，可以掌控社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准JMS规范走的有些系统要迁移需要修改大量代码还有就是阿里出台的技术，你得做好这个技术万一被抛弃，社区黄掉的风险，那如果你们公司有技术实力我觉得用RocketMQ挺好的 kafka的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展同时kafka最好是支撑较少的topic数量即可，保证其超高吞吐量而且kafka唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略这个特性天然适合大数据实时计算以及日志收集 再来张图图看看 &emsp;&emsp;综上所述，各种对比之后，我个人倾向于是： &emsp;&emsp;一般的业务系统要引入MQ，最早大家都用ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃，所以大家还是算了吧，我个人不推荐用这个了； &emsp;&emsp;后来大家开始用RabbitMQ，但是确实erlang语言阻止了大量的java工程师去深入研究和掌控他，对公司而言，几乎处于不可控的状态，但是确实人是开源的，比较稳定的支持，活跃度也高； &emsp;&emsp;不过现在确实越来越多的公司，会去用RocketMQ，确实很不错，但是我提醒一下自己想好社区万一突然黄掉的风险，对自己公司技术实力有绝对自信的，我推荐用RocketMQ，否则回去老老实实用RabbitMQ吧，人是活跃开源社区，绝对不会黄 &emsp;&emsp;所以中小型公司，技术实力较为一般，技术挑战不是特别高，用RabbitMQ是不错的选择；大型公司，基础架构研发实力较强，用RocketMQ是很好的选择 &emsp;&emsp;如果是大数据领域的实时计算、日志采集等场景，用Kafka是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范 参考：https://studygolang.com/topics/8246#reply0https://blog.csdn.net/u014801403/article/details/80308353]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[周末博物馆一日游]]></title>
    <url>%2F2019%2F06%2F25%2F%E5%91%A8%E6%9C%AB%E5%8D%9A%E7%89%A9%E9%A6%86%E4%B8%80%E6%97%A5%E6%B8%B8%2F</url>
    <content type="text"><![CDATA[上周六，在家呆着无聊，于是被女朋友胁迫着出去玩，商量之后选择了先去博物馆参观一下。说走就走，先秀一波…拍照技术 烈日炎炎终于到了博物馆，刷身份证进去后，映入眼帘的是大大的大厅，顶部是一个大铜钱的样式，体现了博物馆文物、收藏的核心理念 一楼展览厅则是“重量级”的文物，包括佛像、建筑等等 二楼则是一些书画等。三楼大多是标本类的。 当然下面这些可不是人体标本（僵尸？），据我观察可能是蜡像 整个展览厅数人最多的应该是这里了，《非洲野生动物大迁徙》主题馆，动物种类非常多，也很逼真，只是拍出来像拍的一幅画一样，没有立体感 当然这时候也不忘留个念 整个二楼还没逛完，就已经过去两三个小时了，二楼还没逛完（1-&gt;3-&gt;2）,就离开了。回家？不可能！去了人山人海的芙蓉街]]></content>
      <categories>
        <category>生活</category>
        <category>游记</category>
      </categories>
      <tags>
        <tag>博物馆</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lombok包的介绍]]></title>
    <url>%2F2019%2F06%2F23%2Flombok%E5%8C%85%E7%9A%84%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[lombok官方下载地址：https://projectlombok.org/downloadlombok的maven与引用：https://mvnrepository.com/artifact/org.projectlombok/lombok 功能介绍lombok可以通过注解的形式，在在编译时自动为实体类属性生成构造器、getter/setter、equals、hashcode、toString方法。非常便捷，而且实体类java文件中还不会长长的get/set代码，显得很简洁。 使用方法编辑器使用，先安装lombok插件，maven中引用lombok的jar包 注解解释@Data@Data注解在类上，会为所有属性自动生成setter/getter、equals、canEqual、hashCode、toString方法。如果属性为final修饰，则不会为该属性生成setter方法。 示例1234567891011import java.io.Serializable;import lombok.Data;@Data public class DataExample implements Serializable&#123; private final String name; private int age; private double score; private String[] tags;&#125; @Getter/@Setter@Getter/@Setter注解在属性上，可以为属性生成get/set方法 示例1234567891011121314import java.io.Serializable;import lombok.Getter;import lombok.Setter;public class DataExample implements Serializable&#123; private final String name; @Getter @Setter private int age; private double score; private String[] tags;&#125; @ToString@ToString注解在类上，Lombok会生成一个toString()方法，默认情况下，会输出类名、所有属性（会按照属性定义顺序），用逗号来分割。也可以设置不包含哪些字段，如：@ToString(exclude = {“age”,”name”}) 示例1234567891011import java.io.Serializable;import lombok.ToString;@ToString public class DataExample implements Serializable&#123; private final String name; private int age; private double score; private String[] tags;&#125; @NoArgsConstructor/@RequiredArgsConstructor/@AllArgsConstructor@NoArgsConstructor/@RequiredArgsConstructor/@AllArgsConstructor注解在类上，分别可以实现无参构造器/部分参数构造器（为所有 final 和 @NonNull 修饰的字段生成一个构造方法）/全参构造器。 示例12345678910111213import java.io.Serializable;import lombok.AllArgsConstructor;import lombok.NoArgsConstructor;@AllArgsConstructor@NoArgsConstructorpublic class DataExample implements Serializable&#123; private final String name; private int age; private double score; private String[] tags;&#125; @Accessors(chain = true)@Accessors(chain = true)在类上使用，可以设置对象属性时接连链式设置，比如person,setName(“tom”).setAge(18).setSex(“boy”)…. 示例1234567891011import java.io.Serializable;import lombok.experimental.Accessors;@Accessors(chain = true)public class DataExample implements Serializable&#123; private final String name; private int age; private double score; private String[] tags;&#125; 总结优点 能通过注解的形式自动生成构造器、getter/setter、equals、hashcode、toString等方法，提高了一定的开发效率 让代码变得简洁，不用过多的去关注相应的方法 属性做修改时，也简化了维护为这些属性所生成的getter/setter方法等 缺点 不支持多种参数构造器的重载虽然省去了手动创建getter/setter方法的麻烦，但大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度 不支持多种参数构造器的重载虽然省去了手动创建getter/setter方法的麻烦，但大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度 AllLombok虽然有很多优点，但Lombok更类似于一种IDE插件，项目也需要依赖相应的jar包。Lombok依赖jar包是因为编译时要用它的注解，为什么说它又类似插件？因为在使用时，eclipse或IntelliJ IDEA都需要安装相应的插件，在编译器编译时通过操作AST（抽象语法树）改变字节码生成，变向的就是说它在改变java语法。它不像spring的依赖注入或者mybatis的ORM一样是运行时的特性，而是编译时的特性。这里我个人最感觉不爽的地方就是对插件的依赖！因为Lombok只是省去了一些人工生成代码的麻烦，但IDE都有快捷键来协助生成getter/setter等方法，也非常方便。 知乎上有位大神发表过对Lombok的一些看法： 这是一种低级趣味的插件，不建议使用。JAVA发展到今天，各种插件层出不穷，如何甄别各种插件的优劣？能从架构上优化你的设计的，能提高应用程序性能的 ，实现高度封装可扩展的…， 像lombok这种，像这种插件，已经不仅仅是插件了，改变了你如何编写源码，事实上，少去了代码你写上去又如何？如果JAVA家族到处充斥这样的东西，那只不过是一坨披着金属颜色的屎，迟早会被其它的语言取代。 虽然话糙但理确实不糙，试想一个项目有非常多类似Lombok这样的插件，个人觉得真的会极大的降低阅读源代码的舒适度。 虽然非常不建议在属性的getter/setter写一些业务代码，但在多年项目的实战中，有时通过给getter/setter加一点点业务代码，能极大的简化某些业务场景的代码。所谓取舍，也许就是这时的舍弃一定的规范，取得极大的方便。 我现在非常坚信一条理念，任何编程语言或插件，都仅仅只是工具而已，即使工具再强大也在于用的人，就如同小米加步枪照样能赢飞机大炮的道理一样。结合具体业务场景和项目实际情况，无需一味追求高大上的技术，适合的才是王道。 Lombok有它的得天独厚的优点，也有它避之不及的缺点，熟知其优缺点，在实战中灵活运用才是王道。 参考：https://www.cnblogs.com/heyonggang/p/8638374.htmlhttps://projectlombok.org/features/https://github.com/rzwitserloot/lombok?spm=a2c4e.11153940.blogcont59972.5.2aeb6d32hayLHvhttps://www.zhihu.com/question/42348457https://blog.csdn.net/ghsau/article/details/52334762]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《致橡树》]]></title>
    <url>%2F2019%2F06%2F21%2F%E3%80%8A%E8%87%B4%E6%A9%A1%E6%A0%91%E3%80%8B%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;最初了解到这首诗，还是在网络剧《春风十里不如你》里秋水朗诵给小红听的。这个电视剧也陪伴了我刚出大学实习的整个夏天，每当听到主题曲《如果我爱你》，都会陷入满满的回忆中，这就叫应景生情吧。而里面朗诵的《致橡树》也不止一次出现。 作者简介 舒婷，原名龚佩瑜，女，汉族，1952年5月生，福建晋江人。 中国当代女诗人，朦胧诗派的代表人物。从小随父母定居于厦门，1969年下乡插队，1972年返城当工人，1979年开始发表诗歌作品，1980年至福建省文联工作，从事专业写作。 下面让我们一块欣赏由舒婷写带来的这首《致橡树》吧 我如果爱你——绝不像攀援的凌霄花，借你的高枝炫耀自己；我如果爱你——绝不学痴情的鸟儿，为绿荫重复单调的歌曲；也不止像泉源，常年送来清凉的慰藉；也不止像险峰，增加你的高度，衬托你的威仪。甚至日光，甚至春雨。不，这些都还不够！我必须是你近旁的一株木棉，作为树的形象和你站在一起。根，紧握在地下；叶，相触在云里。每一阵风过，我们都互相致意，但没有人，听懂我们的言语。你有你的铜枝铁干，像刀，像剑，也像戟；我有我红硕的花朵，像沉重的叹息，又像英勇的火炬。我们分担寒潮、风雷、霹雳；我们共享雾霭、流岚、虹霓。仿佛永远分离，却又终身相依。这才是伟大的爱情，坚贞就在这里：爱——不仅爱你伟岸的身躯，也爱你坚持的位置，足下的土地。]]></content>
      <categories>
        <category>生活</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[fastjson生成各种格式json串]]></title>
    <url>%2F2019%2F06%2F21%2Ffastjson%E7%94%9F%E6%88%90%E5%90%84%E7%A7%8D%E6%A0%BC%E5%BC%8Fjson%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[本文json的jar包，采用阿里云的fastjson官方github下载地址：https://github.com/alibaba/fastjson 样式一：json对象1234&#123; "xxx": "xxx", "yyy": "yyy"&#125; 代码实现示例 12345JSONObject json = new JSONObject();json.put("xxx","xxxx");json.put("yyy","yyy");String str = json.toJSONString();// &#123;"xxx":"xxx"&#125;; ###样式二：json数组包含对象 1234567[&#123; "xx": "xx", "yy": "yy"&#125;, &#123; "xx": "yy", "yy": "yy"&#125;] 代码实现示例 1234567891011String[] key = &#123;"张三","李四","王五","田七"&#125;int[] value = &#123;32,23,33,36&#125;JSONArray jsonArray = new JSONArray(); for (int i = 0; i &lt; keyName.length; i++) &#123; JSONObject jsonObj = new JSONObject(); jsonObj.put("name",key[i]); jsonObj.put("age",value[i]); jsonArray.add(jsonObj); &#125;String str = jsonArray.toJSONString();// [&#123;"name":"张三","age":32&#125;,&#123;"name":"李四","age":23&#125;...] 样式三：json对象包含数组12345678&#123; "name": "xxx", "interfaces": [&#123; "name": "yyy", "untagged": true &#125;], "remark": "xxxxx"&#125; 代码实现示例 1234567891011121314JSONObject json = new JSONObject();json.put("name","vlan_apitest");JSONObject inter = new JSONObject();inter.put("name","1.2");inter.put("untagged",true);JSONArray jsonArr = new JSONArray();jsonArr.add(inter);json.put("interfaces",jsonArr);json.put("remark",666);String str = json.toJSONString();// &#123;"interfaces":[&#123;"untagged":true,"name":"1.2"&#125;],"name":"vlan_apitest","remark":666&#125; 本想整理所有有可能出现的样式，写完这几个才发现很简单，也没啥必要继续整理了，就这样吧！]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[没时间解释了快上船]]></title>
    <url>%2F2019%2F06%2F20%2F%E6%B2%A1%E6%97%B6%E9%97%B4%E8%A7%A3%E9%87%8A%E4%BA%86%E5%BF%AB%E4%B8%8A%E8%88%B9%2F</url>
    <content type="text"><![CDATA[没时间解释了，快上船 Your name is ready to fly with the Mars 2020 rover!]]></content>
      <categories>
        <category>生活</category>
        <category>日常</category>
      </categories>
      <tags>
        <tag>火星</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux基本常用命令笔记]]></title>
    <url>%2F2019%2F06%2F14%2Flinux%E5%9F%BA%E6%9C%AC%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[总结的常用的基础的linux命令 常用命令Linux 关闭终端运行python脚本(日志文件在统计目录中)：nohup python -u main.py &gt; test.out 2&gt;&amp;1 &amp;查看被占用的端口号：netstat -anp |grep 端口号查看所有端口号详情：netstat -nultp创建文件、文件夹：touch 文件名,mkdir 文件夹名解压：tar -xzvf sysconfig.tar.gz查看磁盘目录占用信息：df -h查看进程信息：ps -aux --sort -rss查看内存cpu使用信息：free -h进程显示–搜索进程：ps -ef|grep xxx杀死进程：kill -9 num搜索文件里信息（-n显示行数）：grep -n &quot;xxx&quot; xxx.log显示日志文件增长的信息：tail -f xx.log显示后几行信息：tail -n num **.log显示目录下名称带xx的文件：ls &quot;*xxx*&quot; liunx中安装软件教程linux安装java：https://www.cnblogs.com/lamp01/p/8932740.htmllinux安装mysql：https://www.cnblogs.com/daemon-/p/9009360.htmllinux安装redis：https://blog.csdn.net/qq_30764991/article/details/81564652linux安装nginx：https://blog.csdn.net/t8116189520/article/details/81909574（http://nginx.org/download/）linux安装python：https://www.cnblogs.com/yhongji/p/9383857.html]]></content>
      <categories>
        <category>编程</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx配置文件说明（包含黑名单、代理反射、负载均衡）]]></title>
    <url>%2F2019%2F06%2F14%2Fnginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E%2F</url>
    <content type="text"><![CDATA[nginx.conf配置文件的注解，包含ip黑名单、负载均衡、代理反射 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218#运行用户 主模块指令，指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行user nobody;#启动进程,每个Nginx进程平均耗费10M~12M内存，通常建议设置成和cpu的数量相等worker_processes 1; #error_log是个主模块指令，用来定义全局错误日志文件。# 日志输出级别有debug、info、notice、warn、error、crit可供选择# 其中debug输出日志最为最详细，而crit输出日志最少。error_log logs/error.log;# error_log logs/error.log notice;# error_log logs/error.log info; # pid是个主模块指令，用来指定进程pid的存储文件位置pid logs/nginx.pid; #工作模式及连接数上限events &#123; #epoll是多路复用IO(I/O Multiplexing)中的一种方式, #仅用于linux2.6以上内核,可以大大提高nginx的性能 use epoll; #单个后台worker process进程的最大并发链接数 worker_connections 1024; # 并发总数是 worker_processes 和 worker_connections 的乘积 # 即 max_clients = worker_processes * worker_connections # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4 为什么 # 为什么上面反向代理要除以4，应该说是一个经验值 # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000 # worker_connections 值的设置跟物理内存大小有关 # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数 # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右 # 我们来看看360M内存的VPS可以打开的文件句柄数是多少： # $ cat /proc/sys/fs/file-max # 输出 34336 # 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内 # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置 # 使得并发总数小于操作系统可以打开的最大文件数目 # 其实质也就是根据主机的物理CPU和内存进行配置 # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。 # ulimit -SHn 65535 &#125; http &#123; #设定mime类型,类型由mime.type文件定义 include mime.types; default_type application/octet-stream; #设定日志格式 log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log logs/access.log main; #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件， #对于普通应用，必须设为 on, #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off， #以平衡磁盘与网络I/O处理速度，降低系统的uptime. sendfile on; #tcp_nopush on; #连接超时时间 #keepalive_timeout 0; keepalive_timeout 65; tcp_nodelay on; # 开启gzip压缩 gzip on; gzip_disable &quot;MSIE [1-6].&quot;; # 设定请求缓冲 client_header_buffer_size 128k; large_client_header_buffers 4 128k; # ip黑名单 # 在Nginx的conf目录下面建立blockip.conf文件（名称可以随意）然后引入 # 单个网站屏蔽IP的方法：把include blocksip.conf;放到网址对应的在server &#123;&#125;语句块； # 多个网站屏蔽IP的方法：把include blocksip.conf;放到http &#123;&#125;语句块。 # include blockip.conf; # 文件里的格式如下 # 屏蔽单个ip访问：deny IP; # 允许单个ip访问：allow IP; # 屏蔽所有ip访问：deny all; # 允许所有ip访问：allow all; # 屏蔽整个段：从123.0.0.1到123.255.255.254 ## deny 123.0.0.0/8; # 屏蔽IP段：从123.45.0.1到123.45.255.254 ## deny 123.45.0.0/16; # 屏蔽IP段：从123.45.6.1到123.45.6.254 ## deny 123.45.6.0/24; # 除了几个IP外，其他全部拒绝 ## allow 1.1.1.1; ## allow 1.1.1.2; ## deny all; # 设定虚拟主机配置 server &#123; # 侦听80端口 listen 80; # 定义使用 www.nginx.cn访问，多个域名之间用空格分开 server_name www.nginx.cn; # 设定本虚拟主机的访问日志 access_log logs/nginx.access.log main; # 默认请求 # location： 表示url匹配，/表示全部匹。 location / &#123; #定义服务器的默认网站根目录位置（html和config同级目录） # 可自定义目录如 root /home/html root html; #定义首页索引文件的名称 index index.php index.html index.htm; &#125; # 定义错误提示页面 # 特别需要注意的是，这些错误信息的返回页面大小一定要超过512K，否者会被ie浏览器替换为ie默认的错误页面 error_page 404 /404.html; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; #静态文件，nginx自己处理 location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123; #过期30天，静态文件不怎么更新，过期可以设大一点， #如果频繁更新，则可以设置得小一点。 expires 30d; &#125; # 这段设置是将upload和html下的所有文件都交给nginx来处理 # 当然，upload和html目录包含在/web/wwwroot/xx目录中。 location ~ ^/(upload|html)/ &#123; root /web/wwwroot/xx; expires 30d; &#125; #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置. location ~ .php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; #禁止访问 .txt/doc 文件 location ~* \.(txt|doc)$ &#123; root /usr/local/nginx/html; deny all; &#125; &#125; # 反向代理实现负载均衡 # 准确的来说，这属于：HTTP重定向实现负载均衡。它有一个比较大的缺点 # 由于不同用户的访问时间、访问页面深度有所不同，从而每个用户对各自的后端服务器所造成的压力也不同。 # 而调度服务器在调度时，无法知道当前用户将会对服务器造成多大的压力，因此这种方式无法实现真正意义上的负载均衡， # 只不过是把请求次数平均分配给每台服务器罢了。但是它确实实现了负载均衡， # 在一些要去并不强烈的项目中可以使用http重定向来实现均衡每台服务器压力的效果，以达到更高的并发总量。 upstream tom3 &#123; # 采用源地址哈希法进行分配() # 对访问用户的IP进行hash后的结果进行分配，这样每一个用户固定请求同一个后端服务器，能够解决session的问题。 # ip_hash; # weight 默认为1，weight值越大，负载的权重就越大，访问概率越大 # server localhost:1996 weight=1; # down 表示当前的server暂时不参与负载 # server localhost:1996 down; # backup 表示其它所有的非backup机器down或者忙的时候，请求backup机器 # server localhost:1996 backup; server localhost:1996; server localhost:1997; server localhost:1998; &#125; # 反向代理 server &#123; listen 80; server_name www.nginx2.cn; location / &#123; # 会转发到设置的三台tomcat上 proxy_pass http://tom3; # nginx向tomcat发起连接，即第一次握手等待tomcat回应的超时时间，tomcat的这次回应只是说明能正常连接，并没有响应具体请求的内容。 # 如果其中有台tomcat故障，3秒后转移到其他tomcat上，默认时间是60秒 proxy_connect_timeout 3s; # tomcat接受到真正业务请求之后，nginx等待tomcat响应具体请求内容的超时时间。 # 差不多可以理解tomcat处理具体请求时间的最大值，也就是tomcat必须在这个时间内做完业务逻辑处理。 proxy_read_timeout 20s; # nginx将请求发送给tomcat的超时时间，应该是确认能正常连接之后向tomcat发送真正的业务请求。 proxy_send_timeout 3s; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; &#125;]]></content>
      <categories>
        <category>编程</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx禁止直接访问目录或文件]]></title>
    <url>%2F2019%2F06%2F13%2Fnginx%E7%A6%81%E6%AD%A2%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E7%9B%AE%E5%BD%95%E6%88%96%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;nginx禁止直接访问目录或文件，如果不禁止，nginx会直接去下载web目录下文件，如果有配置文件，并可以直接暴露一些配置文件源代码。测试时要清理浏览器缓存，浏览器会缓存下载的文件。如果有类似配置文件，建议不要放在web目录下，会更加安全。 禁止访问某些后缀文件123location ~ \.(ini|conf|txt)$ &#123; deny all;&#125; 禁止访问目录或目录下文件123456789# 禁止访问目录location ^~ /test/ &#123; deny all;&#125;# 禁止访问目录下文件location ^~ /test &#123; deny all;&#125; nginx location 匹配相关= 表示精确匹配 ^~ 表示uri以某个字符串开头 ~ 正则匹配(区分大小写) ~* 正则匹配(不区分大小写) !~和!~*分别为区分大小写不匹配及不区分大小写不匹配的正则 / 任何请求都会匹配 匹配优先级： = &gt; ^~ &gt; / 转发自：PHP自学网]]></content>
      <categories>
        <category>编程</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx配置ip黑名单和限制ip请求次数]]></title>
    <url>%2F2019%2F05%2F23%2Fnginx%E9%85%8D%E7%BD%AEip%E9%BB%91%E5%90%8D%E5%8D%95%E5%92%8C%E9%99%90%E5%88%B6ip%E8%AF%B7%E6%B1%82%E6%AC%A1%E6%95%B0%2F</url>
    <content type="text"><![CDATA[nginx黑名单设置在nginx/conf下创建黑名单文件ip.black（叫啥都行）在文件内容写上列入黑名单的IP，格式为deny IP例如：deny 192.168.66.88; 在nginx.conf进行配置引入配置的文件123456http &#123; include mime.types; # 黑名单 include ip.black; default_type application/octet-stream; 设置后当黑名单中的ip再来访问时就会出现403拒绝访问页面了 HttpLimitReqModul 限制某一段时间内同一ip访问数实例123456789101112131415161718192021222324252627282930http&#123; #定义一个名为allips的limit_req_zone用来存储session，大小是10M内存， #以$binary_remote_addr 为key,限制平均每秒的请求为20个， #1M能存储16000个状态，rete的值必须为整数， #如果限制两秒钟一个请求，可以设置成30r/m limit_req_zone $binary_remote_addr zone=allips:10m rate=20r/s; server&#123; location &#123; #限制每ip每秒不超过20个请求，漏桶数burst为5 #brust的意思就是，如果第1秒、2,3,4秒请求为19个， #第5秒的请求为25个是被允许的。 #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。 #nodelay，如果不设置该选项，严格使用平均速率限制请求数， #第1秒25个请求时，5个请求放到第2秒执行， #设置nodelay，25个请求将在第1秒执行。 limit_req zone=allips burst=5 nodelay; &#125; &#125;&#125; HttpLimitZoneModule 限制并发连接数实例limit_zone只能定义在http作用域，limit_conn可以定义在http server location作用域12345678910111213141516171819202122http&#123; #定义一个名为one的limit_zone,大小10M内存来存储session， #以$binary_remote_addr 为key #nginx 1.18以后用limit_conn_zone替换了limit_conn #且只能放在http作用域 limit_conn_zone one $binary_remote_addr 10m; server&#123; location &#123; limit_conn one 20; #连接数限制 #带宽限制,对单个连接限数，如果一个ip两个连接，就是500x2k limit_rate 500k; &#125; &#125;&#125; nginx白名单设置以上配置会对所有的ip都进行限制，有些时候我们不希望对搜索引擎的蜘蛛或者自己测试ip进行限制，对于特定的白名单ip我们可以借助geo指令实现。1.123456789101112131415161718192021222324252627282930313233http&#123; geo $limited&#123; default 1; #google 64.233.160.0/19 0; 65.52.0.0/14 0; 66.102.0.0/20 0; 66.249.64.0/19 0; 72.14.192.0/18 0; 74.125.0.0/16 0; 209.85.128.0/17 0; 216.239.32.0/19 0; #M$ 64.4.0.0/18 0; 157.60.0.0/16 0; 157.54.0.0/15 0; 157.56.0.0/14 0; 207.46.0.0/16 0; 207.68.192.0/20 0; 207.68.128.0/18 0; #yahoo 8.12.144.0/24 0; 66.196.64.0/18 0; 66.228.160.0/19 0; 67.195.0.0/16 0; 74.6.0.0/16 0; 68.142.192.0/18 0; 72.30.0.0/16 0; 209.191.64.0/18 0; #My IPs 127.0.0.1/32 0; 123.456.0.0/28 0; #example for your server CIDR &#125; geo指令定义了一个白名单$limited变量，默认值为1，如果客户端ip在上面的范围内，$limited的值为0 2.使用map指令映射搜索引擎客户端的ip为空串，如果不是搜索引擎就显示本身真是的ip，这样搜索引擎ip就不能存到limit_req_zone内存session中，所以不会限制搜索引擎的ip访问1234map $limited $limit &#123;1 $binary_remote_addr;0 "";&#125; 3.设置limit_req_zone和limit_reqlimit_req_zone $limit zone=foo:1m rate=10r/m; limit_req zone=foo burst=5; 最后我们使用ab压php-fpm的方式，对上面的方法效果实际测试下 例1：限制只允许一分钟内只允许一个ip访问60次配置，也就是平均每秒1次首先我们准备一个php脚本放在根目录下$document_roottest.php nginx配置增加limit_req_zone 和 limit_req123456789101112131415http&#123; limit_req_zone $binary_remote_addr zone=allips:10m rate=60r/m; server&#123; location &#123; limit_req zone=allips; &#125; &#125;&#125; ab -n 5 -c 1 http://www.weizhang.org/test.php 118.144.94.193 - - [22/Dec/2012:06:27:06 +0000] “GET /test.php HTTP/1.0” 200 11000 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:06:27:06 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:06:27:07 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:06:27:07 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:06:27:07 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3” 未设置brust和nodelay可以看到该配置只允许每秒访问1次，超出的请求返回503错误123456789101112131415http&#123; limit_req_zone $binary_remote_addr zone=allips:10m rate=60r/m; server&#123; location &#123; limit_req zone=allips burst=1 nodelay; &#125; &#125;&#125; ab -n 5 -c 1 http://www.weizhang.org/test.php 118.144.94.193 - - [22/Dec/2012:07:01:00 +0000] “GET /test.php HTTP/1.0” 200 11000 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:07:01:00 +0000] “GET /test.php HTTP/1.0” 200 11000 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:07:01:01 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:07:01:01 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:07:01:01 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3” 设置brust=1和nodelay后允许第1秒处理两个请求。]]></content>
      <categories>
        <category>编程</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3编写贴吧图片下载软件]]></title>
    <url>%2F2019%2F05%2F23%2Fpython3%E7%BC%96%E5%86%99%E8%B4%B4%E5%90%A7%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[刚开始了解python爬虫写的，代码都很简单。我的CSDN原文地址：python 3 爬取某小说网站小说，注释详细先上效果图，启动后是这样的： 按提示输入内容运行后是这样的： 上代码（基本都是最基本的语法，不多解释了） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172import requestsimport osfrom bs4 import BeautifulSoupfrom pip._vendor.distlib.compat import raw_input def down(type, num, url, img_path): if type == '1': url2 = url + '&amp;pn=&#123;&#125;'.format(num) else: url2 = url + '?pn=&#123;&#125;'.format(num) # 如果不存在此文件夹就创建 if not os.path.exists(img_path): os.makedirs(img_path) # 解析地址 req = requests.get(url2) # 设置编码，浏览器查看网站编码：F12，控制开输入document.characterSet回车即可查看 req.encoding = "utf-8" # 获取网页所有内容 bs = BeautifulSoup(req.text, 'html.parser') # 找到类名为BDE_Image的标签 img = bs(class_='BDE_Image') con = 0 if img.__len__() == 0: print("&lt;--第&#123;&#125;页无图片，跳转下一页--&gt;".format(num)) else: for xx in img: con += 1 # 获取图片地址、图片宽高 url = xx.get('src') height = xx.get('height') width = xx.get('width') name = '\\' + str(num) + '_' + str(con) + '(' + height + 'x' + width + ')' # 下载 res = requests.get(url) with open("&#123;&#125;&#123;&#125;&#123;&#125;".format(img_path, name, '.jpg'), 'wb')as f: f.write(res.content) print("第&#123;&#125;页，第&#123;&#125;张，下载完毕".format(num, con)) if __name__ == '__main__': print('贴吧图片下载工具v1.0 by wjup\n\n说明：输入内容请按要求填写，填错会退出程序。' '\n请规范输入帖子地址,像这样--&gt;\n只看楼主：https://tieba.baidu.com/p/3430697608?see_lz=1\n' '不是只看楼主：https://tieba.baidu.com/p/3430697608' '\n图片保存路径写法：F:\\\image，如果不填会默认下载到E:\\\贴吧图片 目录下\n\n') type = raw_input('开始吧！\n\n请选择是否为只看楼主类型的地址\n（输入1或2即可） 1：是 2：否 :') while type.strip() == '': type = raw_input('请选择是否为只看楼主类型的地址\n（输入1或2即可） 1：是 2：否 :') url = raw_input('\n请输入贴子地址:') while url.strip() == '': print('地址都不输入，还下载个毛！') url = raw_input('请输入贴子地址:') end_page = input('\n请输入帖子总页数：') if end_page.strip() == '': print('页数为空，默认下载前3页图片内容') end_page = 3 img_path = raw_input('\n请输入图片保存路径（例：F:\\\image）：') print('-------------下载--------------') if not img_path.strip(): print('地址为空默认保存到 E:\\\贴吧图片') print('-------------下载--------------\n') img_path = 'E:\\贴吧图片' for i in range(1, int(end_page) + 1): down(type, i, url, img_path)]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新服务器简单配置]]></title>
    <url>%2F2019%2F05%2F23%2F%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[今早翻开手机看到某云一条广告Linux1 核 2 GB 1 Mbps服务器10元一个月，正巧最近在搞linux，于是下单了一台2个月20。 上班来到公司后，借空闲时间一顿研究，一波骚操作配置后，浏览器打开ip地址正常，看到了熟悉的tomcat9页面。 然后又是一波骚操作，把自己的之前写的spring boot + jpa + bootstrap + thymeleaf 简单的增删改查Demo项目部署了上去，打开ip也正常显示。 所以在此记录下，当拿到一台全新的linux服务器后该如何配置（操作步骤借鉴公司内部的环境部署文档） 我的配置流程是：网络设置、mysql、java、tomcat、发布项目 配置网络设置有的linux拿到后不能访问网络所以要配置下网络设置vi /etc/resolv.conf：添加一行 nameserver 114.114.114.114 重启网络：service network restart 配置mysql安装mysql：yum –y install mysql 在这里安装后可能会出现一个错误，解决如下：yum install的时候提示：Loaded plugins: fastestmirrorfastestmirror是yum的一个加速插件，这里是插件提示信息是插件不能用了。不能用就先别用呗，禁用掉，先yum了再说。修改插件的配置文件vi /etc/yum/pluginconf.d/fastestmirror.confenabled = 1//由1改为0，禁用该插件修改yum的配置文件vi /etc/yum.confplugins=1//改为0，不使用插件 安装mariadb（mysql的分支）：yum -y install mariadb-server 装库成功后启动数据库： systemctl start mariadb检查数据库状态： systemctl status mariadb 确保是开启状态后进入数据库：mysql为root账号设置密码，同时刷新权限，如密码是‘root’： use mysql;update user set Password=PASSWORD(&quot;root&quot;) where User=&#39;root&#39;;flush privileges; 增加一个用户。在项目中用它，创建用户名‘xxx’，密码‘123456a?’的用户 create user &#39;xxx&#39;@&#39;%&#39; identified by &#39;123456a?&#39;; 给他赋予所有的权限 GRANT ALL PRIVILEGES ON *.* TO &#39;xxx&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456a?&#39;; 刷新权限：flush privileges; 退出数据库，重新使用wjup和root账号登录，验证是否能登陆成功 这里也容易出现的问题：ERROR 1045 (28000): Access denied for user ‘tester‘@’localhost’ (using password: YES)解决方式a：用户密码是否正确，修改密码修改MySQL的登录设置：vim /etc/my.cnf在[mysqld]的段中加上一句：skip-grant-tables重新启动mysql// service mysql restartsystemctl restart mariadb登录并修改MySQL的root密码 mysql&gt; use mysql; Database changed mysql&gt; update user set password = password (‘new-password’) where user = ‘root’; Query OK, 0 rows affected (0.00 sec) Rows matched: 5 Changed: 0 Warnings: 0 mysql&gt; flush privileges; Query OK, 0 rows affected (0.01 sec) mysql&gt; quit将MySQL的登录设置修改回来vim /etc/my.cnf将刚才在[mysqld]的段中加上的skip-grant-tables注释保存并且退出vim重新启动mysql//service mysql restartsystemctl restart mariadb解决方式b：数据库中存在匿名用户，删除匿名用户即可Delete FROM user Where User=&#39;&#39;;flush privileges; 到这里如果需要远程连接，可以开放3306端口 iptables -I INPUT -p tcp --dport 3306 -j ACCEPT; 然后可以远程用navicat或者啥连接试试了 配置JDK我把jdk放在了/usr/java下 创建文件夹：mkdir /usr/java 用ftp工具上传下载好的jdk-8u211-linux-x64.rpm ORACLE官方下载地址 执行安装命令：rpm -ivh jdk-8u211-linux-x64.rpm 如果提示缺少执行权限执行权限命令：chmod +x jdk-8u211-linux-x64.rpm 查看java的版本信息：java -version 配置环境变量：vim ~/.bash_profile 末尾追加1234export JAVA_HOME=/usr/java/jdk1.8.0_211-amd64export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$JAVA_HOME/bin:$PATH 加载刚设置的变量：source /etc/profile 配置tomcattomcat同样我也放在了/usr/tomcat同样先创建文件夹：mkdir/tomcat用ftp工具上传进去，然后解压：tar -xzvf apache-tomcat-9.0.20.tar.gz tomcat官方下载地址 解压后编辑tomcat的配置文件，修改默认的8080端口改为80vi usr/tomcat/apache-tomcat-9.0.20/conf/server.xml 然后退出，保存（esc、:wq）,接着去tomcat的bin目录启动tomcat就可以了sh apache-tomcat-9.0.20/bin/startup.sh可以到tomcat的logs下查看catalina.outtail -f apache-tomcat-9.0.20/logs/catalina.out成功后放开80端口iptables -I INPUT -p tcp --dport 80 -j ACCEPT没问题的话然后在浏览器就可以看到tomcat9的默认页面了 发布项目 将项目配置好数据库连接信息和端口后打成war包，然后上传到tomcat的webapp目录下 先停止tomcat（sh shutdown.sh），再次启动即可（sh startup.sh） 等待启动成功后就可以在浏览器查看项目了（http://ip/war包名） 想访问地址不加war包名就可以可看到项目，可以把webapp下自动解压的war包文件夹里的内容替换到ROOT文件夹下即可]]></content>
      <categories>
        <category>编程</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>服务器配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[五月周结🙃]]></title>
    <url>%2F2019%2F05%2F11%2F%E4%BA%94%E6%9C%88%E5%91%A8%E7%BB%93%2F</url>
    <content type="text"><![CDATA[业精于勤荒于嬉，行成于思毁于随。 &emsp;&emsp;心慌慌的过去了一周，至于为啥心慌慌。我想可能是我的技术还是太菜了吧。 &emsp;&emsp;周二晚上，受人指点关于liunx上采集系统的问题。由于初次接触linux，命令也只会cd、ls之类简单的，所以被指点时，大神一个字母一个字母说着让我输入命令。唉，那种感觉太差劲了。所以这周主要学习了linux相关的命令，初步了解了一些，内心既忧虑又欣喜，忧虑的是问题解决没思路，欣喜的是操作了传说当中的linux，这种感觉和自己电脑上装的linux虚机不一样。现在操作的是真实的环境，运行着项目的环境，此项目就是这半年多改bug的项目，至于项目的部署，环境的搭建还是没操作过。不过有机会得实操一波。 &emsp;&emsp;就这样这一周慌慌的来到了今天-周六。总是感觉自己在无所作为或没完成任务时内心十分的焦虑、慌张。 &emsp;&emsp;转到运维现场环境，不知道在两个月内，还会不会写代码，贴个图展示一些在inspur的代码提交情况吧。 &emsp;&emsp;这一周迷上了历史，正在追《大秦帝国之裂变》，看到了卫鞅在秦国大展自己的博学那段，史称“商鞅变法”。从中看到了秦孝公赢取梁为使自己国家变强的决心与意志，在招进卫鞅后与他商讨三天三夜的治理秦国之策。卫鞅也在讲，变法才能使秦国强大，才能使秦国走上一统天下的道路。看自己的人生道路不也是那样吗，人生的道路自己也要不断变法，不能因循守旧，要灵慧变通，不断寻求新方法，改变自己，使自己变得强大，才能走上幸福的道路，让自己家人过上好日子。]]></content>
      <categories>
        <category>生活</category>
        <category>总结</category>
      </categories>
      <tags>
        <tag>周结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello! linux!]]></title>
    <url>%2F2019%2F05%2F08%2Fhello-linux%2F</url>
    <content type="text"><![CDATA[这两天，接触到了久违的linux，然后就被嫌弃了一波 因为之前很少操作liunx系统，分配的任务又是在linux上操作snmp采集，瞬间感觉自己和傻子一样，啥也不懂啥也不会。 在此记录下常用的liunx命令 cd命令它用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径123cd /root/home #进入home文件夹cd ./tomcat #切换到当前目录下的tomcat目录cd ../path #切换到上一级目录下的path文件夹 ls命令查看文件与目录的命令，list之意1234-l: 列数长数据串，包含文件的属性与权限数据等 ls -l也可以用ll代替-a: 列出全部文件，连同隐藏文件（开头为.的文件）一起列出来（常用）-h: 将文件容量以较易读的方式（GB，kB等）列出来-R: 连同子目录的内容一起列出来（递归列出），等于该目录下的所有文件都会显示出来 grep命令该命令常用于分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等命令格式：grep [选项] ”模式“ [文件] 常用选项1234567891011-E：开启扩展（Extend）的正则表达式-i：忽略大小写（ignore case）-v：只打印没有匹配的（invert），匹配的不打印-n：显示行号-w：匹配的文本只能是单词，而不能是单词的一部分。例如文本中由liker，而我搜的是like，就可以用-w，避免搜到liker-c：显示有多少行被匹配到了，而不是显示被匹配到的内容，同时使用-cv显示有多少行没有被匹配到-o：只显示被模式匹配的字符串--color：将匹配的内容以颜色高亮显示-A n：显示被匹配的字符串所在的行和其后的n行，after-B n：显示被匹配的字符串所在的行和其前的n行，before-C n：显示被匹配的字符串所在的行和其前后的n行，context 模式部分可以直接输入要匹配的字符串这个可以利用fgrep（fast grep）代替提高查找速度，例如查找hello.c文件中print的个数：fgerp -c “print” hello.c 使用基本表达式 . ：任意一个字符 [abc] ：匹配的字符，必须是abc中的一个 [a-zA-Z] ：表示匹配一个字符，这个字符必须是a-z或A-Z这52个字母中的一个。 [^123] ：匹配一个字符，这个字符是除了1、2、3以外的所有字符。 对于一些常用的字符集，系统做了定义： [A-Za-z] 等价于 [[:alpha:]] [0-9] 等价于 [[:digit:]] [A-Za-z0-9] 等价于 [[:alnum:]] tab,space 等空白字符 [[:space:]] [A-Z] 等价于 [[:upper:]] [a-z] 等价于 [[:lower:]] find命令find是一个基于查找的功能非常强大的命令，相对而言，它的使用也相对较为复杂，参数也比较多命令格式：find [PATH] [option] [action] （操作符、选项、测试表达式以及动作） 与时间有关的参数1234-mtime n：搜索在n天之前的”一天内“被更改的文件-mtime +n：列出在n天前（不含n天本身）被更改过的文件名-mtime -n：搜索在n天之内（含n天本身）被更改过的文件名-newer file：列出比file还要新的文件名 例如：find /root -mtime 0 ：在当前目录下查找今天之内被改动过的文件 与文件权限及名称相关的参数123456-name：查找文件名为name的文件-size +/-size：找出比size还要大/小的文件，byte单位-type type：查找文件类型为type的文件，type的类型一般由：一般文件（f)、设备文件（b、c）、 目录（d）、连接文件（l）、socket（s）、FIFO管道文件（p）-perm mode ：查找文件权限刚好等于mode的文件，mode用数字表示，如0755； -perm -mode ：查找文件权限必须要全部包括mode权限的文件，mode用数字表示 -perm +mode ：查找文件权限包含任一mode的权限的文件，mode用数字表示 例如：find . -perm 0755 # 查找当前目录中文件权限的0755的文件find . -size +12k # 查找当前目录中大于12KB的文件，注意c表示byte 与用户或用户组名有关的参数：-user name : 列出文件所有者为name的文件-group name : 列出文件所属用户组为name的文件-uid n : 列出文件所有者为用户ID为n的文件-gid n : 列出文件所属用户组为用户组ID为n的文件例如：find /home/ljianhui -user ljianhui # 在目录/home/ljianhui中找出所有者为ljianhui的文件 cp命令命令格式：cp [option] [source] [dest]（cp [选项] [源文件] [目标文件]）该命令用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下12345-a：将文件的特性一起复制-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份 -i ：若目标文件已经存在时，在覆盖时会先询问操作的进行 -r ：递归持续复制，用于目录的复制行为 -u ：目标文件与源文件有差异时才会复制 例如：cp -a file1 file2 #连同文件的所有特性把文件file1复制成文件file2cp file1 file2 file3 dir #把文件file1、file2、file3复制到目录dir中 mv命令命令格式：cp [option] [source] [dest]（cp [选项] 源文件或目录 目标文件或目录）该命令用于移动文件、目录或更名，move之意123-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖 -i ：若目标文件已经存在，就会询问是否覆盖 -u ：若目标文件已经存在，且比目标文件新，才会更新 例如：mv file1 file2 file3 dir # 把文件file1、file2、file3移动到目录dir中mv file1 file2 # 把文件file1重命名为file2 rm命令该命令用于删除文件或目录，remove之间123-f ：就是force的意思，忽略不存在的文件，不会出现警告消息 -i ：互动模式，在删除前会询问用户是否操作 -r ：递归删除，最常用于目录删除，它是一个非常危险的参数 例如：rm -i file # 删除文件file，在删除之前会询问是否进行该操作rm -fr dir # 强制删除目录dir中的所有文件 tail命令（head与之相反）命令格式：tail [ -f ] [ -c Number | -n Number | -m Number | -b Number | -k Number ] [ File ]123456-f：用于监视文件的增长-c num：从num字节位置读取指定文件-n：从num行位置读取文件-m Number： 从 Number 多字节字符位置读取指定文件，比方你的文件假设包括中文字，假设指定-c参数，可能导致截断，但使用-m则会避免该问题。-b Number： 从 Number 表示的512字节块位置读取指定文件。-k Number： 从 Number 表示的1KB块位置读取指定文件。 File 指定操作的目标文件名称上述命令中，都涉及到number，假设不指定，默认显示10行。Number前面可使用正负号，表示该偏移从顶部还是从尾部開始计算。tail可运行文件一般在/usr/bin/以下。例如：tali -f tomcat.log # 实时显示最新日志tail -n 100 tomcat.log #显示最后100行数据tail -n -100 tomcat.log #除了前99行不显示外，显示第100行到末尾行 https://blog.csdn.net/q357010621/article/details/80248611]]></content>
      <categories>
        <category>编程</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[五一小长假-回家之旅]]></title>
    <url>%2F2019%2F05%2F05%2F%E4%BA%94%E4%B8%80%E5%B0%8F%E9%95%BF%E5%81%87-%E5%9B%9E%E5%AE%B6%E4%B9%8B%E6%97%85%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;转眼五一四天过去了，过的真TM快。还没缓过神呢，已经在公司上班了。由于种种原因决定五一回躺家，回家的路畅快无比，望着窗外的风景，思绪早已超过火车，向着家乡飞驰而去。 五一第1天&emsp;&emsp;一大早收拾完行李📦，便匆忙奔向了火车站，中途本想给弟弟在这边的批发市场买个篮球，逛了一圈也没找到。于是想着还是回家买吧，家里应该便宜，毕竟十八线小镇物价应该没那么高。&emsp;&emsp;取票还好，虽然人多，但是自动取款机也不少啊。票买的晚😕，直接到家的票没了，只能买到中途站的了，下了车再补票 &emsp;&emsp;一路颠簸，铁轨🚝两旁都是树，而且铁轨都穿行在郊区，没啥好看的风景，只有这条河🌊还算广阔 [一条大河~ 波浪宽~] &emsp;&emsp;颠颠簸簸下午终于到达了我的小镇🏰，美丽而又漂亮的**。下了车在街道找了半天看到一家卖体育器材的店铺，进去逛了下，最便宜的蓝球也100多，遂，离开。没想到那么贵💰。又溜达半天一个小妹妹过来塞了张叫了只鸡优惠券给我，没想到小镇上也有了这样的店铺。后来在一家文具店买了一套文具✏和一个篮球🏀35大洋，还可以，几年级的小孩子打完全足够。&emsp;&emsp;坐着公交到站，一下车各种花香便扑鼻而来，天蓝蓝，地绿油油，一阵微风吹来，仿佛姑娘在轻抚我的脸，异常舒服。不过偶尔还有牛粪的味道😂，远处的山上几座风车在悠闲的转动着。一切都充满了乡村气息，宁静而又平和。 手拙拍的太丑👇👇👇 回到家弟弟看见篮球高兴的欢呼雀跃跳了起来😂😂，傍晚我爸爸也回到了家。 五一第2天&emsp;&emsp;回到家，大家都知道，早晨别想睡懒觉。一大早就会喊你起床吃饭，甭管多早，他们都会说 “都几点了还不起床，太阳都到哪了，赶紧起床吃饭”，翻身看表6点半🙃。弟弟在家可能也早起习惯了，起来也开始摇晃我，喊我打球。&emsp;&emsp;现在的时节，地里还没有太多的农活，吃过饭便没事了。我爸开着三轮车带着我妈，去地里打打农药，我和弟弟也没啥事，打篮球累了，就躺沙发看看电视。中午我妈在菜园子里割了一把韭菜，给我们烙饼吃，不知为啥家里烧柴的大铁锅，做出来的什么都特别好吃，充满了家的味道。 带大家领略一下我家周围 村里种的树不少，拍出来有种住在少数民族的寨子里一样😂👇👇👇 震惊，乡村恐龙出没，被抓拍 站在楼顶拍的，我家种的槐树，下面还有无花果，山楂，石榴，桑葚 下午偶尔翻出日记本，看下封面，充满了无限梦想的中学时代 五一第3天&emsp;&emsp;昨天晚上我妈从鸡窝里捉了一只两年的老公鸡，绑了起来，说明天给你们杀鸡吃。我妈说杀鸡吃时，我弟弟还拦着不让，炒好后左手拿着鸡腿，右手筷子不停歇，含泪吃了两大碗（哈哈😂，开玩笑，杀鸡我俩还没起床呢） 五一最后一天&emsp;&emsp;早晨起床后，没看见我爸，我妈说一大早就坐车回青岛了。有点小伤心，为了生活分分合合。我吃过饭也该起程了，由于没坐上去镇里的公交，我妈怕我火车晚点，开着三轮车绕过盘山路送我到了镇上。 山的背面👇👇👇 &emsp;&emsp;在我以往的记忆里，每逢割麦子，就到了放暑假的时候了，而且天很热，当然妈妈也会给我一块，五毛的让我去买雪糕吃，炎热的夏季，一块雪糕入口，啊~，怎一爽子了得。那时候割麦子挑回家，等一两天后，大家就开始打麦子。由于小时候家家都不是很富裕，一个村也就一个打麦机，放在大队里（村委会），然后很多人用手巾包着头，抬着打麦机，挨家挨户轮流打，轮流帮忙。打完后，小麦秸秆往往堆成一堆，和小山一样。和小伙伴爬上去踩在上面，跳啊跳的。很有弹性，常常高兴的没头没脑。那时候，打完小麦就会放鞭炮庆祝，还会发糖吃，庆祝大丰收，也感谢帮忙的人。而现在人民生活水平提高，很多人都出去打工了，没出去打工的，家里也会有自家买的打麦机，两个人差不多就能完成。但是总感觉少了些什么。 路旁养蜂的人，一路有很多，他们大都待一段时间，就会迁移到其他地方继续采蜜，一年到处奔波，也挺不容易的。记得小时候学校旁边有养蜂的，经常被蛰，脸肿的和馒头一样，眼睛眯成一条线都快睁不开了，然而还是会去招惹它，乐此不疲。 到了火车站人挤人，站了差不多三个小时，就又回到了工作的城市，山东的省会—泉城济南。]]></content>
      <categories>
        <category>生活</category>
        <category>日常</category>
      </categories>
      <tags>
        <tag>五一</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[100-500+状态码详解]]></title>
    <url>%2F2019%2F04%2F29%2F100-500-%E7%8A%B6%E6%80%81%E7%A0%81%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[1xx响应信息提示这些状态代码表示临时的响应。客户端在收到常规响应之前，应准备接收一个或多个1xx 100 - Continue 初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新） 101 - Switching Protocols 服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新） 2xx - 成功这类状态代码表明服务器成功地接受了客户端请求 200 - OK 一切正常，对GET和POST请求的应答文档跟在后面。 201 - Created 服务器已经创建了文档，Location头给出了它的URL。 202 - Accepted 已经接受请求，但处理尚未完成。 203 - Non-Authoritative Information 文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝，非权威性信息（HTTP 1.1新）。 204 - No Content 没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。 205 - Reset Content 没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。 206 - Partial Content 客户发送了一个带有Range头的GET请求（分块请求），服务器完成了它（HTTP 1.1新）。 3xx - 重定向客户端浏览器必须采取更多操作来实现请求。例如，浏览器可能不得不请求服务器上的不同的页面，或通过代理服务器重复该请求 300 - Multiple Choices 客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。 301 - Moved Permanently 客户请求的文档在其他地方，新的URL在Location头中给出，GET、HEAD请求时浏览器应该自动地访问新的URL。 302 - Found 类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使 用。例如，如果浏览器错误地请求 http://host/~user （缺少了后面的斜杠），有的服务器返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET、HEAD时浏览器才会自动重定向。请参见307。 303 - See Other 类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取，即该状态码存在的最主要意义是为了处理POST请求重定向到GET请求的情况（HTTP 1.1新）。 304 - Not Modified 客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。 305 - Use Proxy 客户请求的文档应该通过Location头所指明的代理服务器提取（HTTP 1.1新）。 307 - Temporary Redirect 许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时 才能重定向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307，301，302应答，则浏览器只能跟随对GET、HEAD请求的重定向。（HTTP 1.1新） 4xx - 客户端错误发生错误，客户端似乎有问题。例如，客户端请求不存在的页面，客户端未提供有效的身份验证信息 400 - Bad Request 请求出现语法错误。 401 - Unauthorized 访问被拒绝，客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在 填写合适的Authorization头后再次发出请求。IIS 定义了许多不同的 401 错误，它们指明更为具体的错误原因。这些具体的错误代码在浏览器中显示，但不在 IIS 日志中显示： 401.1 - 登录失败。 401.2 - 服务器配置导致登录失败。 401.3 - 由于 ACL 对资源的限制而未获得授权。 401.4 - 筛选器授权失败。 401.5 - ISAPI/CGI 应用程序授权失败。 401.7 –访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。 403 - Forbidden 资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。禁止访问：IIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因： 403.1 - 执行访问被禁止。 403.2 - 读访问被禁止。 403.3 - 写访问被禁止。 403.4 - 要求 SSL。 403.5 - 要求 SSL 128。 403.6 - IP 地址被拒绝。 403.7 - 要求客户端证书。 403.8 - 站点访问被拒绝。 403.9 - 用户数过多。 403.10 - 配置无效。 403.11 - 密码更改。 403.12 - 拒绝访问映射表。 403.13 - 客户端证书被吊销。 403.14 - 拒绝目录列表。 403.15 - 超出客户端访问许可。 403.16 - 客户端证书不受信任或无效。 403.17 - 客户端证书已过期或尚未生效。 403.18 - 在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。 403.19 - 不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。 403.20 - Passport 登录失败。这个错误代码为 IIS 6.0 所专用。 404 - Not Found 无法找到指定位置的资源。这也是一个常用的应答。 404.0 -（无） – 没有找到文件或目录。 404.1 - 无法在所请求的端口上访问 Web 站点。 404.2 - Web 服务扩展锁定策略阻止本请求。 404.3 - MIME 映射策略阻止本请求。 405 - Method Not Allowed 请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用，用来访问本页面的 HTTP 谓词不被允许（方法不被允许）（HTTP 1.1新） 406 - Not Acceptable 指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容，客户端浏览器不接受所请求页面的 MIME 类型（HTTP 1.1新）。 407 - Proxy Authentication Required 要求进行代理身份验证，类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新） 408 - Request Timeout 在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1新） 409 - Conflict 通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新） 410 - Gone 所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而404表示由于未知的原因文档不可用。（HTTP 1.1新） 411 - Length Required 服务器不能处理请求，除非客户发送一个Content-Length头。（HTTP 1.1新） 412 - Precondition Failed 请求头中指定的一些前提条件失败（HTTP 1.1新）。 413 – Request Entity Too Large 目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头（HTTP 1.1新）。 414 - Request URI Too Long URI太长（HTTP 1.1新）。 415 – 不支持的媒体类型。 416 – Requested Range Not Satisfiable 服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新） * 417 – 执行失败。 423 – 锁定的错误。 5xx - 服务器错误服务器由于遇到错误而不能完成该请求 500 - Internal Server Error 服务器遇到了意料不到的情况，不能完成客户的请求。 500.12 - 应用程序正忙于在 Web 服务器上重新启动。 500.13 - Web 服务器太忙。 500.15 - 不允许直接请求 Global.asa。 500.16 – UNC 授权凭据不正确。这个错误代码为 IIS 6.0 所专用。 500.18 – URL 授权存储不能打开。这个错误代码为 IIS 6.0 所专用。 500.100 - 内部 ASP 错误。 501 - Not Implemented 服务器不支持实现请求所需要的功能，页眉值指定了未实现的配置。例如，客户发出了一个服务器不支持的PUT请求。 502 - Bad Gateway 服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。 亦说Web 服务器用作网关或代理服务器时收到了无效响应。 502.1 - CGI 应用程序超时。 502.2 - CGI 应用程序出错。 503 - Service Unavailable 服务不可用，服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个 Retry-After头。这个错误代码为 IIS 6.0 所专用。 504 - Gateway Timeout 网关超时，由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新） 。 505 - HTTP Version Not Supported 服务器不支持请求中所指明的HTTP版本。（HTTP 1.1新） 说明根据RFC2616D定义，对于HTTP Response响应码301、302、307，如果请求不是GET或者HEAD，而response返回的状态码是302，那么浏览器禁止重定向到新的请求，除非得到用户的确认！因为这可能会导致请求条件变更而出现。参考：RFC2616 Hypertext Transfer Protocol – HTTP/1.1相应的Java的HTTP Client包就是根据这个规范进行处理的，如果对返回Response状态码是307，301，302的POST请求设置setFollowRedirects，系统就会报错：java.lang.IllegalArgumentException: Entity enclosing requests cannot be redirected without user intervention！如果可以的话，把POST改成Get后即使在307响应码的情况下也能自动重定向 502 Bad Gateway：tomcat没有启动起来 504 Gateway Time-out: nginx报出来的错误，一般是nginx做为反向代理服务器的时候，所连接的应用服务器譬如tomcat无相应导致的 302（临时移动） 服务器目前正从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求，302响应时，临时URL通过Location 字段返回给客户端。 304（未修改） 自从上次请求后，请求的网页未被修改过。服务器返回此响应时，不会返回网页内容。 307 - Temporary Redirect 许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时 才能重定向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307，301，302应答，则浏览器只能跟随对GET、HEAD请求的重定向。（HTTP 1.1新）]]></content>
      <categories>
        <category>编程</category>
        <category>html</category>
      </categories>
      <tags>
        <tag>状态码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[故乡的路]]></title>
    <url>%2F2019%2F04%2F28%2F%E6%95%85%E4%B9%A1%E7%9A%84%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[“希望是本无所谓有，本无所谓无的，这正如地上的路，其实地上本没有路，走的人多了，也便成了路” 《故乡》-鲁迅&emsp;&emsp;小时候走的“路”，大多都是长辈们铺好的。正如嗷嗷待哺的乌鸦，张着嘴，摇头晃脑的等着鸦妈妈把虫儿塞到嘴里一样，一切都是按照他们的计划向前行走着。你也不用担心前面有“坑”，或者其他的什么危险，因为他们总会说我走的路比你走的桥都多，不会害你走弯路的，与是你更加自信的向他们安排的方向跑了起来，充满了好奇和向往。 &emsp;&emsp;后来随着我们慢慢的长大，便发现他们的有些路已经不是我们想要去的地方了，于是便自己开疆破土，四处乱撞，一步一步激动又害怕的向着自己心中的方向试探去，终于哪一日跌进泥潭，便想起了小时候父母铺好的路了，然而不过两三天，又朝向心中不知是黑暗还是黎明的方向走去…]]></content>
      <categories>
        <category>生活</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo写文章基本操作及Markdown语法]]></title>
    <url>%2F2019%2F04%2F28%2Fhexo%E5%86%99%E6%96%87%E7%AB%A0%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[hexo写博客基础操作，包含常用markdown语法，hexo创建页面，发布文章等 官网提供语法说明：Hexo基础操作 创建文章和发布创建新页面： 1hexo new newpapername 然后在source/_post中打开markdown文件，就可以开始编辑了当你写完的时候，再执行下面三行命令 123hexo clean：清除了你之前生成的东西，也可以不加hexo generate：顾名思义，生成静态文章，可以用hexo g缩写hexo deploy：部署文章，可以用hexo d缩写 主要文件头信息生成的md文件头信息说明 1234title：文章标题date：生成时间tags：标签，多个标签书写格式---&gt;[1,2,3]categories：分类 加密头信息加密文章书写格式（需要安装插件） 123password: 该博客加密使用的密码abstract: 该博客的摘要，会显示在博客的列表页message: 查看博客时，密码输入框上面的描述性文字 置顶方式头信息再头信息中加入（需要安装插件支持） 1top: num（num越大越靠前） 自定义摘要在摘要后加下面代码 1&lt;!-- more --&gt; 添加404页面在 hexo/source 目录内新建 404.html设置元数据信息，如果不想套用主题布局可设置 layout 为 false 12layout: false title: &quot;My Blog Name | 404&quot; 创建自定义页面1hexo new page pageName 页面配置 123456layout: pagetitle: pageTitle # 必须，页面名称description: # 页面二级标题，描述性文字comments: false # 禁用评论，可选，默认开启reward: false # 禁用打赏，可选，默认开启urlname: xxxxxx # 更换本文地址路径 适用next主题的操作Bootstrap Callout1&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125; 其中class值可以为default primary success info warning danger Content (md partial supported) Content (md partial supported) Content (md partial supported) Content (md partial supported) Content (md partial supported) Content (md partial supported) no class_name danger no-icon 插入视频12&#123;% video https://example.com/sample.mp4 %&#125;&#123;% video /path/to/your/video.mp4 %&#125; 选项卡 “tab” 为选项卡的名称，可以自定义，数字是几表示从第几个选项卡开始。非必须，若数值为 - 1 则隐藏选项卡内容。 1234567891011&#123;% tabs tab,2 %&#125;&lt;!-- tab --&gt;this is tab1&lt;!-- endtab --&gt;&lt;!-- tab --&gt;this is tab2&lt;!-- endtab --&gt;&lt;!-- tab --&gt;this is tab3&lt;!-- endtab --&gt;&#123;% endtabs %&#125; tab 1tab 2tab 3this is tab1this is tab2this is tab3 名字写在选项里面 1234567891011&#123;% tabs Fourth unique name %&#125;&lt;!-- tab Solution 1 --&gt;**This is Tab 1.**&lt;!-- endtab --&gt;&lt;!-- tab Solution 2 --&gt;**This is Tab 2.**&lt;!-- endtab --&gt;&lt;!-- tab Solution 3 --&gt;**This is Tab 3.**&lt;!-- endtab --&gt;&#123;% endtabs %&#125; Solution 1Solution 2Solution 3This is Tab 1.This is Tab 2.This is Tab 3. Font Awesome 图标 Font Awesome 是一套绝佳的图标字体库和 CSS 框架。Font Awesome 字体为您提供可缩放矢量图标, 它可以被定制大小、颜色、阴影以及任何可以用 CSS 的样式。要使用 Font Awesome 图标，请在 HTML 页面的 部分中添加以下行： 国内推荐 CDN1&lt;link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css"&gt; 海外推荐 CDN1&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"&gt; next 已经引用了，可以直接用，比如： 12345678&lt;i class="fa fa-car"&gt;&lt;/i&gt;&lt;i class="fa fa-car" style="font-size:48px;"&gt;&lt;/i&gt;&lt;i class="fa fa-car" style="font-size:60px;color:red;"&gt;&lt;/i&gt;&lt;i class="fa fa-car fa-lg"&gt;&lt;/i&gt;&lt;i class="fa fa-car fa-2x"&gt;&lt;/i&gt;&lt;i class="fa fa-car fa-3x"&gt;&lt;/i&gt;&lt;i class="fa fa-car fa-4x"&gt;&lt;/i&gt;&lt;i class="fa fa-car fa-5x"&gt;&lt;/i&gt; 动态图标 12345&lt;i class="fa fa-spinner fa-spin"&gt;&lt;/i&gt;&lt;i class="fa fa-circle-o-notch fa-spin"&gt;&lt;/i&gt;&lt;i class="fa fa-refresh fa-spin"&gt;&lt;/i&gt;&lt;i class="fa fa-cog fa-spin"&gt;&lt;/i&gt;&lt;i class="fa fa-spinner fa-pulse"&gt;&lt;/i&gt; iframe在文章中插入iframe1&#123;% iframe url [width px] [height px] %&#125; Todo list123456789&lt;ul&gt;&lt;li&gt;&lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成&lt;/li&gt;&lt;li&gt;&lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成&lt;/li&gt;&lt;/ul&gt;&lt;!--或者--&gt;- &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成- &lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成 已完成 未完成 文本居中的引用123456789&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt;&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;&lt;!-- 标签别名 --&gt;&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125; 显示效果如下 blah blah blah 常用Makedown语法代码块样式我是代码块的标题wjup的博客12三个点后面的参数[language] [title] [url] [link text] 该代码块的语言是diff12- printf("Hello World!");+ printf("Hello_World!"); 控制图片大小位置直接使用html语法，其中div的alien可居左/中/右，img可设置宽高 12&lt;div align=center&gt;&lt;img src="链接" width="宽度" height="高度" alt="图片名称"&gt; 段落首行缩进 方法一 123半方大的空白&amp;ensp;或&amp;#8194;(缩进1/2个中文)全方大的空白&amp;emsp;或&amp;#8195;(缩进1个中文)不断行的空白格&amp;nbsp;或&amp;#160;(缩进1/4个中文) 方法二 推荐全角空格，切换到全角模式下（一般的中文输入法都是按 shift + space）输入两个空格就行了。这个相对来说稍微干净一点，而且宽度是整整两个汉字，很整齐 表格123|标题一|标题二|标题三||:--------|:---------:|---------:||居左|居中|居右| 标题一 标题二 标题三 居左 居中 居右 超链接1More info: [Deployment](https://hexo.io/docs/deployment.html) More info: Deployment 图片 引用网络图片 1![图片描述](http://wjup-git.kuaiyunds.com/wjup-git/wang_banner.jpg &quot;title&quot;) 引用本地图片（插件支持）,图片放在博文同名文件夹下 1&#123;% asset_img xxx.jpg This is an example image %&#125; 加粗、斜体、又斜又粗、着重突出、删除线1对于__加粗__和对于*斜体*的***结合***`处理`~~啊呀呦~~ 对于加粗和对于斜体的结合处理啊呀呦 任务列表123- [x] 任务1，已完成;- [x] 任务2，已完成;- [ ] 任务3，未完成; 任务1，已完成; 任务2，已完成; 任务3，未完成; 引用1234&gt; 唐朝&gt;&gt; 文化&gt;&gt;&gt; 李白&gt;&gt;&gt;&gt; 路漫漫其修远兮，吾将上下而求索 唐朝 文化 李白 路漫漫其修远兮，吾将上下而求索 无序列表、有序列表123456* 写法一+ 写法二- 写法三1. 排序一2. 排序二5. 自动校正序号三 写法一 写法二 写法三 排序一 排序二 自动校正序号三 分割线123****----____ HTML标签原生折叠隐藏open属性可以设置默认为显示 1234&lt;details open="open"&gt; &lt;summary&gt;标题内容&lt;/summary&gt; &lt;div&gt;折叠内容&lt;/div&gt;&lt;/details&gt; 标题内容 折叠默认显示内容 标题内容 折叠默认折叠内容]]></content>
      <categories>
        <category>编程</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的年终总结之一波三折的2018]]></title>
    <url>%2F2019%2F01%2F01%2F%E6%88%91%E7%9A%84%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%E4%B9%8B%E4%B8%80%E6%B3%A2%E4%B8%89%E6%8A%98%E7%9A%842018%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp; 这一年，可以说是我的IT道路元年。 &emsp;&emsp;自上年（2017）“被放逐”后，经历了三个月的工作寻找期，期间从北京回到了济南。与其说是期间，不如说是开始，因为刚被“放逐”后，在北京待了一个星期左右，面试了一家公司便回来了。&emsp;&emsp;关于面试的那家公司，至今仍然记忆犹新，因为那里是我离开校园后的第一次面试，心情忐忑、激动还有紧张，我想更多的还是好奇吧。接到通知面试的前一天，网上查了一下午资料，分析了到那的路线，地铁30分钟，单车10分钟… …&emsp;&emsp;第二天一大早爬起床，“打扮”的美美的，开始了职业的第一次征程。到面试地点后，里面有个人已经在面试了，于是我坐在沙发上坐了约二十多分钟，轮到我了，进去后是两位小姐姐在那坐着。“你先自我介绍下吧”，“你好，我叫… …”。现在感觉当时自己也真够厉害的，面试全过程自己的声音都在颤抖，小姐姐也在说“你没必要紧张，面试是双向选择的过程，我考虑你的过程，你也在考虑是否选择我们公司，不是吗”，也是她的这句话，陪伴了我后来近三个月几十家的面试，给了我自信。不过到最后连最终的一点自信也快要磨灭了。当然这是后话了。&emsp;&emsp;回到济南后，歇了一个星期，于是网上开始疯狂投简历，每天不断的东奔西走的去面试。以至于到现在陪女朋友出来玩，我都会说这个地方我来面试过。她也总会笑着说，“你哪都面试过！”&emsp;&emsp;差不多面试了两个多月，已经接近年关了，而我仍未有找到工作的势头，我妈打电话说让我回家吧，这都要过年了。记得刚出校时想着，过年肯定要换个手机，再给爸妈买点东西，事实上最后啥也没有，两手空空的回家了。&emsp;&emsp;在家期间，也不至于让自己太难过，因为这一年有了个女朋友，爸妈显然还是有些欣喜的。不过后来过年那几天，也是很不开心的，女朋友想结婚，说的要有房子。我给爸妈说了后，也是没有啥办法，我家是农村的，妈妈种地，爸爸务工，一年下来也攒不了多少钱。而现在的房价，我家的条件在哪也买不起，那几天我也很沮丧，很喜欢一个人不想分开，但又无助的样子真的很狼狈，那几天眼圈都是红的。有天晚上吃过饭时，爸妈和我说这事情，我表现的有点不顺从，我留意到我妈反转身子，面向了挂着地图的墙站着，好像在偷偷的抹泪。唉，当时心里感觉真的像是打翻了五味瓶，自己想哭，但还要强忍着，我爸还和我说着事情，我也不停的眨巴着眼睛，最终还是没忍住，流下了滚烫的泪水，继而像泄了洪一样 ，我也起身走出屋外了。现在想想当时自己也真是不孝。&emsp;&emsp;在家待到了初六就买上了车票，回到济南来了，又是继续的投简历找工作。一个星期左右，给我妈打电话，我妈说找不到先找其他的干着吧，我也开始怀疑了我自己，我是不是在这个行业真的不行。紧接着一个星期，自己也做了打算，想着这是最后一波投简历了，再面试不上就找其他工作干吧，于是又面试了一个星期，然而都是让回去等通知。当时自己真的已经绝望了，看着邮箱还有最后一家面试邀请，面试时间是：周六上午九点。于是周六上午就去了，那个地方正好也顺路，小区门口138路公交的末尾前两三站就是了。到了之后不巧的是那家公司关着门。当时自己站在十几层楼窗户边向外望着，一栋栋钢筋混凝土矗立着，远处的大圆柱型烟筒冒着白烟，长长的飘向远方。我也长长的叹了口气，继而下楼一路走着回到了出租屋里。&emsp;&emsp;不死心的我周一又去了那家，面试我的是个很年轻的小哥，面试过程也很顺畅，简历上我自己买的域名，建的博客网站引起了他的注意，问了我很多，说在我身上看到了他大学时的身影，又聊了会儿，说我还行，然后让另一个人面试了我。那个人问我接受外包吗？心想我对待工作已经如饥似渴了，哪还在乎你的要求，都答应了，之后让我回去。后来又面试了一轮，终于面试上了。&emsp;&emsp;现在想想当时自己真的差一点就放弃了。如果当初放弃，现在又会在哪里，做着什么呢？还会坐在浪潮大楼里写这篇文章吗？直到现在，我都很感激那个面试我，给我机会的人，可以说是我的伯乐。&emsp;&emsp;后来到新公司报道，慢慢的了解到，这是一家初创公司，接一些简单的项目做和外包人力为主，公司员工加上我一共六个人，一个老板，一个负责外包（也是和公司合作的，自己也有独立的外包团队），还有一个算是合伙人吧，另外两个一个比我早来一天。一个来的早，年龄三十多了，后来了解到是培训出来的，不过技术也不错，暂且叫李大哥吧。&emsp;&emsp;刚开始的日子我就和李大哥一块做公司接的一个商城类的小项目，倒也不是做，算是维护改bug吧，听李大哥说这个项目是上一个离职的程序员做的，一个人做了三个多月，心想那个人也真是厉害。后来李大哥外包出去了，我一个人负责这一个项目，还要面对客户，那时真的觉都睡不好，老板给的时间少，客户催的紧，改又不好改。不夸张的说，那几天连睡觉都在梦里改这个项目。不过后来，慢慢的进步，算是改好了，也是在那时，学会了很多东西。&emsp;&emsp;后来我也被外包了出去。在其他公司“打杂”，做的项目也不小，山东省党员在线教育系统平台，项目前后端分离，公司一层楼，这才体会到一个大公司的氛围。这次外包签了三个月的合同，刚开始一块来面试的有八个人，面完留下了四个，后来一个星期试用后，留下了两个，也就我和另一个同事留下来了，再后来差不多一个月后，他因为工作的失误，也离开了，剩下了我自己。这也给了我很大的鼓舞，我相信我也是不比别人差的。&emsp;&emsp;工作都是为了生存，我在这家的第一份工资发了2000，当时心里还是有些小失望的，后来几个月的工资陆陆续续的还拖欠了起来。在这家三个月的外包结束后，时间也到了年中下旬，负责外包的那个人给我说：“我看你也不错，你从老板那辞职，来我团队吧，我这不拖欠工资”，我想想也不错，就辞职偷偷的来他这个团队了，从那辞职后，把拖欠的七千多工资给老板打了个欠条，上面写着要求下个月前还清，可是到了后来要了无数次，终于在三个月内要清了。&emsp;&emsp;他这个外包团队没有公司，人员都外包。后来跟着他来到了现在的工作地点浪潮，在这外包，签了一年的合同，做着云服务的项目，直到现在，四平八稳，一切都像安排好的似的。&emsp;&emsp;今年大致就是这样了，一波三折，老天也算是没辜负我，给了份稳定的工作，慢慢的步入正轨。&emsp;&emsp;关于明年，我想还是以增长技术为主要目标吧，毕竟技术厉害才能成为大佬，才能受人尊敬。嗯，就这样。]]></content>
      <categories>
        <category>生活</category>
        <category>总结</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
      </tags>
  </entry>
</search>
